syntax = "proto3";
package lavanet.lava.epochstorage;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "epochstorage/params.proto";
import "epochstorage/stake_storage.proto";
import "epochstorage/epoch_details.proto";
import "epochstorage/epoch_params.proto";
// this line is used by starport scaffolding # 1
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/lavanet/lava/x/epochstorage/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/lavanet/lava/epochstorage/params";
  }
  // Queries a StakeStorage by index.
	rpc StakeStorage(QueryGetStakeStorageRequest) returns (QueryGetStakeStorageResponse) {
		option (google.api.http).get = "/lavanet/lava/epochstorage/stake_storage/{index}";
	}

	// Queries a list of StakeStorage items.
	rpc StakeStorageAll(QueryAllStakeStorageRequest) returns (QueryAllStakeStorageResponse) {
		option (google.api.http).get = "/lavanet/lava/epochstorage/stake_storage";
	}

// Queries a EpochDetails by index.
	rpc EpochDetails(QueryGetEpochDetailsRequest) returns (QueryGetEpochDetailsResponse) {
		option (google.api.http).get = "/lavanet/lava/epochstorage/epoch_details";
	}
// Queries a EpochParams by index.
	rpc EpochParams(QueryGetEpochParamsRequest) returns (QueryGetEpochParamsResponse) {
		option (google.api.http).get = "/lavanet/lava/epochstorage/epoch_params/{index}";
	}

	// Queries a list of EpochParams items.
	rpc EpochParamsAll(QueryAllEpochParamsRequest) returns (QueryAllEpochParamsResponse) {
		option (google.api.http).get = "/lavanet/lava/epochstorage/epoch_params";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetStakeStorageRequest {
	  string index = 1;

}

message QueryGetStakeStorageResponse {
	StakeStorage stakeStorage = 1 [(gogoproto.nullable) = false];
}

message QueryAllStakeStorageRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllStakeStorageResponse {
	repeated StakeStorage stakeStorage = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetEpochDetailsRequest {}

message QueryGetEpochDetailsResponse {
	EpochDetails EpochDetails = 1 [(gogoproto.nullable) = false];
}
message QueryGetEpochParamsRequest {
	  string index = 1;

}

message QueryGetEpochParamsResponse {
	EpochParams epochParams = 1 [(gogoproto.nullable) = false];
}

message QueryAllEpochParamsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllEpochParamsResponse {
	repeated EpochParams epochParams = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
