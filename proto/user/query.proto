syntax = "proto3";
package lavanet.lava.user;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "user/params.proto";
import "user/user_stake.proto";
import "user/spec_stake_storage.proto";
import "user/block_deadline_for_callback.proto";
import "user/unstaking_users_all_specs.proto";
// this line is used by starport scaffolding # 1
import "user/stake_storage.proto";
import "user/block_num.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/lavanet/lava/x/user/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/lavanet/lava/user/params";
  }
  // Queries a UserStake by index.
	rpc UserStake(QueryGetUserStakeRequest) returns (QueryGetUserStakeResponse) {
		option (google.api.http).get = "/lavanet/lava/user/user_stake/{index}";
	}

	// Queries a list of UserStake items.
	rpc UserStakeAll(QueryAllUserStakeRequest) returns (QueryAllUserStakeResponse) {
		option (google.api.http).get = "/lavanet/lava/user/user_stake";
	}

// Queries a SpecStakeStorage by index.
	rpc SpecStakeStorage(QueryGetSpecStakeStorageRequest) returns (QueryGetSpecStakeStorageResponse) {
		option (google.api.http).get = "/lavanet/lava/user/spec_stake_storage/{index}";
	}

	// Queries a list of SpecStakeStorage items.
	rpc SpecStakeStorageAll(QueryAllSpecStakeStorageRequest) returns (QueryAllSpecStakeStorageResponse) {
		option (google.api.http).get = "/lavanet/lava/user/spec_stake_storage";
	}

// Queries a BlockDeadlineForCallback by index.
	rpc BlockDeadlineForCallback(QueryGetBlockDeadlineForCallbackRequest) returns (QueryGetBlockDeadlineForCallbackResponse) {
		option (google.api.http).get = "/lavanet/lava/user/block_deadline_for_callback";
	}
// Queries a UnstakingUsersAllSpecs by id.
	rpc UnstakingUsersAllSpecs(QueryGetUnstakingUsersAllSpecsRequest) returns (QueryGetUnstakingUsersAllSpecsResponse) {
		option (google.api.http).get = "/lavanet/lava/user/unstaking_users_all_specs/{id}";
	}

	// Queries a list of UnstakingUsersAllSpecs items.
	rpc UnstakingUsersAllSpecsAll(QueryAllUnstakingUsersAllSpecsRequest) returns (QueryAllUnstakingUsersAllSpecsResponse) {
		option (google.api.http).get = "/lavanet/lava/user/unstaking_users_all_specs";
	}

// Queries a list of StakedUsers items.
	rpc StakedUsers(QueryStakedUsersRequest) returns (QueryStakedUsersResponse) {
		option (google.api.http).get = "/lavanet/lava/user/staked_users/{specName}/{output}";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetUserStakeRequest {
	  string index = 1;

}

message QueryGetUserStakeResponse {
	UserStake userStake = 1 [(gogoproto.nullable) = false];
}

message QueryAllUserStakeRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllUserStakeResponse {
	repeated UserStake userStake = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetSpecStakeStorageRequest {
	  string index = 1;

}

message QueryGetSpecStakeStorageResponse {
	SpecStakeStorage specStakeStorage = 1 [(gogoproto.nullable) = false];
}

message QueryAllSpecStakeStorageRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllSpecStakeStorageResponse {
	repeated SpecStakeStorage specStakeStorage = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetBlockDeadlineForCallbackRequest {}

message QueryGetBlockDeadlineForCallbackResponse {
	BlockDeadlineForCallback BlockDeadlineForCallback = 1 [(gogoproto.nullable) = false];
}
message QueryGetUnstakingUsersAllSpecsRequest {
	uint64 id = 1;
}

message QueryGetUnstakingUsersAllSpecsResponse {
	UnstakingUsersAllSpecs UnstakingUsersAllSpecs = 1 [(gogoproto.nullable) = false];
}

message QueryAllUnstakingUsersAllSpecsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllUnstakingUsersAllSpecsResponse {
	repeated UnstakingUsersAllSpecs UnstakingUsersAllSpecs = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryStakedUsersRequest {
  string specName = 1;
  string output = 2;
}

message QueryStakedUsersResponse {
  StakeStorage stakeStorage = 1;
}

// this line is used by starport scaffolding # 3
