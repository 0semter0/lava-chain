syntax = "proto3";
package lavanet.lava.spec;

option go_package = "github.com/lavanet/lava/x/spec/types";
option (gogoproto.equal_all) = true;

import "gogoproto/gogo.proto";

message ServiceApi {
  string name = 1; 
  BlockParser block_parsing = 2 [(gogoproto.nullable) = false];
  uint64 compute_units = 3; 
  bool enabled = 4; 
  repeated ApiInterface api_interfaces = 5 [(gogoproto.nullable) = false]; 
  SpecCategory reserved = 6;
  Parsing parsing = 7 [(gogoproto.nullable) = false];
}

message Parsing {
  string function_tag = 1;
  string function_template = 2;
  BlockParser result_parsing = 3 [(gogoproto.nullable) = false];
}
message ApiInterface {
  string interface = 1;
  string type = 2;
  uint64 extra_compute_units = 3;
  BlockParser overwrite_block_parsing = 4;
  SpecCategory category = 5;
}

message BlockParser {
  repeated string parser_arg = 1;
  PARSER_FUNC parser_func = 2;
}

enum PARSER_FUNC{
  EMPTY = 0;
  PARSE_BY_ARG = 1; //means parameters are ordered and flat expected areguments are: [param index] (example: PARAMS: [<#BlockNum>,"banana"])
  PARSE_CANONICAL = 2; //means parameters are ordered and one of them has named properties, expected areguments are: [param index to object,propname in object] (example: PARAMS: ["banana",{propname:<#BlockNum>}])
  PARSE_DICTIONARY = 3; //means parameters are named, expected arguments are [prop_name,separator] (example: PARAMS: {propname:<#BlockNum>,prop2:"banana"})
  PARSE_DICTIONARY_OR_ORDERED = 4; //means parameters are named expected arguments are [prop_name,separator,parameter order if not found]
  PARSE_DICTIONARY_OR_DEFAULT = 5;
  DEFAULT = 6; //means parameters are non related to block, and should fetch latest block
}

message SpecCategory{
  bool deterministic = 1;
  bool local = 2;
  bool subscription = 3;
  uint32 stateful = 4;
}

