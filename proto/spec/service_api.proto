syntax = "proto3";
package lavanet.lava.spec;

option go_package = "github.com/lavanet/lava/x/spec/types";
option (gogoproto.equal_all) = true;

import "gogoproto/gogo.proto";

message ServiceApi {
  string name = 1; 
  BlockParser blockParsing = 2 [(gogoproto.nullable) = false];
  uint64 computeUnits = 3; 
  bool enabled = 4; 
  repeated ApiInterface apiInterfaces = 5 [(gogoproto.nullable) = false]; 
  SpecCategory category = 6;
  string functionTag = 7;
  BlockParser resultParsing = 8 [(gogoproto.nullable) = false];
  FunctionParams functionParams = 9 [(gogoproto.nullable) = false];
}

message FunctionParams {
  string type = 1;
  repeated FunctionParam params = 2 [(gogoproto.nullable) = false]; 

}
message FunctionParam {
  string type = 1;
  string template = 2;
  string value = 3;
  string order = 4;
}
message ApiInterface {
  string interface = 1;
  string type = 2;
  uint64 extraComputeUnits = 3; 
}

message BlockParser {
  repeated string parserArg = 1;
  PARSER_FUNC parserFunc = 2;
}

enum PARSER_FUNC{
  EMPTY = 0;
  PARSE_BY_ARG = 1; //means parameters are ordered and flat expected areguments are: [param index]
  PARSE_CANONICAL = 2; //means parameters are ordered and one of them has named properties, expected areguments are: [param index to object,propname in object]
  PARSE_DICTIONARY = 3; //means parameters are named, expected arguments are [prop_name,separator]
  PARSE_DICTIONARY_OR_ORDERED = 4; //means parameters are named expected arguments are [prop_name,separator,parameter order if not found]
  PARSE_PLAIN = 5; //means parameters are named expected arguments are [prop_name,separator,parameter order if not found]
}

message SpecCategory{
  bool deterministic = 1;
  bool local = 2;
  bool subscription = 3;
  uint32 stateful = 4;
}

