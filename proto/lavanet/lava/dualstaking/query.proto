syntax = "proto3";
package lavanet.lava.dualstaking;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "lavanet/lava/dualstaking/params.proto";
import "lavanet/lava/dualstaking/delegate.proto";

option go_package = "github.com/lavanet/lava/x/dualstaking/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/lavanet/lava/dualstaking/params";
  }

  // Queries a delegator for all its providers.
  rpc DelegatorProviders(QueryDelegatorProvidersRequest) returns (QueryDelegatorProvidersResponse) {
    option (google.api.http).get = "/lavanet/lava/subscription/delegator_providers/{delegator}";
  }

  // Queries a provider for all its delegators.
  rpc ProviderDelegators(QueryProviderDelegatorsRequest) returns (QueryProviderDelegatorsResponse) {
    option (google.api.http).get = "/lavanet/lava/subscription/provider_delegators/{provider}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryDelegatorProvidersRequest {
  string delegator = 1;
  bool with_pending = 2;
}

message QueryDelegatorProvidersResponse {
  repeated Delegation delegations = 1 [(gogoproto.nullable) = false];
}

message QueryProviderDelegatorsRequest {
  string provider = 1;
}

message QueryProviderDelegatorsResponse {
  repeated Delegation delegations = 1 [(gogoproto.nullable) = false];
}