lua_shared_dict sessions 1m;
lua_code_cache on;
init_by_lua_block {
    backends = { "provider3:2223" }
}

upstream grpcservers {
    server 127.0.0.1;

    balancer_by_lua_block {
        local balancer = require "ngx.balancer"
        local ok, err = balancer.set_current_peer(ngx.ctx.host, ngx.ctx.port)
        if not ok then
            ngx.log(ngx.ERR, "failed to set the current peer: ", err)
            return ngx.exit(500)
        end
    }

    keepalive 10;
}

log_format custom '$lava_bob_sponge';
access_log /etc/nginx/bla.log custom;

server {
    listen 80 ssl;
    http2 on;

    ssl_certificate /etc/nginx/ssl/grpc.crt;
    ssl_certificate_key /etc/nginx/ssl/grpc.key;

    grpc_ssl_certificate /etc/nginx/ssl/grpc.crt;
    grpc_ssl_certificate_key /etc/nginx/ssl/grpc.key;
    
    location / {
        # set $target_backend '';
        set $backend_id '';
        access_by_lua_block {
            local headers, err = ngx.req.get_headers()
            if err == "truncated" then
                ngx.log(ngx.ERR, "we got error ", err)  
            end
            ngx.log(ngx.DEBUG, "we got headers ", headers)
            
            local backend
            local backend_id = headers["lava-lb-provider-key"]
            local resolver = require "resty.dns.resolver"

            local function new_backend_key_pair()
                backend = backends[math.random(#backends)]
                backend_id = ngx.md5(backend)
                ngx.var.backend_id = backend_id
                ngx.shared.sessions:set(backend_id, backend)
            end

            -- Generate or fetch session ID
            if not backend_id or backend_id == "" then
                new_backend_key_pair()
            else
                backend = ngx.shared.sessions:get(backend_id)
                if not backend then
                    new_backend_key_pair()
                end
            end

            local host, port = backend:match("([^:]+):([^:]+)")
            local r, err = resolver:new{ nameservers = { "127.0.0.11" } }
            local answers, err = r:query(host, nil, {})
            if answers.errcode then
                ngx.log(ngx.ERR, "server returned error code: ", answers.errcode, ": ", answers.errstr, ", ", backend)
                return ngx.exit(500)
            end

            for i, ans in ipairs(answers) do
                ngx.ctx.host = ans.address
                ngx.ctx.port = port
                break
            end
        }

        add_trailer "lava-lb-provider-key" "$backend_id";

        grpc_pass grpcservers;
        set $lava_bob_sponge $http_lava_lb_provider_key;
                          
        # proxy_pass grpcservers;
        default_type application/grpc;
        error_page 502 = /error502grpc;

        # grpc_set_header X-Session-ID $http_x_session_id;
        # grpc_set_header X-Real-IP $remote_addr;
        # grpc_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # grpc_set_header X-Forwarded-Proto $scheme;
        grpc_pass_header lava-lb-provider-key;
    }
    
    grpc_pass_header lava-lb-provider-key;

    location = /error502grpc {
        internal;
        default_type application/grpc;
        add_header grpc-status 14;
        add_header content-length 0;
        return 204;
    }
}
