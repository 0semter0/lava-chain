// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/fixationEntry.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Entry struct {
	Index         string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Block         uint64 `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
	MarshaledData []byte `protobuf:"bytes,3,opt,name=marshaled_data,json=marshaledData,proto3" json:"marshaled_data,omitempty"`
	References    uint64 `protobuf:"varint,4,opt,name=references,proto3" json:"references,omitempty"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_702478ef0512c95d, []int{0}
}
func (m *Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return m.Size()
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

func (m *Entry) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Entry) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

func (m *Entry) GetMarshaledData() []byte {
	if m != nil {
		return m.MarshaledData
	}
	return nil
}

func (m *Entry) GetReferences() uint64 {
	if m != nil {
		return m.References
	}
	return 0
}

type UniqueIndex struct {
	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UniqueIndex string `protobuf:"bytes,2,opt,name=unique_index,json=uniqueIndex,proto3" json:"unique_index,omitempty"`
}

func (m *UniqueIndex) Reset()         { *m = UniqueIndex{} }
func (m *UniqueIndex) String() string { return proto.CompactTextString(m) }
func (*UniqueIndex) ProtoMessage()    {}
func (*UniqueIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_702478ef0512c95d, []int{1}
}
func (m *UniqueIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UniqueIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UniqueIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UniqueIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniqueIndex.Merge(m, src)
}
func (m *UniqueIndex) XXX_Size() int {
	return m.Size()
}
func (m *UniqueIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_UniqueIndex.DiscardUnknown(m)
}

var xxx_messageInfo_UniqueIndex proto.InternalMessageInfo

func (m *UniqueIndex) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UniqueIndex) GetUniqueIndex() string {
	if m != nil {
		return m.UniqueIndex
	}
	return ""
}

func init() {
	proto.RegisterType((*Entry)(nil), "lavanet.lava.common.Entry")
	proto.RegisterType((*UniqueIndex)(nil), "lavanet.lava.common.UniqueIndex")
}

func init() { proto.RegisterFile("common/fixationEntry.proto", fileDescriptor_702478ef0512c95d) }

var fileDescriptor_702478ef0512c95d = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x50, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x8d, 0x43, 0x8a, 0x84, 0x5b, 0x3a, 0x98, 0x0e, 0x51, 0x07, 0x2b, 0x54, 0x20, 0x65, 0x4a,
	0x06, 0x76, 0x84, 0x10, 0x0c, 0xac, 0x91, 0x58, 0x58, 0x2a, 0x27, 0x76, 0x53, 0x8b, 0xc4, 0x2e,
	0x8e, 0x83, 0x5a, 0xbe, 0x82, 0xcf, 0x62, 0xec, 0xc8, 0x88, 0x92, 0x1f, 0x41, 0x39, 0x57, 0xd0,
	0xe9, 0x7c, 0xef, 0xee, 0xf9, 0xbd, 0x7b, 0x78, 0x5e, 0xe8, 0xba, 0xd6, 0x2a, 0x5d, 0xc9, 0x2d,
	0xb3, 0x52, 0xab, 0x47, 0x65, 0xcd, 0x2e, 0xd9, 0x18, 0x6d, 0x35, 0xb9, 0xa8, 0xd8, 0x3b, 0x53,
	0xc2, 0x26, 0x43, 0x4d, 0xdc, 0xe2, 0x7c, 0x56, 0xea, 0x52, 0xc3, 0x3c, 0x1d, 0x5e, 0x6e, 0x75,
	0xf1, 0x81, 0x47, 0xc0, 0x24, 0x33, 0x3c, 0x92, 0x8a, 0x8b, 0x6d, 0x88, 0x22, 0x14, 0x9f, 0x65,
	0xae, 0x19, 0xd0, 0xbc, 0xd2, 0xc5, 0x6b, 0xe8, 0x47, 0x28, 0x0e, 0x32, 0xd7, 0x90, 0x6b, 0x3c,
	0xad, 0x99, 0x69, 0xd6, 0xac, 0x12, 0x7c, 0xc9, 0x99, 0x65, 0xe1, 0x49, 0x84, 0xe2, 0x49, 0x76,
	0xfe, 0x87, 0x3e, 0x30, 0xcb, 0x08, 0xc5, 0xd8, 0x88, 0x95, 0x30, 0x42, 0x15, 0xa2, 0x09, 0x03,
	0xf8, 0xe1, 0x08, 0x59, 0xdc, 0xe1, 0xf1, 0xb3, 0x92, 0x6f, 0xad, 0x78, 0x02, 0xad, 0x29, 0xf6,
	0x25, 0x07, 0xf9, 0x20, 0xf3, 0x25, 0x27, 0x97, 0x78, 0xd2, 0xc2, 0x78, 0xe9, 0x8c, 0xf9, 0x60,
	0x6c, 0xdc, 0xfe, 0x53, 0xee, 0x6f, 0xbf, 0x3a, 0x8a, 0xf6, 0x1d, 0x45, 0x3f, 0x1d, 0x45, 0x9f,
	0x3d, 0xf5, 0xf6, 0x3d, 0xf5, 0xbe, 0x7b, 0xea, 0xbd, 0x5c, 0x95, 0xd2, 0xae, 0xdb, 0x7c, 0x38,
	0x3e, 0x3d, 0xa4, 0x01, 0x35, 0x3d, 0xc4, 0x66, 0x77, 0x1b, 0xd1, 0xe4, 0xa7, 0x10, 0xc2, 0xcd,
	0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x1c, 0xbc, 0x1a, 0x4d, 0x01, 0x00, 0x00,
}

func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Entry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.References != 0 {
		i = encodeVarintFixationEntry(dAtA, i, uint64(m.References))
		i--
		dAtA[i] = 0x20
	}
	if len(m.MarshaledData) > 0 {
		i -= len(m.MarshaledData)
		copy(dAtA[i:], m.MarshaledData)
		i = encodeVarintFixationEntry(dAtA, i, uint64(len(m.MarshaledData)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Block != 0 {
		i = encodeVarintFixationEntry(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintFixationEntry(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UniqueIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UniqueIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UniqueIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UniqueIndex) > 0 {
		i -= len(m.UniqueIndex)
		copy(dAtA[i:], m.UniqueIndex)
		i = encodeVarintFixationEntry(dAtA, i, uint64(len(m.UniqueIndex)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintFixationEntry(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFixationEntry(dAtA []byte, offset int, v uint64) int {
	offset -= sovFixationEntry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovFixationEntry(uint64(l))
	}
	if m.Block != 0 {
		n += 1 + sovFixationEntry(uint64(m.Block))
	}
	l = len(m.MarshaledData)
	if l > 0 {
		n += 1 + l + sovFixationEntry(uint64(l))
	}
	if m.References != 0 {
		n += 1 + sovFixationEntry(uint64(m.References))
	}
	return n
}

func (m *UniqueIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFixationEntry(uint64(m.Id))
	}
	l = len(m.UniqueIndex)
	if l > 0 {
		n += 1 + l + sovFixationEntry(uint64(l))
	}
	return n
}

func sovFixationEntry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFixationEntry(x uint64) (n int) {
	return sovFixationEntry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFixationEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFixationEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFixationEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFixationEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFixationEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarshaledData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFixationEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFixationEntry
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFixationEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarshaledData = append(m.MarshaledData[:0], dAtA[iNdEx:postIndex]...)
			if m.MarshaledData == nil {
				m.MarshaledData = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field References", wireType)
			}
			m.References = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFixationEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.References |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFixationEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFixationEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UniqueIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFixationEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UniqueIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UniqueIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFixationEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFixationEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFixationEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFixationEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFixationEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFixationEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFixationEntry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFixationEntry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFixationEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFixationEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFixationEntry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFixationEntry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFixationEntry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFixationEntry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFixationEntry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFixationEntry = fmt.Errorf("proto: unexpected end of group")
)
