// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lvchaintracker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChainTrackerServiceClient is the client API for ChainTrackerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChainTrackerServiceClient interface {
	GetLatestBlockNum(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error)
	GetLatestBlockData(ctx context.Context, in *LatestBlockData, opts ...grpc.CallOption) (*LatestBlockDataResponse, error)
}

type chainTrackerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChainTrackerServiceClient(cc grpc.ClientConnInterface) ChainTrackerServiceClient {
	return &chainTrackerServiceClient{cc}
}

func (c *chainTrackerServiceClient) GetLatestBlockNum(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error) {
	out := new(wrapperspb.UInt64Value)
	err := c.cc.Invoke(ctx, "/lvChainTracker.ChainTrackerService/GetLatestBlockNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainTrackerServiceClient) GetLatestBlockData(ctx context.Context, in *LatestBlockData, opts ...grpc.CallOption) (*LatestBlockDataResponse, error) {
	out := new(LatestBlockDataResponse)
	err := c.cc.Invoke(ctx, "/lvChainTracker.ChainTrackerService/GetLatestBlockData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainTrackerServiceServer is the server API for ChainTrackerService service.
// All implementations must embed UnimplementedChainTrackerServiceServer
// for forward compatibility
type ChainTrackerServiceServer interface {
	GetLatestBlockNum(context.Context, *emptypb.Empty) (*wrapperspb.UInt64Value, error)
	GetLatestBlockData(context.Context, *LatestBlockData) (*LatestBlockDataResponse, error)
	mustEmbedUnimplementedChainTrackerServiceServer()
}

// UnimplementedChainTrackerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChainTrackerServiceServer struct {
}

func (UnimplementedChainTrackerServiceServer) GetLatestBlockNum(context.Context, *emptypb.Empty) (*wrapperspb.UInt64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestBlockNum not implemented")
}
func (UnimplementedChainTrackerServiceServer) GetLatestBlockData(context.Context, *LatestBlockData) (*LatestBlockDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestBlockData not implemented")
}
func (UnimplementedChainTrackerServiceServer) mustEmbedUnimplementedChainTrackerServiceServer() {}

// UnsafeChainTrackerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChainTrackerServiceServer will
// result in compilation errors.
type UnsafeChainTrackerServiceServer interface {
	mustEmbedUnimplementedChainTrackerServiceServer()
}

func RegisterChainTrackerServiceServer(s grpc.ServiceRegistrar, srv ChainTrackerServiceServer) {
	s.RegisterService(&ChainTrackerService_ServiceDesc, srv)
}

func _ChainTrackerService_GetLatestBlockNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainTrackerServiceServer).GetLatestBlockNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lvChainTracker.ChainTrackerService/GetLatestBlockNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainTrackerServiceServer).GetLatestBlockNum(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainTrackerService_GetLatestBlockData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestBlockData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainTrackerServiceServer).GetLatestBlockData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lvChainTracker.ChainTrackerService/GetLatestBlockData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainTrackerServiceServer).GetLatestBlockData(ctx, req.(*LatestBlockData))
	}
	return interceptor(ctx, in, info, handler)
}

// ChainTrackerService_ServiceDesc is the grpc.ServiceDesc for ChainTrackerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChainTrackerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lvChainTracker.ChainTrackerService",
	HandlerType: (*ChainTrackerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestBlockNum",
			Handler:    _ChainTrackerService_GetLatestBlockNum_Handler,
		},
		{
			MethodName: "GetLatestBlockData",
			Handler:    _ChainTrackerService_GetLatestBlockData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chain_tracker.proto",
}
