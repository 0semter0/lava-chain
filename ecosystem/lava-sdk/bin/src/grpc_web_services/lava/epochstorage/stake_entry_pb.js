/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var lava_epochstorage_endpoint_pb = require('../../lava/epochstorage/endpoint_pb.js');
var gogoproto_gogo_pb = require('../../gogoproto/gogo_pb.js');
var cosmos_base_v1beta1_coin_pb = require('../../cosmos/base/v1beta1/coin_pb.js');
goog.exportSymbol('proto.lava.epochstorage.StakeEntry', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lava.epochstorage.StakeEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lava.epochstorage.StakeEntry.repeatedFields_, null);
};
goog.inherits(proto.lava.epochstorage.StakeEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.lava.epochstorage.StakeEntry.displayName = 'proto.lava.epochstorage.StakeEntry';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lava.epochstorage.StakeEntry.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lava.epochstorage.StakeEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.lava.epochstorage.StakeEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lava.epochstorage.StakeEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lava.epochstorage.StakeEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    stake: (f = msg.getStake()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    stakeAppliedBlock: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endpointsList: jspb.Message.toObjectList(msg.getEndpointsList(),
    lava_epochstorage_endpoint_pb.Endpoint.toObject, includeInstance),
    geolocation: jspb.Message.getFieldWithDefault(msg, 5, 0),
    chain: jspb.Message.getFieldWithDefault(msg, 6, ""),
    moniker: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lava.epochstorage.StakeEntry}
 */
proto.lava.epochstorage.StakeEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lava.epochstorage.StakeEntry;
  return proto.lava.epochstorage.StakeEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lava.epochstorage.StakeEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lava.epochstorage.StakeEntry}
 */
proto.lava.epochstorage.StakeEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setStake(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStakeAppliedBlock(value);
      break;
    case 4:
      var value = new lava_epochstorage_endpoint_pb.Endpoint;
      reader.readMessage(value,lava_epochstorage_endpoint_pb.Endpoint.deserializeBinaryFromReader);
      msg.addEndpoints(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGeolocation(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setChain(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMoniker(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lava.epochstorage.StakeEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lava.epochstorage.StakeEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lava.epochstorage.StakeEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lava.epochstorage.StakeEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStake();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStakeAppliedBlock();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getEndpointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      lava_epochstorage_endpoint_pb.Endpoint.serializeBinaryToWriter
    );
  }
  f = message.getGeolocation();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getChain();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMoniker();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional cosmos.base.v1beta1.Coin stake = 1;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.lava.epochstorage.StakeEntry.prototype.getStake = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 1));
};


/** @param {?proto.cosmos.base.v1beta1.Coin|undefined} value */
proto.lava.epochstorage.StakeEntry.prototype.setStake = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.lava.epochstorage.StakeEntry.prototype.clearStake = function() {
  this.setStake(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.lava.epochstorage.StakeEntry.prototype.hasStake = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.lava.epochstorage.StakeEntry.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.lava.epochstorage.StakeEntry.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 stake_applied_block = 3;
 * @return {number}
 */
proto.lava.epochstorage.StakeEntry.prototype.getStakeAppliedBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.lava.epochstorage.StakeEntry.prototype.setStakeAppliedBlock = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated Endpoint endpoints = 4;
 * @return {!Array<!proto.lava.epochstorage.Endpoint>}
 */
proto.lava.epochstorage.StakeEntry.prototype.getEndpointsList = function() {
  return /** @type{!Array<!proto.lava.epochstorage.Endpoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, lava_epochstorage_endpoint_pb.Endpoint, 4));
};


/** @param {!Array<!proto.lava.epochstorage.Endpoint>} value */
proto.lava.epochstorage.StakeEntry.prototype.setEndpointsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.lava.epochstorage.Endpoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lava.epochstorage.Endpoint}
 */
proto.lava.epochstorage.StakeEntry.prototype.addEndpoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.lava.epochstorage.Endpoint, opt_index);
};


proto.lava.epochstorage.StakeEntry.prototype.clearEndpointsList = function() {
  this.setEndpointsList([]);
};


/**
 * optional uint64 geolocation = 5;
 * @return {number}
 */
proto.lava.epochstorage.StakeEntry.prototype.getGeolocation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.lava.epochstorage.StakeEntry.prototype.setGeolocation = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string chain = 6;
 * @return {string}
 */
proto.lava.epochstorage.StakeEntry.prototype.getChain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.lava.epochstorage.StakeEntry.prototype.setChain = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string moniker = 8;
 * @return {string}
 */
proto.lava.epochstorage.StakeEntry.prototype.getMoniker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.lava.epochstorage.StakeEntry.prototype.setMoniker = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


goog.object.extend(exports, proto.lava.epochstorage);
