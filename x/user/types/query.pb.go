// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: user/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e5aea63d0fbef6, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e5aea63d0fbef6, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetUserStakeRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetUserStakeRequest) Reset()         { *m = QueryGetUserStakeRequest{} }
func (m *QueryGetUserStakeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserStakeRequest) ProtoMessage()    {}
func (*QueryGetUserStakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e5aea63d0fbef6, []int{2}
}
func (m *QueryGetUserStakeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserStakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserStakeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserStakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserStakeRequest.Merge(m, src)
}
func (m *QueryGetUserStakeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserStakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserStakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserStakeRequest proto.InternalMessageInfo

func (m *QueryGetUserStakeRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetUserStakeResponse struct {
	UserStake UserStake `protobuf:"bytes,1,opt,name=userStake,proto3" json:"userStake"`
}

func (m *QueryGetUserStakeResponse) Reset()         { *m = QueryGetUserStakeResponse{} }
func (m *QueryGetUserStakeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserStakeResponse) ProtoMessage()    {}
func (*QueryGetUserStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e5aea63d0fbef6, []int{3}
}
func (m *QueryGetUserStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserStakeResponse.Merge(m, src)
}
func (m *QueryGetUserStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserStakeResponse proto.InternalMessageInfo

func (m *QueryGetUserStakeResponse) GetUserStake() UserStake {
	if m != nil {
		return m.UserStake
	}
	return UserStake{}
}

type QueryAllUserStakeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUserStakeRequest) Reset()         { *m = QueryAllUserStakeRequest{} }
func (m *QueryAllUserStakeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllUserStakeRequest) ProtoMessage()    {}
func (*QueryAllUserStakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e5aea63d0fbef6, []int{4}
}
func (m *QueryAllUserStakeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUserStakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUserStakeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUserStakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUserStakeRequest.Merge(m, src)
}
func (m *QueryAllUserStakeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUserStakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUserStakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUserStakeRequest proto.InternalMessageInfo

func (m *QueryAllUserStakeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllUserStakeResponse struct {
	UserStake  []UserStake         `protobuf:"bytes,1,rep,name=userStake,proto3" json:"userStake"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUserStakeResponse) Reset()         { *m = QueryAllUserStakeResponse{} }
func (m *QueryAllUserStakeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllUserStakeResponse) ProtoMessage()    {}
func (*QueryAllUserStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e5aea63d0fbef6, []int{5}
}
func (m *QueryAllUserStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUserStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUserStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUserStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUserStakeResponse.Merge(m, src)
}
func (m *QueryAllUserStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUserStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUserStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUserStakeResponse proto.InternalMessageInfo

func (m *QueryAllUserStakeResponse) GetUserStake() []UserStake {
	if m != nil {
		return m.UserStake
	}
	return nil
}

func (m *QueryAllUserStakeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSpecStakeStorageRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetSpecStakeStorageRequest) Reset()         { *m = QueryGetSpecStakeStorageRequest{} }
func (m *QueryGetSpecStakeStorageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSpecStakeStorageRequest) ProtoMessage()    {}
func (*QueryGetSpecStakeStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e5aea63d0fbef6, []int{6}
}
func (m *QueryGetSpecStakeStorageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSpecStakeStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSpecStakeStorageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSpecStakeStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSpecStakeStorageRequest.Merge(m, src)
}
func (m *QueryGetSpecStakeStorageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSpecStakeStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSpecStakeStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSpecStakeStorageRequest proto.InternalMessageInfo

func (m *QueryGetSpecStakeStorageRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetSpecStakeStorageResponse struct {
	SpecStakeStorage SpecStakeStorage `protobuf:"bytes,1,opt,name=specStakeStorage,proto3" json:"specStakeStorage"`
}

func (m *QueryGetSpecStakeStorageResponse) Reset()         { *m = QueryGetSpecStakeStorageResponse{} }
func (m *QueryGetSpecStakeStorageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSpecStakeStorageResponse) ProtoMessage()    {}
func (*QueryGetSpecStakeStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e5aea63d0fbef6, []int{7}
}
func (m *QueryGetSpecStakeStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSpecStakeStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSpecStakeStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSpecStakeStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSpecStakeStorageResponse.Merge(m, src)
}
func (m *QueryGetSpecStakeStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSpecStakeStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSpecStakeStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSpecStakeStorageResponse proto.InternalMessageInfo

func (m *QueryGetSpecStakeStorageResponse) GetSpecStakeStorage() SpecStakeStorage {
	if m != nil {
		return m.SpecStakeStorage
	}
	return SpecStakeStorage{}
}

type QueryAllSpecStakeStorageRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSpecStakeStorageRequest) Reset()         { *m = QueryAllSpecStakeStorageRequest{} }
func (m *QueryAllSpecStakeStorageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSpecStakeStorageRequest) ProtoMessage()    {}
func (*QueryAllSpecStakeStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e5aea63d0fbef6, []int{8}
}
func (m *QueryAllSpecStakeStorageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSpecStakeStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSpecStakeStorageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSpecStakeStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSpecStakeStorageRequest.Merge(m, src)
}
func (m *QueryAllSpecStakeStorageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSpecStakeStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSpecStakeStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSpecStakeStorageRequest proto.InternalMessageInfo

func (m *QueryAllSpecStakeStorageRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSpecStakeStorageResponse struct {
	SpecStakeStorage []SpecStakeStorage  `protobuf:"bytes,1,rep,name=specStakeStorage,proto3" json:"specStakeStorage"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSpecStakeStorageResponse) Reset()         { *m = QueryAllSpecStakeStorageResponse{} }
func (m *QueryAllSpecStakeStorageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSpecStakeStorageResponse) ProtoMessage()    {}
func (*QueryAllSpecStakeStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e5aea63d0fbef6, []int{9}
}
func (m *QueryAllSpecStakeStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSpecStakeStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSpecStakeStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSpecStakeStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSpecStakeStorageResponse.Merge(m, src)
}
func (m *QueryAllSpecStakeStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSpecStakeStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSpecStakeStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSpecStakeStorageResponse proto.InternalMessageInfo

func (m *QueryAllSpecStakeStorageResponse) GetSpecStakeStorage() []SpecStakeStorage {
	if m != nil {
		return m.SpecStakeStorage
	}
	return nil
}

func (m *QueryAllSpecStakeStorageResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBlockDeadlineForCallbackRequest struct {
}

func (m *QueryGetBlockDeadlineForCallbackRequest) Reset() {
	*m = QueryGetBlockDeadlineForCallbackRequest{}
}
func (m *QueryGetBlockDeadlineForCallbackRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBlockDeadlineForCallbackRequest) ProtoMessage()    {}
func (*QueryGetBlockDeadlineForCallbackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e5aea63d0fbef6, []int{10}
}
func (m *QueryGetBlockDeadlineForCallbackRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlockDeadlineForCallbackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlockDeadlineForCallbackRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlockDeadlineForCallbackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlockDeadlineForCallbackRequest.Merge(m, src)
}
func (m *QueryGetBlockDeadlineForCallbackRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlockDeadlineForCallbackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlockDeadlineForCallbackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlockDeadlineForCallbackRequest proto.InternalMessageInfo

type QueryGetBlockDeadlineForCallbackResponse struct {
	BlockDeadlineForCallback BlockDeadlineForCallback `protobuf:"bytes,1,opt,name=BlockDeadlineForCallback,proto3" json:"BlockDeadlineForCallback"`
}

func (m *QueryGetBlockDeadlineForCallbackResponse) Reset() {
	*m = QueryGetBlockDeadlineForCallbackResponse{}
}
func (m *QueryGetBlockDeadlineForCallbackResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBlockDeadlineForCallbackResponse) ProtoMessage()    {}
func (*QueryGetBlockDeadlineForCallbackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e5aea63d0fbef6, []int{11}
}
func (m *QueryGetBlockDeadlineForCallbackResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlockDeadlineForCallbackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlockDeadlineForCallbackResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlockDeadlineForCallbackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlockDeadlineForCallbackResponse.Merge(m, src)
}
func (m *QueryGetBlockDeadlineForCallbackResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlockDeadlineForCallbackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlockDeadlineForCallbackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlockDeadlineForCallbackResponse proto.InternalMessageInfo

func (m *QueryGetBlockDeadlineForCallbackResponse) GetBlockDeadlineForCallback() BlockDeadlineForCallback {
	if m != nil {
		return m.BlockDeadlineForCallback
	}
	return BlockDeadlineForCallback{}
}

type QueryGetUnstakingUsersAllSpecsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetUnstakingUsersAllSpecsRequest) Reset()         { *m = QueryGetUnstakingUsersAllSpecsRequest{} }
func (m *QueryGetUnstakingUsersAllSpecsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetUnstakingUsersAllSpecsRequest) ProtoMessage()    {}
func (*QueryGetUnstakingUsersAllSpecsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e5aea63d0fbef6, []int{12}
}
func (m *QueryGetUnstakingUsersAllSpecsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUnstakingUsersAllSpecsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUnstakingUsersAllSpecsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUnstakingUsersAllSpecsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUnstakingUsersAllSpecsRequest.Merge(m, src)
}
func (m *QueryGetUnstakingUsersAllSpecsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUnstakingUsersAllSpecsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUnstakingUsersAllSpecsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUnstakingUsersAllSpecsRequest proto.InternalMessageInfo

func (m *QueryGetUnstakingUsersAllSpecsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetUnstakingUsersAllSpecsResponse struct {
	UnstakingUsersAllSpecs UnstakingUsersAllSpecs `protobuf:"bytes,1,opt,name=UnstakingUsersAllSpecs,proto3" json:"UnstakingUsersAllSpecs"`
}

func (m *QueryGetUnstakingUsersAllSpecsResponse) Reset() {
	*m = QueryGetUnstakingUsersAllSpecsResponse{}
}
func (m *QueryGetUnstakingUsersAllSpecsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetUnstakingUsersAllSpecsResponse) ProtoMessage()    {}
func (*QueryGetUnstakingUsersAllSpecsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e5aea63d0fbef6, []int{13}
}
func (m *QueryGetUnstakingUsersAllSpecsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUnstakingUsersAllSpecsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUnstakingUsersAllSpecsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUnstakingUsersAllSpecsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUnstakingUsersAllSpecsResponse.Merge(m, src)
}
func (m *QueryGetUnstakingUsersAllSpecsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUnstakingUsersAllSpecsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUnstakingUsersAllSpecsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUnstakingUsersAllSpecsResponse proto.InternalMessageInfo

func (m *QueryGetUnstakingUsersAllSpecsResponse) GetUnstakingUsersAllSpecs() UnstakingUsersAllSpecs {
	if m != nil {
		return m.UnstakingUsersAllSpecs
	}
	return UnstakingUsersAllSpecs{}
}

type QueryAllUnstakingUsersAllSpecsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUnstakingUsersAllSpecsRequest) Reset()         { *m = QueryAllUnstakingUsersAllSpecsRequest{} }
func (m *QueryAllUnstakingUsersAllSpecsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllUnstakingUsersAllSpecsRequest) ProtoMessage()    {}
func (*QueryAllUnstakingUsersAllSpecsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e5aea63d0fbef6, []int{14}
}
func (m *QueryAllUnstakingUsersAllSpecsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUnstakingUsersAllSpecsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUnstakingUsersAllSpecsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUnstakingUsersAllSpecsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUnstakingUsersAllSpecsRequest.Merge(m, src)
}
func (m *QueryAllUnstakingUsersAllSpecsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUnstakingUsersAllSpecsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUnstakingUsersAllSpecsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUnstakingUsersAllSpecsRequest proto.InternalMessageInfo

func (m *QueryAllUnstakingUsersAllSpecsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllUnstakingUsersAllSpecsResponse struct {
	UnstakingUsersAllSpecs []UnstakingUsersAllSpecs `protobuf:"bytes,1,rep,name=UnstakingUsersAllSpecs,proto3" json:"UnstakingUsersAllSpecs"`
	Pagination             *query.PageResponse      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUnstakingUsersAllSpecsResponse) Reset() {
	*m = QueryAllUnstakingUsersAllSpecsResponse{}
}
func (m *QueryAllUnstakingUsersAllSpecsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllUnstakingUsersAllSpecsResponse) ProtoMessage()    {}
func (*QueryAllUnstakingUsersAllSpecsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e5aea63d0fbef6, []int{15}
}
func (m *QueryAllUnstakingUsersAllSpecsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUnstakingUsersAllSpecsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUnstakingUsersAllSpecsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUnstakingUsersAllSpecsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUnstakingUsersAllSpecsResponse.Merge(m, src)
}
func (m *QueryAllUnstakingUsersAllSpecsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUnstakingUsersAllSpecsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUnstakingUsersAllSpecsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUnstakingUsersAllSpecsResponse proto.InternalMessageInfo

func (m *QueryAllUnstakingUsersAllSpecsResponse) GetUnstakingUsersAllSpecs() []UnstakingUsersAllSpecs {
	if m != nil {
		return m.UnstakingUsersAllSpecs
	}
	return nil
}

func (m *QueryAllUnstakingUsersAllSpecsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryStakedUsersRequest struct {
	SpecName string `protobuf:"bytes,1,opt,name=specName,proto3" json:"specName,omitempty"`
}

func (m *QueryStakedUsersRequest) Reset()         { *m = QueryStakedUsersRequest{} }
func (m *QueryStakedUsersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakedUsersRequest) ProtoMessage()    {}
func (*QueryStakedUsersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e5aea63d0fbef6, []int{16}
}
func (m *QueryStakedUsersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakedUsersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakedUsersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakedUsersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakedUsersRequest.Merge(m, src)
}
func (m *QueryStakedUsersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakedUsersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakedUsersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakedUsersRequest proto.InternalMessageInfo

func (m *QueryStakedUsersRequest) GetSpecName() string {
	if m != nil {
		return m.SpecName
	}
	return ""
}

type QueryStakedUsersResponse struct {
	StakeStorage *StakeStorage `protobuf:"bytes,1,opt,name=stakeStorage,proto3" json:"stakeStorage,omitempty"`
	Output       string        `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *QueryStakedUsersResponse) Reset()         { *m = QueryStakedUsersResponse{} }
func (m *QueryStakedUsersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakedUsersResponse) ProtoMessage()    {}
func (*QueryStakedUsersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11e5aea63d0fbef6, []int{17}
}
func (m *QueryStakedUsersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakedUsersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakedUsersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakedUsersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakedUsersResponse.Merge(m, src)
}
func (m *QueryStakedUsersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakedUsersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakedUsersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakedUsersResponse proto.InternalMessageInfo

func (m *QueryStakedUsersResponse) GetStakeStorage() *StakeStorage {
	if m != nil {
		return m.StakeStorage
	}
	return nil
}

func (m *QueryStakedUsersResponse) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "lavanet.lava.user.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "lavanet.lava.user.QueryParamsResponse")
	proto.RegisterType((*QueryGetUserStakeRequest)(nil), "lavanet.lava.user.QueryGetUserStakeRequest")
	proto.RegisterType((*QueryGetUserStakeResponse)(nil), "lavanet.lava.user.QueryGetUserStakeResponse")
	proto.RegisterType((*QueryAllUserStakeRequest)(nil), "lavanet.lava.user.QueryAllUserStakeRequest")
	proto.RegisterType((*QueryAllUserStakeResponse)(nil), "lavanet.lava.user.QueryAllUserStakeResponse")
	proto.RegisterType((*QueryGetSpecStakeStorageRequest)(nil), "lavanet.lava.user.QueryGetSpecStakeStorageRequest")
	proto.RegisterType((*QueryGetSpecStakeStorageResponse)(nil), "lavanet.lava.user.QueryGetSpecStakeStorageResponse")
	proto.RegisterType((*QueryAllSpecStakeStorageRequest)(nil), "lavanet.lava.user.QueryAllSpecStakeStorageRequest")
	proto.RegisterType((*QueryAllSpecStakeStorageResponse)(nil), "lavanet.lava.user.QueryAllSpecStakeStorageResponse")
	proto.RegisterType((*QueryGetBlockDeadlineForCallbackRequest)(nil), "lavanet.lava.user.QueryGetBlockDeadlineForCallbackRequest")
	proto.RegisterType((*QueryGetBlockDeadlineForCallbackResponse)(nil), "lavanet.lava.user.QueryGetBlockDeadlineForCallbackResponse")
	proto.RegisterType((*QueryGetUnstakingUsersAllSpecsRequest)(nil), "lavanet.lava.user.QueryGetUnstakingUsersAllSpecsRequest")
	proto.RegisterType((*QueryGetUnstakingUsersAllSpecsResponse)(nil), "lavanet.lava.user.QueryGetUnstakingUsersAllSpecsResponse")
	proto.RegisterType((*QueryAllUnstakingUsersAllSpecsRequest)(nil), "lavanet.lava.user.QueryAllUnstakingUsersAllSpecsRequest")
	proto.RegisterType((*QueryAllUnstakingUsersAllSpecsResponse)(nil), "lavanet.lava.user.QueryAllUnstakingUsersAllSpecsResponse")
	proto.RegisterType((*QueryStakedUsersRequest)(nil), "lavanet.lava.user.QueryStakedUsersRequest")
	proto.RegisterType((*QueryStakedUsersResponse)(nil), "lavanet.lava.user.QueryStakedUsersResponse")
}

func init() { proto.RegisterFile("user/query.proto", fileDescriptor_11e5aea63d0fbef6) }

var fileDescriptor_11e5aea63d0fbef6 = []byte{
	// 1023 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x24, 0x6d, 0x44, 0x5e, 0x23, 0x94, 0x4e, 0x43, 0x49, 0x96, 0xd6, 0x29, 0x4b, 0x93,
	0xb4, 0x49, 0xba, 0xdb, 0x38, 0x94, 0xb4, 0x20, 0x21, 0x92, 0xa2, 0xf6, 0x56, 0x15, 0x47, 0xbd,
	0x20, 0x21, 0x6b, 0x6c, 0x0f, 0xcb, 0x2a, 0xeb, 0x9d, 0xad, 0x67, 0x5d, 0x1a, 0xa2, 0x5c, 0xf8,
	0x05, 0x05, 0xc4, 0x01, 0x7e, 0x00, 0x37, 0x2e, 0xfc, 0x04, 0x0e, 0x28, 0x12, 0x97, 0x48, 0x5c,
	0x10, 0x07, 0x84, 0x12, 0x7e, 0x08, 0x9a, 0x99, 0xb7, 0x8e, 0x1d, 0xcf, 0xae, 0x93, 0xe0, 0x4b,
	0x92, 0x9d, 0x7d, 0xef, 0x7b, 0xdf, 0xf7, 0xcd, 0xcc, 0x7b, 0x1b, 0x98, 0x6a, 0x4b, 0xde, 0xf2,
	0x9f, 0xb7, 0x79, 0x6b, 0xc7, 0x4b, 0x5a, 0x22, 0x15, 0xf4, 0x72, 0xc4, 0x5e, 0xb0, 0x98, 0xa7,
	0x9e, 0xfa, 0xed, 0xa9, 0xd7, 0xce, 0xb5, 0x40, 0x88, 0x20, 0xe2, 0x3e, 0x4b, 0x42, 0x9f, 0xc5,
	0xb1, 0x48, 0x59, 0x1a, 0x8a, 0x58, 0x9a, 0x04, 0x67, 0xa9, 0x2e, 0x64, 0x53, 0x48, 0xbf, 0xc6,
	0x24, 0x37, 0x48, 0xfe, 0x8b, 0xd5, 0x1a, 0x4f, 0xd9, 0xaa, 0x9f, 0xb0, 0x20, 0x8c, 0x75, 0x30,
	0xc6, 0x5e, 0xd6, 0xe5, 0x12, 0xd6, 0x62, 0xcd, 0x2c, 0xfd, 0x0d, 0xbd, 0xa4, 0x7e, 0x54, 0x65,
	0xca, 0xb6, 0x39, 0x2e, 0x5f, 0xd7, 0xcb, 0x32, 0xe1, 0x75, 0xb3, 0x5c, 0x95, 0xa9, 0x68, 0xb1,
	0x20, 0x7b, 0xbd, 0xa0, 0x5f, 0xd7, 0x22, 0x51, 0xdf, 0xae, 0x36, 0x38, 0x6b, 0x44, 0x61, 0xcc,
	0xab, 0x9f, 0x8b, 0x56, 0xb5, 0xce, 0xa2, 0xa8, 0xc6, 0xea, 0xdb, 0x18, 0x77, 0xd3, 0xa0, 0xc7,
	0x0a, 0x23, 0x8c, 0x83, 0xaa, 0x7a, 0x94, 0x55, 0x16, 0x45, 0x55, 0x05, 0x9d, 0x71, 0x98, 0x31,
	0xc5, 0x2c, 0x75, 0xa6, 0xbb, 0xea, 0xc4, 0xed, 0x26, 0xae, 0x96, 0xba, 0x25, 0x67, 0x62, 0xeb,
	0x22, 0xcc, 0x64, 0x4e, 0x07, 0x22, 0x10, 0xfa, 0x4f, 0x5f, 0xfd, 0x65, 0x56, 0xdd, 0x69, 0xa0,
	0x9f, 0x28, 0x7b, 0x9e, 0x6a, 0xf9, 0x15, 0xfe, 0xbc, 0xcd, 0x65, 0xea, 0x3e, 0x81, 0x2b, 0x3d,
	0xab, 0x32, 0x11, 0xb1, 0xe4, 0x74, 0x1d, 0xc6, 0x8d, 0x4d, 0x33, 0xe4, 0x06, 0xb9, 0x75, 0xa9,
	0x3c, 0xeb, 0xf5, 0xed, 0x8b, 0x67, 0x52, 0x36, 0x2f, 0xec, 0xff, 0x3d, 0x37, 0x52, 0xc1, 0x70,
	0xf7, 0x2e, 0xcc, 0x68, 0xbc, 0xc7, 0x3c, 0x7d, 0x26, 0x79, 0x6b, 0x4b, 0x89, 0xc2, 0x5a, 0x74,
	0x1a, 0x2e, 0x86, 0x71, 0x83, 0xbf, 0xd4, 0x98, 0x13, 0x15, 0xf3, 0xe0, 0x7e, 0x06, 0xb3, 0x96,
	0x0c, 0xe4, 0xf1, 0x11, 0x4c, 0xb4, 0xb3, 0x45, 0xa4, 0x72, 0xcd, 0x42, 0xa5, 0x93, 0x88, 0x6c,
	0x8e, 0x93, 0xdc, 0x1a, 0x12, 0xda, 0x88, 0xa2, 0x3e, 0x42, 0x8f, 0x00, 0x8e, 0xcf, 0x08, 0xc2,
	0x2f, 0x78, 0xc6, 0x5d, 0x4f, 0xb9, 0xeb, 0x99, 0xa3, 0x89, 0x1e, 0x7b, 0x4f, 0x59, 0x90, 0xe5,
	0x56, 0xba, 0x32, 0xdd, 0x9f, 0x08, 0x6a, 0xe8, 0x2d, 0x62, 0xd7, 0x30, 0x76, 0x66, 0x0d, 0xf4,
	0x71, 0x0f, 0xcf, 0x51, 0xcd, 0x73, 0x71, 0x20, 0x4f, 0x53, 0xbe, 0x87, 0xe8, 0x3a, 0xcc, 0x65,
	0x5e, 0x6f, 0x25, 0xbc, 0xae, 0xd1, 0xb7, 0xcc, 0x89, 0x2b, 0xde, 0xa4, 0x1d, 0xb8, 0x91, 0x9f,
	0x88, 0x3a, 0x9f, 0xc1, 0x94, 0x3c, 0xf1, 0x0e, 0x3d, 0x7d, 0xc7, 0x22, 0xf7, 0x24, 0x0c, 0xaa,
	0xee, 0x83, 0x70, 0x43, 0xe4, 0xbc, 0x11, 0x45, 0x79, 0x9c, 0x87, 0xb5, 0x8f, 0xbf, 0x12, 0x94,
	0x69, 0xad, 0x55, 0x28, 0x73, 0xec, 0x7f, 0xca, 0x1c, 0xde, 0x1e, 0xdf, 0x86, 0xc5, 0x6c, 0xab,
	0x36, 0x55, 0xe3, 0xf8, 0x18, 0xfb, 0xd3, 0x23, 0xd1, 0x7a, 0x88, 0xdd, 0x29, 0xbb, 0xfc, 0x3f,
	0x10, 0xb8, 0x35, 0x38, 0x16, 0x75, 0x37, 0x61, 0x26, 0x2f, 0x06, 0x2d, 0x5f, 0xb6, 0xe8, 0xcf,
	0x4b, 0x41, 0x1f, 0x72, 0x21, 0xdd, 0x75, 0x98, 0xef, 0xb4, 0x85, 0xac, 0x7f, 0xaa, 0x2b, 0x22,
	0x71, 0x6f, 0xb2, 0x0e, 0x46, 0x5f, 0x87, 0xd1, 0xb0, 0xa1, 0x19, 0x5c, 0xa8, 0x8c, 0x86, 0x0d,
	0xf7, 0x1b, 0x02, 0x0b, 0x83, 0x32, 0x51, 0x52, 0x00, 0x57, 0xed, 0x11, 0x28, 0xe8, 0xb6, 0xed,
	0x9a, 0x5a, 0x13, 0x50, 0x4e, 0x0e, 0x9c, 0x2b, 0x50, 0x8c, 0xea, 0x0f, 0x85, 0x62, 0x86, 0x75,
	0x92, 0xff, 0xca, 0x4c, 0x28, 0xa8, 0x78, 0x0a, 0x13, 0xc6, 0x86, 0x68, 0xc2, 0xf0, 0x4e, 0xf8,
	0x3d, 0x78, 0x53, 0x6b, 0xd3, 0xf7, 0xa7, 0xa1, 0x8b, 0x64, 0xfe, 0x39, 0xf0, 0x9a, 0xba, 0x59,
	0x4f, 0x58, 0x93, 0x63, 0x03, 0xeb, 0x3c, 0xbb, 0x5f, 0xe2, 0x24, 0xe8, 0x49, 0x43, 0x13, 0x1e,
	0xc2, 0xa4, 0xec, 0xef, 0x5b, 0x73, 0xb6, 0x0b, 0xdd, 0xdd, 0x13, 0x7a, 0x92, 0xe8, 0x55, 0x18,
	0x17, 0xed, 0x34, 0x69, 0xa7, 0x5a, 0xdc, 0x44, 0x05, 0x9f, 0xca, 0xdf, 0x4e, 0xc2, 0x45, 0x5d,
	0x99, 0x7e, 0x05, 0xe3, 0x66, 0x6a, 0xd2, 0x79, 0x0b, 0x74, 0xff, 0x78, 0x76, 0x16, 0x06, 0x85,
	0x19, 0xfe, 0xee, 0xdb, 0x5f, 0xff, 0xf1, 0xef, 0x77, 0xa3, 0x6f, 0xd1, 0x59, 0x1f, 0xe3, 0xf5,
	0x6f, 0xbf, 0xeb, 0x7b, 0x87, 0x7e, 0x4f, 0x60, 0xa2, 0x33, 0x63, 0xe8, 0x72, 0x1e, 0xb0, 0x65,
	0x70, 0x3b, 0x2b, 0xa7, 0x0b, 0x46, 0x2e, 0x77, 0x34, 0x97, 0x45, 0x3a, 0x6f, 0xe1, 0x72, 0xfc,
	0xa1, 0xe5, 0xef, 0xea, 0xc9, 0xb2, 0x47, 0x5f, 0x11, 0x98, 0xec, 0x80, 0x6c, 0x44, 0x51, 0x3e,
	0x35, 0xcb, 0x08, 0xcf, 0xa7, 0x66, 0x1b, 0xc5, 0xee, 0xbc, 0xa6, 0x36, 0x47, 0xaf, 0x17, 0x52,
	0xa3, 0xbf, 0x10, 0x98, 0x3a, 0xd9, 0xb8, 0x69, 0xb9, 0xc0, 0x84, 0x9c, 0xc1, 0xe4, 0xac, 0x9d,
	0x29, 0x07, 0x49, 0xde, 0xd3, 0x24, 0x7d, 0x7a, 0xc7, 0x42, 0xb2, 0xff, 0x8b, 0xb4, 0xe3, 0xe3,
	0xcf, 0x04, 0xae, 0x9c, 0xc4, 0x54, 0x76, 0x96, 0x0b, 0x1c, 0x3a, 0x33, 0xef, 0x82, 0xc1, 0x58,
	0xb8, 0xef, 0xfd, 0xbc, 0xe9, 0xef, 0x24, 0x7f, 0xa0, 0xd0, 0xf7, 0x0b, 0x8c, 0x1b, 0x30, 0xd5,
	0x9c, 0x0f, 0xce, 0x95, 0x8b, 0x22, 0xde, 0xd3, 0x22, 0xee, 0x52, 0xcf, 0x22, 0xa2, 0xe0, 0x7b,
	0x9f, 0xee, 0x93, 0xbc, 0x36, 0x4a, 0xef, 0x17, 0xdd, 0x9e, 0xa2, 0x69, 0xe0, 0x3c, 0x38, 0x47,
	0x26, 0xea, 0x78, 0xa0, 0x75, 0xac, 0xd1, 0x55, 0xdb, 0x49, 0xcf, 0xfb, 0x7f, 0xc4, 0xdf, 0x0d,
	0x1b, 0x7b, 0xf4, 0x37, 0x02, 0xb3, 0x76, 0x74, 0x75, 0x9c, 0xee, 0x17, 0x5d, 0xb8, 0xf3, 0xa9,
	0x19, 0x38, 0xa3, 0xdc, 0x77, 0xb5, 0x1a, 0x8f, 0xae, 0x9c, 0x45, 0x0d, 0xfd, 0x91, 0xc0, 0xa5,
	0xae, 0x66, 0x4f, 0x97, 0xf2, 0x08, 0xf4, 0x0f, 0x12, 0x67, 0xf9, 0x54, 0xb1, 0x48, 0xaf, 0xac,
	0xe9, 0xad, 0xd0, 0x25, 0xdb, 0xc9, 0xd7, 0xf1, 0x86, 0x9b, 0xbf, 0x9b, 0x0d, 0xa3, 0xbd, 0xcd,
	0x0f, 0xf7, 0x0f, 0x4b, 0xe4, 0xe0, 0xb0, 0x44, 0xfe, 0x39, 0x2c, 0x91, 0x57, 0x47, 0xa5, 0x91,
	0x83, 0xa3, 0xd2, 0xc8, 0x9f, 0x47, 0xa5, 0x91, 0x4f, 0x6f, 0x06, 0x61, 0xfa, 0x45, 0xbb, 0xe6,
	0xd5, 0x45, 0xb3, 0x17, 0xef, 0xa5, 0x41, 0x4c, 0x77, 0x12, 0x2e, 0x6b, 0xe3, 0xfa, 0xbf, 0xba,
	0xb5, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x60, 0x01, 0xed, 0x43, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a UserStake by index.
	UserStake(ctx context.Context, in *QueryGetUserStakeRequest, opts ...grpc.CallOption) (*QueryGetUserStakeResponse, error)
	// Queries a list of UserStake items.
	UserStakeAll(ctx context.Context, in *QueryAllUserStakeRequest, opts ...grpc.CallOption) (*QueryAllUserStakeResponse, error)
	// Queries a SpecStakeStorage by index.
	SpecStakeStorage(ctx context.Context, in *QueryGetSpecStakeStorageRequest, opts ...grpc.CallOption) (*QueryGetSpecStakeStorageResponse, error)
	// Queries a list of SpecStakeStorage items.
	SpecStakeStorageAll(ctx context.Context, in *QueryAllSpecStakeStorageRequest, opts ...grpc.CallOption) (*QueryAllSpecStakeStorageResponse, error)
	// Queries a BlockDeadlineForCallback by index.
	BlockDeadlineForCallback(ctx context.Context, in *QueryGetBlockDeadlineForCallbackRequest, opts ...grpc.CallOption) (*QueryGetBlockDeadlineForCallbackResponse, error)
	// Queries a UnstakingUsersAllSpecs by id.
	UnstakingUsersAllSpecs(ctx context.Context, in *QueryGetUnstakingUsersAllSpecsRequest, opts ...grpc.CallOption) (*QueryGetUnstakingUsersAllSpecsResponse, error)
	// Queries a list of UnstakingUsersAllSpecs items.
	UnstakingUsersAllSpecsAll(ctx context.Context, in *QueryAllUnstakingUsersAllSpecsRequest, opts ...grpc.CallOption) (*QueryAllUnstakingUsersAllSpecsResponse, error)
	// Queries a list of StakedUsers items.
	StakedUsers(ctx context.Context, in *QueryStakedUsersRequest, opts ...grpc.CallOption) (*QueryStakedUsersResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.user.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserStake(ctx context.Context, in *QueryGetUserStakeRequest, opts ...grpc.CallOption) (*QueryGetUserStakeResponse, error) {
	out := new(QueryGetUserStakeResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.user.Query/UserStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserStakeAll(ctx context.Context, in *QueryAllUserStakeRequest, opts ...grpc.CallOption) (*QueryAllUserStakeResponse, error) {
	out := new(QueryAllUserStakeResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.user.Query/UserStakeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpecStakeStorage(ctx context.Context, in *QueryGetSpecStakeStorageRequest, opts ...grpc.CallOption) (*QueryGetSpecStakeStorageResponse, error) {
	out := new(QueryGetSpecStakeStorageResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.user.Query/SpecStakeStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpecStakeStorageAll(ctx context.Context, in *QueryAllSpecStakeStorageRequest, opts ...grpc.CallOption) (*QueryAllSpecStakeStorageResponse, error) {
	out := new(QueryAllSpecStakeStorageResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.user.Query/SpecStakeStorageAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlockDeadlineForCallback(ctx context.Context, in *QueryGetBlockDeadlineForCallbackRequest, opts ...grpc.CallOption) (*QueryGetBlockDeadlineForCallbackResponse, error) {
	out := new(QueryGetBlockDeadlineForCallbackResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.user.Query/BlockDeadlineForCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UnstakingUsersAllSpecs(ctx context.Context, in *QueryGetUnstakingUsersAllSpecsRequest, opts ...grpc.CallOption) (*QueryGetUnstakingUsersAllSpecsResponse, error) {
	out := new(QueryGetUnstakingUsersAllSpecsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.user.Query/UnstakingUsersAllSpecs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UnstakingUsersAllSpecsAll(ctx context.Context, in *QueryAllUnstakingUsersAllSpecsRequest, opts ...grpc.CallOption) (*QueryAllUnstakingUsersAllSpecsResponse, error) {
	out := new(QueryAllUnstakingUsersAllSpecsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.user.Query/UnstakingUsersAllSpecsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakedUsers(ctx context.Context, in *QueryStakedUsersRequest, opts ...grpc.CallOption) (*QueryStakedUsersResponse, error) {
	out := new(QueryStakedUsersResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.user.Query/StakedUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a UserStake by index.
	UserStake(context.Context, *QueryGetUserStakeRequest) (*QueryGetUserStakeResponse, error)
	// Queries a list of UserStake items.
	UserStakeAll(context.Context, *QueryAllUserStakeRequest) (*QueryAllUserStakeResponse, error)
	// Queries a SpecStakeStorage by index.
	SpecStakeStorage(context.Context, *QueryGetSpecStakeStorageRequest) (*QueryGetSpecStakeStorageResponse, error)
	// Queries a list of SpecStakeStorage items.
	SpecStakeStorageAll(context.Context, *QueryAllSpecStakeStorageRequest) (*QueryAllSpecStakeStorageResponse, error)
	// Queries a BlockDeadlineForCallback by index.
	BlockDeadlineForCallback(context.Context, *QueryGetBlockDeadlineForCallbackRequest) (*QueryGetBlockDeadlineForCallbackResponse, error)
	// Queries a UnstakingUsersAllSpecs by id.
	UnstakingUsersAllSpecs(context.Context, *QueryGetUnstakingUsersAllSpecsRequest) (*QueryGetUnstakingUsersAllSpecsResponse, error)
	// Queries a list of UnstakingUsersAllSpecs items.
	UnstakingUsersAllSpecsAll(context.Context, *QueryAllUnstakingUsersAllSpecsRequest) (*QueryAllUnstakingUsersAllSpecsResponse, error)
	// Queries a list of StakedUsers items.
	StakedUsers(context.Context, *QueryStakedUsersRequest) (*QueryStakedUsersResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) UserStake(ctx context.Context, req *QueryGetUserStakeRequest) (*QueryGetUserStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserStake not implemented")
}
func (*UnimplementedQueryServer) UserStakeAll(ctx context.Context, req *QueryAllUserStakeRequest) (*QueryAllUserStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserStakeAll not implemented")
}
func (*UnimplementedQueryServer) SpecStakeStorage(ctx context.Context, req *QueryGetSpecStakeStorageRequest) (*QueryGetSpecStakeStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpecStakeStorage not implemented")
}
func (*UnimplementedQueryServer) SpecStakeStorageAll(ctx context.Context, req *QueryAllSpecStakeStorageRequest) (*QueryAllSpecStakeStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpecStakeStorageAll not implemented")
}
func (*UnimplementedQueryServer) BlockDeadlineForCallback(ctx context.Context, req *QueryGetBlockDeadlineForCallbackRequest) (*QueryGetBlockDeadlineForCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockDeadlineForCallback not implemented")
}
func (*UnimplementedQueryServer) UnstakingUsersAllSpecs(ctx context.Context, req *QueryGetUnstakingUsersAllSpecsRequest) (*QueryGetUnstakingUsersAllSpecsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnstakingUsersAllSpecs not implemented")
}
func (*UnimplementedQueryServer) UnstakingUsersAllSpecsAll(ctx context.Context, req *QueryAllUnstakingUsersAllSpecsRequest) (*QueryAllUnstakingUsersAllSpecsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnstakingUsersAllSpecsAll not implemented")
}
func (*UnimplementedQueryServer) StakedUsers(ctx context.Context, req *QueryStakedUsersRequest) (*QueryStakedUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakedUsers not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.user.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUserStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.user.Query/UserStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserStake(ctx, req.(*QueryGetUserStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserStakeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUserStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserStakeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.user.Query/UserStakeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserStakeAll(ctx, req.(*QueryAllUserStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpecStakeStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSpecStakeStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpecStakeStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.user.Query/SpecStakeStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpecStakeStorage(ctx, req.(*QueryGetSpecStakeStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpecStakeStorageAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSpecStakeStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpecStakeStorageAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.user.Query/SpecStakeStorageAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpecStakeStorageAll(ctx, req.(*QueryAllSpecStakeStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlockDeadlineForCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBlockDeadlineForCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlockDeadlineForCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.user.Query/BlockDeadlineForCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlockDeadlineForCallback(ctx, req.(*QueryGetBlockDeadlineForCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UnstakingUsersAllSpecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUnstakingUsersAllSpecsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UnstakingUsersAllSpecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.user.Query/UnstakingUsersAllSpecs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UnstakingUsersAllSpecs(ctx, req.(*QueryGetUnstakingUsersAllSpecsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UnstakingUsersAllSpecsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUnstakingUsersAllSpecsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UnstakingUsersAllSpecsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.user.Query/UnstakingUsersAllSpecsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UnstakingUsersAllSpecsAll(ctx, req.(*QueryAllUnstakingUsersAllSpecsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakedUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.user.Query/StakedUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakedUsers(ctx, req.(*QueryStakedUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lavanet.lava.user.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "UserStake",
			Handler:    _Query_UserStake_Handler,
		},
		{
			MethodName: "UserStakeAll",
			Handler:    _Query_UserStakeAll_Handler,
		},
		{
			MethodName: "SpecStakeStorage",
			Handler:    _Query_SpecStakeStorage_Handler,
		},
		{
			MethodName: "SpecStakeStorageAll",
			Handler:    _Query_SpecStakeStorageAll_Handler,
		},
		{
			MethodName: "BlockDeadlineForCallback",
			Handler:    _Query_BlockDeadlineForCallback_Handler,
		},
		{
			MethodName: "UnstakingUsersAllSpecs",
			Handler:    _Query_UnstakingUsersAllSpecs_Handler,
		},
		{
			MethodName: "UnstakingUsersAllSpecsAll",
			Handler:    _Query_UnstakingUsersAllSpecsAll_Handler,
		},
		{
			MethodName: "StakedUsers",
			Handler:    _Query_StakedUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetUserStakeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserStakeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserStakeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUserStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UserStake.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllUserStakeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUserStakeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUserStakeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllUserStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUserStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUserStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserStake) > 0 {
		for iNdEx := len(m.UserStake) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserStake[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSpecStakeStorageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSpecStakeStorageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSpecStakeStorageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSpecStakeStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSpecStakeStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSpecStakeStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SpecStakeStorage.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSpecStakeStorageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSpecStakeStorageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSpecStakeStorageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSpecStakeStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSpecStakeStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSpecStakeStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SpecStakeStorage) > 0 {
		for iNdEx := len(m.SpecStakeStorage) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpecStakeStorage[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBlockDeadlineForCallbackRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlockDeadlineForCallbackRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlockDeadlineForCallbackRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetBlockDeadlineForCallbackResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlockDeadlineForCallbackResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlockDeadlineForCallbackResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BlockDeadlineForCallback.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetUnstakingUsersAllSpecsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUnstakingUsersAllSpecsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUnstakingUsersAllSpecsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUnstakingUsersAllSpecsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUnstakingUsersAllSpecsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUnstakingUsersAllSpecsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UnstakingUsersAllSpecs.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllUnstakingUsersAllSpecsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUnstakingUsersAllSpecsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUnstakingUsersAllSpecsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllUnstakingUsersAllSpecsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUnstakingUsersAllSpecsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUnstakingUsersAllSpecsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UnstakingUsersAllSpecs) > 0 {
		for iNdEx := len(m.UnstakingUsersAllSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnstakingUsersAllSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakedUsersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakedUsersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakedUsersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpecName) > 0 {
		i -= len(m.SpecName)
		copy(dAtA[i:], m.SpecName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpecName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakedUsersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakedUsersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakedUsersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Output) > 0 {
		i -= len(m.Output)
		copy(dAtA[i:], m.Output)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Output)))
		i--
		dAtA[i] = 0x12
	}
	if m.StakeStorage != nil {
		{
			size, err := m.StakeStorage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetUserStakeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUserStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UserStake.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllUserStakeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllUserStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserStake) > 0 {
		for _, e := range m.UserStake {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSpecStakeStorageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSpecStakeStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SpecStakeStorage.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSpecStakeStorageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSpecStakeStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SpecStakeStorage) > 0 {
		for _, e := range m.SpecStakeStorage {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBlockDeadlineForCallbackRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetBlockDeadlineForCallbackResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BlockDeadlineForCallback.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetUnstakingUsersAllSpecsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetUnstakingUsersAllSpecsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UnstakingUsersAllSpecs.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllUnstakingUsersAllSpecsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllUnstakingUsersAllSpecsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UnstakingUsersAllSpecs) > 0 {
		for _, e := range m.UnstakingUsersAllSpecs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakedUsersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakedUsersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakeStorage != nil {
		l = m.StakeStorage.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Output)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserStakeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserStakeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserStakeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserStake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserStake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUserStakeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUserStakeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUserStakeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUserStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUserStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUserStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserStake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserStake = append(m.UserStake, UserStake{})
			if err := m.UserStake[len(m.UserStake)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSpecStakeStorageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSpecStakeStorageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSpecStakeStorageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSpecStakeStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSpecStakeStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSpecStakeStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecStakeStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpecStakeStorage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSpecStakeStorageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSpecStakeStorageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSpecStakeStorageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSpecStakeStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSpecStakeStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSpecStakeStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecStakeStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecStakeStorage = append(m.SpecStakeStorage, SpecStakeStorage{})
			if err := m.SpecStakeStorage[len(m.SpecStakeStorage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlockDeadlineForCallbackRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlockDeadlineForCallbackRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlockDeadlineForCallbackRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlockDeadlineForCallbackResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlockDeadlineForCallbackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlockDeadlineForCallbackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockDeadlineForCallback", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BlockDeadlineForCallback.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUnstakingUsersAllSpecsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUnstakingUsersAllSpecsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUnstakingUsersAllSpecsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUnstakingUsersAllSpecsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUnstakingUsersAllSpecsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUnstakingUsersAllSpecsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakingUsersAllSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnstakingUsersAllSpecs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUnstakingUsersAllSpecsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUnstakingUsersAllSpecsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUnstakingUsersAllSpecsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUnstakingUsersAllSpecsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUnstakingUsersAllSpecsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUnstakingUsersAllSpecsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakingUsersAllSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnstakingUsersAllSpecs = append(m.UnstakingUsersAllSpecs, UnstakingUsersAllSpecs{})
			if err := m.UnstakingUsersAllSpecs[len(m.UnstakingUsersAllSpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakedUsersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakedUsersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakedUsersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakedUsersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakedUsersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakedUsersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakeStorage == nil {
				m.StakeStorage = &StakeStorage{}
			}
			if err := m.StakeStorage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
