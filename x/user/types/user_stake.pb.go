// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: user/user_stake.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UserStake struct {
	Index    string     `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Address  string     `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Stake    types.Coin `protobuf:"bytes,3,opt,name=stake,proto3" json:"stake"`
	Deadline BlockNum   `protobuf:"bytes,4,opt,name=deadline,proto3" json:"deadline"`
}

func (m *UserStake) Reset()         { *m = UserStake{} }
func (m *UserStake) String() string { return proto.CompactTextString(m) }
func (*UserStake) ProtoMessage()    {}
func (*UserStake) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc05187159fe4b4e, []int{0}
}
func (m *UserStake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserStake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserStake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserStake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserStake.Merge(m, src)
}
func (m *UserStake) XXX_Size() int {
	return m.Size()
}
func (m *UserStake) XXX_DiscardUnknown() {
	xxx_messageInfo_UserStake.DiscardUnknown(m)
}

var xxx_messageInfo_UserStake proto.InternalMessageInfo

func (m *UserStake) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *UserStake) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UserStake) GetStake() types.Coin {
	if m != nil {
		return m.Stake
	}
	return types.Coin{}
}

func (m *UserStake) GetDeadline() BlockNum {
	if m != nil {
		return m.Deadline
	}
	return BlockNum{}
}

func init() {
	proto.RegisterType((*UserStake)(nil), "lavanet.lava.user.UserStake")
}

func init() { proto.RegisterFile("user/user_stake.proto", fileDescriptor_dc05187159fe4b4e) }

var fileDescriptor_dc05187159fe4b4e = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x50, 0xbd, 0x4e, 0xc3, 0x30,
	0x18, 0x8c, 0xa1, 0x05, 0x6a, 0x26, 0xa2, 0x20, 0x85, 0x22, 0x99, 0x0a, 0x31, 0x74, 0xb2, 0x55,
	0x10, 0x23, 0x0c, 0x61, 0x67, 0x28, 0x62, 0x61, 0xa9, 0x9c, 0xe4, 0x53, 0x88, 0x9a, 0xf8, 0xab,
	0x62, 0xa7, 0x2a, 0x6f, 0xc1, 0xab, 0xf0, 0x16, 0x1d, 0x3b, 0x32, 0x21, 0x94, 0xbc, 0x08, 0xb2,
	0x13, 0x58, 0x58, 0xfc, 0xfd, 0xdc, 0x9d, 0xcf, 0x67, 0x7a, 0x5a, 0x6b, 0xa8, 0x84, 0x3d, 0x16,
	0xda, 0xc8, 0x25, 0xf0, 0x55, 0x85, 0x06, 0xfd, 0x93, 0x42, 0xae, 0xa5, 0x02, 0xc3, 0x6d, 0xe5,
	0x16, 0x1e, 0x07, 0x8e, 0x19, 0x17, 0x98, 0x2c, 0x17, 0xaa, 0x2e, 0x3b, 0xe2, 0x38, 0xc8, 0x30,
	0x43, 0xd7, 0x0a, 0xdb, 0xf5, 0x5b, 0x96, 0xa0, 0x2e, 0x51, 0x8b, 0x58, 0x6a, 0x10, 0xeb, 0x59,
	0x0c, 0x46, 0xce, 0x44, 0x82, 0xb9, 0xea, 0xf0, 0xcb, 0x0f, 0x42, 0x47, 0xcf, 0x1a, 0xaa, 0x27,
	0x6b, 0xe9, 0x07, 0x74, 0x98, 0xab, 0x14, 0x36, 0x21, 0x99, 0x90, 0xe9, 0x68, 0xde, 0x0d, 0x7e,
	0x48, 0x0f, 0x65, 0x9a, 0x56, 0xa0, 0x75, 0xb8, 0xe7, 0xf6, 0xbf, 0xa3, 0x7f, 0x4b, 0x87, 0xee,
	0xad, 0xe1, 0xfe, 0x84, 0x4c, 0x8f, 0xaf, 0xcf, 0x78, 0xe7, 0xc6, 0xad, 0x1b, 0xef, 0xdd, 0xf8,
	0x03, 0xe6, 0x2a, 0x1a, 0x6c, 0xbf, 0x2e, 0xbc, 0x79, 0xc7, 0xf6, 0xef, 0xe8, 0x51, 0x0a, 0x32,
	0x2d, 0x72, 0x05, 0xe1, 0xc0, 0x29, 0xcf, 0xf9, 0xbf, 0x98, 0x3c, 0xb2, 0x01, 0x1f, 0xeb, 0xb2,
	0xd7, 0xfe, 0x49, 0xa2, 0xfb, 0x6d, 0xc3, 0xc8, 0xae, 0x61, 0xe4, 0xbb, 0x61, 0xe4, 0xbd, 0x65,
	0xde, 0xae, 0x65, 0xde, 0x67, 0xcb, 0xbc, 0x97, 0xab, 0x2c, 0x37, 0xaf, 0x75, 0xcc, 0x13, 0x2c,
	0x45, 0x7f, 0xa1, 0xab, 0x62, 0xe3, 0x3e, 0x56, 0x98, 0xb7, 0x15, 0xe8, 0xf8, 0xc0, 0x45, 0xbf,
	0xf9, 0x09, 0x00, 0x00, 0xff, 0xff, 0x23, 0x76, 0xbd, 0x18, 0x72, 0x01, 0x00, 0x00,
}

func (m *UserStake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserStake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserStake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Deadline.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintUserStake(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Stake.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintUserStake(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintUserStake(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintUserStake(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUserStake(dAtA []byte, offset int, v uint64) int {
	offset -= sovUserStake(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserStake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovUserStake(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovUserStake(uint64(l))
	}
	l = m.Stake.Size()
	n += 1 + l + sovUserStake(uint64(l))
	l = m.Deadline.Size()
	n += 1 + l + sovUserStake(uint64(l))
	return n
}

func sovUserStake(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUserStake(x uint64) (n int) {
	return sovUserStake(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserStake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserStake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserStake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserStake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserStake
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserStake
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deadline.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserStake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserStake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUserStake(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUserStake
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserStake
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserStake
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUserStake
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUserStake
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUserStake
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUserStake        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUserStake          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUserStake = fmt.Errorf("proto: unexpected end of group")
)
