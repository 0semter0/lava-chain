// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lavanet/lava/dualstaking/delegator_reward.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DelegatorReward struct {
	Delegator string                                   `protobuf:"bytes,1,opt,name=delegator,proto3" json:"delegator,omitempty"`
	Provider  string                                   `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	ChainId   string                                   `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Amount    github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *DelegatorReward) Reset()         { *m = DelegatorReward{} }
func (m *DelegatorReward) String() string { return proto.CompactTextString(m) }
func (*DelegatorReward) ProtoMessage()    {}
func (*DelegatorReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8b6da054bf40d1f, []int{0}
}
func (m *DelegatorReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatorReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatorReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatorReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatorReward.Merge(m, src)
}
func (m *DelegatorReward) XXX_Size() int {
	return m.Size()
}
func (m *DelegatorReward) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatorReward.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatorReward proto.InternalMessageInfo

func (m *DelegatorReward) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *DelegatorReward) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *DelegatorReward) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *DelegatorReward) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func init() {
	proto.RegisterType((*DelegatorReward)(nil), "lavanet.lava.dualstaking.DelegatorReward")
}

func init() {
	proto.RegisterFile("lavanet/lava/dualstaking/delegator_reward.proto", fileDescriptor_c8b6da054bf40d1f)
}

var fileDescriptor_c8b6da054bf40d1f = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x50, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x8d, 0xbf, 0x7e, 0x2a, 0xad, 0x19, 0x90, 0x22, 0x86, 0xb4, 0x42, 0x6e, 0xc5, 0x54, 0x09,
	0x61, 0x53, 0x78, 0x83, 0x02, 0x03, 0x6b, 0x47, 0x96, 0xca, 0x89, 0xad, 0xd4, 0x6a, 0xeb, 0x5b,
	0xd9, 0x4e, 0x80, 0xb7, 0xe0, 0x39, 0x78, 0x92, 0x4a, 0x2c, 0x1d, 0x99, 0x00, 0x25, 0x2f, 0x82,
	0xe2, 0x84, 0xd2, 0x4e, 0x37, 0x37, 0xe7, 0x9e, 0x1f, 0x1f, 0xcc, 0x96, 0x3c, 0xe7, 0x5a, 0x3a,
	0x3f, 0x99, 0xc8, 0xf8, 0xd2, 0x3a, 0xbe, 0x50, 0x3a, 0x65, 0x42, 0x2e, 0x65, 0xca, 0x1d, 0x98,
	0x99, 0x91, 0x4f, 0xdc, 0x08, 0xba, 0x36, 0xe0, 0x20, 0x8c, 0x1a, 0x02, 0xad, 0x26, 0xdd, 0x23,
	0xf4, 0x4f, 0x53, 0x48, 0xc1, 0x1f, 0xb1, 0xea, 0xab, 0xbe, 0xef, 0x93, 0x04, 0xec, 0x0a, 0x2c,
	0x8b, 0xb9, 0x95, 0x2c, 0x1f, 0xc7, 0xd2, 0xf1, 0x31, 0x4b, 0x40, 0xe9, 0x1a, 0x3f, 0x7f, 0x47,
	0xf8, 0xe4, 0xee, 0xd7, 0x6a, 0xea, 0x9d, 0xc2, 0x33, 0xdc, 0xdd, 0xb9, 0x47, 0x68, 0x88, 0x46,
	0xdd, 0xe9, 0xdf, 0x8f, 0xb0, 0x8f, 0x3b, 0x6b, 0x03, 0xb9, 0x12, 0xd2, 0x44, 0xff, 0x3c, 0xb8,
	0xdb, 0xc3, 0x1e, 0xee, 0x24, 0x73, 0xae, 0xf4, 0x4c, 0x89, 0xa8, 0xe5, 0xb1, 0x23, 0xbf, 0x3f,
	0x88, 0x30, 0xc1, 0x6d, 0xbe, 0x82, 0x4c, 0xbb, 0xe8, 0xff, 0xb0, 0x35, 0x3a, 0xbe, 0xee, 0xd1,
	0x3a, 0x19, 0xad, 0x92, 0xd1, 0x26, 0x19, 0xbd, 0x05, 0xa5, 0x27, 0x57, 0x9b, 0xcf, 0x41, 0xf0,
	0xf6, 0x35, 0x18, 0xa5, 0xca, 0xcd, 0xb3, 0x98, 0x26, 0xb0, 0x62, 0xcd, 0x33, 0xea, 0x71, 0x69,
	0xc5, 0x82, 0xb9, 0x97, 0xb5, 0xb4, 0x9e, 0x60, 0xa7, 0x8d, 0xf4, 0xe4, 0x7e, 0x53, 0x10, 0xb4,
	0x2d, 0x08, 0xfa, 0x2e, 0x08, 0x7a, 0x2d, 0x49, 0xb0, 0x2d, 0x49, 0xf0, 0x51, 0x92, 0xe0, 0xf1,
	0x62, 0x4f, 0xeb, 0xa0, 0xf3, 0xe7, 0x83, 0xd6, 0xbd, 0x68, 0xdc, 0xf6, 0xdd, 0xdc, 0xfc, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x3d, 0x8e, 0xbf, 0x24, 0x9e, 0x01, 0x00, 0x00,
}

func (m *DelegatorReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatorReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatorReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDelegatorReward(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintDelegatorReward(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintDelegatorReward(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintDelegatorReward(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDelegatorReward(dAtA []byte, offset int, v uint64) int {
	offset -= sovDelegatorReward(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DelegatorReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovDelegatorReward(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovDelegatorReward(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovDelegatorReward(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovDelegatorReward(uint64(l))
		}
	}
	return n
}

func sovDelegatorReward(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDelegatorReward(x uint64) (n int) {
	return sovDelegatorReward(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DelegatorReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegatorReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatorReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatorReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegatorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegatorReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegatorReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegatorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegatorReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegatorReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegatorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegatorReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegatorReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegatorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDelegatorReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDelegatorReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegatorReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegatorReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDelegatorReward(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDelegatorReward
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegatorReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegatorReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDelegatorReward
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDelegatorReward
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDelegatorReward
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDelegatorReward        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDelegatorReward          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDelegatorReward = fmt.Errorf("proto: unexpected end of group")
)
