// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spec/spec.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Spec struct {
	Index                     string       `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Name                      string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Apis                      []ServiceApi `protobuf:"bytes,3,rep,name=apis,proto3" json:"apis"`
	Enabled                   bool         `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ReliabilityThreshold      uint32       `protobuf:"varint,5,opt,name=reliability_threshold,json=reliabilityThreshold,proto3" json:"reliability_threshold,omitempty"`
	ComparesHashes            bool         `protobuf:"varint,6,opt,name=compares_hashes,json=comparesHashes,proto3" json:"compares_hashes,omitempty"`
	FinalizationCriteria      uint32       `protobuf:"varint,7,opt,name=finalization_criteria,json=finalizationCriteria,proto3" json:"finalization_criteria,omitempty"`
	SavedBlocks               uint32       `protobuf:"varint,8,opt,name=saved_blocks,json=savedBlocks,proto3" json:"saved_blocks,omitempty"`
	AverageBlockTime          int64        `protobuf:"varint,9,opt,name=average_block_time,json=averageBlockTime,proto3" json:"average_block_time,omitempty"`
	AllowedBlockLagForQosSync int64        `protobuf:"varint,10,opt,name=allowed_block_lag_for_qos_sync,json=allowedBlockLagForQosSync,proto3" json:"allowed_block_lag_for_qos_sync,omitempty"`
}

func (m *Spec) Reset()         { *m = Spec{} }
func (m *Spec) String() string { return proto.CompactTextString(m) }
func (*Spec) ProtoMessage()    {}
func (*Spec) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4cc771ffab81d0a, []int{0}
}
func (m *Spec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Spec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Spec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Spec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Spec.Merge(m, src)
}
func (m *Spec) XXX_Size() int {
	return m.Size()
}
func (m *Spec) XXX_DiscardUnknown() {
	xxx_messageInfo_Spec.DiscardUnknown(m)
}

var xxx_messageInfo_Spec proto.InternalMessageInfo

func (m *Spec) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Spec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Spec) GetApis() []ServiceApi {
	if m != nil {
		return m.Apis
	}
	return nil
}

func (m *Spec) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Spec) GetReliabilityThreshold() uint32 {
	if m != nil {
		return m.ReliabilityThreshold
	}
	return 0
}

func (m *Spec) GetComparesHashes() bool {
	if m != nil {
		return m.ComparesHashes
	}
	return false
}

func (m *Spec) GetFinalizationCriteria() uint32 {
	if m != nil {
		return m.FinalizationCriteria
	}
	return 0
}

func (m *Spec) GetSavedBlocks() uint32 {
	if m != nil {
		return m.SavedBlocks
	}
	return 0
}

func (m *Spec) GetAverageBlockTime() int64 {
	if m != nil {
		return m.AverageBlockTime
	}
	return 0
}

func (m *Spec) GetAllowedBlockLagForQosSync() int64 {
	if m != nil {
		return m.AllowedBlockLagForQosSync
	}
	return 0
}

func init() {
	proto.RegisterType((*Spec)(nil), "lavanet.lava.spec.Spec")
}

func init() { proto.RegisterFile("spec/spec.proto", fileDescriptor_c4cc771ffab81d0a) }

var fileDescriptor_c4cc771ffab81d0a = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0xae, 0x69, 0xf6, 0xcf, 0x0b, 0x2c, 0x58, 0x05, 0x99, 0x95, 0x08, 0x01, 0x21, 0x91, 0x03,
	0x4a, 0x24, 0xf6, 0xc0, 0x79, 0x8b, 0x84, 0x38, 0x70, 0x21, 0xdd, 0x13, 0x17, 0x6b, 0xe2, 0xce,
	0x26, 0x16, 0x4e, 0x1c, 0x6c, 0x53, 0xb6, 0x3c, 0x05, 0x8f, 0x81, 0x78, 0x92, 0x3d, 0xee, 0x91,
	0x13, 0x42, 0xed, 0x8b, 0xa0, 0x38, 0xad, 0x54, 0x69, 0x2f, 0x9e, 0x99, 0xef, 0xcf, 0x96, 0xc6,
	0xf4, 0xc4, 0x75, 0x28, 0xf3, 0xfe, 0xc8, 0x3a, 0x6b, 0xbc, 0x61, 0x0f, 0x35, 0x2c, 0xa0, 0x45,
	0x9f, 0xf5, 0x35, 0xeb, 0x89, 0xd3, 0x49, 0x65, 0x2a, 0x13, 0xd8, 0xbc, 0xef, 0x06, 0xe1, 0xe9,
	0xe3, 0xc1, 0x89, 0x76, 0xa1, 0x24, 0x0a, 0xe8, 0xd4, 0x80, 0xbf, 0xf8, 0x3d, 0xa6, 0xd1, 0xac,
	0x43, 0xc9, 0x26, 0x74, 0x4f, 0xb5, 0x73, 0xbc, 0xe2, 0x24, 0x21, 0xe9, 0x51, 0x31, 0x0c, 0x8c,
	0xd1, 0xa8, 0x85, 0x06, 0xf9, 0x9d, 0x00, 0x86, 0x9e, 0xbd, 0xa5, 0x11, 0x74, 0xca, 0xf1, 0x71,
	0x32, 0x4e, 0x8f, 0xdf, 0x3c, 0xcd, 0x6e, 0x3d, 0x21, 0x9b, 0x0d, 0xd7, 0x9c, 0x77, 0x6a, 0x1a,
	0x5d, 0xff, 0x7d, 0x36, 0x2a, 0x82, 0x81, 0x71, 0x7a, 0x80, 0x2d, 0x94, 0x1a, 0xe7, 0x3c, 0x4a,
	0x48, 0x7a, 0x58, 0x6c, 0x47, 0x76, 0x46, 0x1f, 0x59, 0xd4, 0x0a, 0x4a, 0xa5, 0x95, 0x5f, 0x0a,
	0x5f, 0x5b, 0x74, 0xb5, 0xd1, 0x73, 0xbe, 0x97, 0x90, 0xf4, 0x5e, 0x31, 0xd9, 0x21, 0x2f, 0xb6,
	0x1c, 0x7b, 0x45, 0x4f, 0xa4, 0x69, 0x3a, 0xb0, 0xe8, 0x44, 0x0d, 0xae, 0x46, 0xc7, 0xf7, 0x43,
	0xec, 0xfd, 0x2d, 0xfc, 0x21, 0xa0, 0x7d, 0xfa, 0xa5, 0x6a, 0x41, 0xab, 0x1f, 0xe0, 0x95, 0x69,
	0x85, 0xb4, 0xca, 0xa3, 0x55, 0xc0, 0x0f, 0x86, 0xf4, 0x5d, 0xf2, 0xdd, 0x86, 0x63, 0xcf, 0xe9,
	0x5d, 0x07, 0x0b, 0x9c, 0x8b, 0x52, 0x1b, 0xf9, 0xc5, 0xf1, 0xc3, 0xa0, 0x3d, 0x0e, 0xd8, 0x34,
	0x40, 0xec, 0x35, 0x65, 0xb0, 0x40, 0x0b, 0x15, 0x0e, 0x22, 0xe1, 0x55, 0x83, 0xfc, 0x28, 0x21,
	0xe9, 0xb8, 0x78, 0xb0, 0x61, 0x82, 0xf4, 0x42, 0x35, 0xc8, 0xce, 0x69, 0x0c, 0x5a, 0x9b, 0xef,
	0xdb, 0x48, 0xa1, 0xa1, 0x12, 0x97, 0xc6, 0x8a, 0xaf, 0xc6, 0x09, 0xb7, 0x6c, 0x25, 0xa7, 0xc1,
	0xf9, 0x64, 0xa3, 0x0a, 0xce, 0x8f, 0x50, 0xbd, 0x37, 0xf6, 0x93, 0x71, 0xb3, 0x65, 0x2b, 0xa7,
	0xd3, 0x5f, 0xab, 0x98, 0x5c, 0xaf, 0x62, 0x72, 0xb3, 0x8a, 0xc9, 0xbf, 0x55, 0x4c, 0x7e, 0xae,
	0xe3, 0xd1, 0xcd, 0x3a, 0x1e, 0xfd, 0x59, 0xc7, 0xa3, 0xcf, 0x2f, 0x2b, 0xe5, 0xeb, 0x6f, 0x65,
	0x26, 0x4d, 0x93, 0x6f, 0x76, 0x12, 0x6a, 0x7e, 0x15, 0x7e, 0x4c, 0xee, 0x97, 0x1d, 0xba, 0x72,
	0x3f, 0xec, 0xfd, 0xec, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x20, 0xee, 0x07, 0x1c, 0x4b, 0x02,
	0x00, 0x00,
}

func (this *Spec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Spec)
	if !ok {
		that2, ok := that.(Spec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Apis) != len(that1.Apis) {
		return false
	}
	for i := range this.Apis {
		if !this.Apis[i].Equal(&that1.Apis[i]) {
			return false
		}
	}
	if this.Enabled != that1.Enabled {
		return false
	}
	if this.ReliabilityThreshold != that1.ReliabilityThreshold {
		return false
	}
	if this.ComparesHashes != that1.ComparesHashes {
		return false
	}
	if this.FinalizationCriteria != that1.FinalizationCriteria {
		return false
	}
	if this.SavedBlocks != that1.SavedBlocks {
		return false
	}
	if this.AverageBlockTime != that1.AverageBlockTime {
		return false
	}
	if this.AllowedBlockLagForQosSync != that1.AllowedBlockLagForQosSync {
		return false
	}
	return true
}
func (m *Spec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Spec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Spec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowedBlockLagForQosSync != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.AllowedBlockLagForQosSync))
		i--
		dAtA[i] = 0x50
	}
	if m.AverageBlockTime != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.AverageBlockTime))
		i--
		dAtA[i] = 0x48
	}
	if m.SavedBlocks != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.SavedBlocks))
		i--
		dAtA[i] = 0x40
	}
	if m.FinalizationCriteria != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.FinalizationCriteria))
		i--
		dAtA[i] = 0x38
	}
	if m.ComparesHashes {
		i--
		if m.ComparesHashes {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.ReliabilityThreshold != 0 {
		i = encodeVarintSpec(dAtA, i, uint64(m.ReliabilityThreshold))
		i--
		dAtA[i] = 0x28
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Apis) > 0 {
		for iNdEx := len(m.Apis) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Apis[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintSpec(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSpec(dAtA []byte, offset int, v uint64) int {
	offset -= sovSpec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Spec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSpec(uint64(l))
	}
	if len(m.Apis) > 0 {
		for _, e := range m.Apis {
			l = e.Size()
			n += 1 + l + sovSpec(uint64(l))
		}
	}
	if m.Enabled {
		n += 2
	}
	if m.ReliabilityThreshold != 0 {
		n += 1 + sovSpec(uint64(m.ReliabilityThreshold))
	}
	if m.ComparesHashes {
		n += 2
	}
	if m.FinalizationCriteria != 0 {
		n += 1 + sovSpec(uint64(m.FinalizationCriteria))
	}
	if m.SavedBlocks != 0 {
		n += 1 + sovSpec(uint64(m.SavedBlocks))
	}
	if m.AverageBlockTime != 0 {
		n += 1 + sovSpec(uint64(m.AverageBlockTime))
	}
	if m.AllowedBlockLagForQosSync != 0 {
		n += 1 + sovSpec(uint64(m.AllowedBlockLagForQosSync))
	}
	return n
}

func sovSpec(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSpec(x uint64) (n int) {
	return sovSpec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Spec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Spec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Spec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apis = append(m.Apis, ServiceApi{})
			if err := m.Apis[len(m.Apis)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReliabilityThreshold", wireType)
			}
			m.ReliabilityThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReliabilityThreshold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComparesHashes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ComparesHashes = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizationCriteria", wireType)
			}
			m.FinalizationCriteria = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalizationCriteria |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SavedBlocks", wireType)
			}
			m.SavedBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SavedBlocks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageBlockTime", wireType)
			}
			m.AverageBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AverageBlockTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedBlockLagForQosSync", wireType)
			}
			m.AllowedBlockLagForQosSync = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllowedBlockLagForQosSync |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSpec
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSpec
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSpec
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSpec        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpec          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSpec = fmt.Errorf("proto: unexpected end of group")
)
