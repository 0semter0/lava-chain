// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lava/spec/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c05acd229a1b0b20, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c05acd229a1b0b20, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetSpecRequest struct {
	ChainID string `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
}

func (m *QueryGetSpecRequest) Reset()         { *m = QueryGetSpecRequest{} }
func (m *QueryGetSpecRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSpecRequest) ProtoMessage()    {}
func (*QueryGetSpecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c05acd229a1b0b20, []int{2}
}
func (m *QueryGetSpecRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSpecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSpecRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSpecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSpecRequest.Merge(m, src)
}
func (m *QueryGetSpecRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSpecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSpecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSpecRequest proto.InternalMessageInfo

func (m *QueryGetSpecRequest) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

type QueryGetSpecResponse struct {
	Spec Spec `protobuf:"bytes,1,opt,name=Spec,proto3" json:"Spec"`
}

func (m *QueryGetSpecResponse) Reset()         { *m = QueryGetSpecResponse{} }
func (m *QueryGetSpecResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSpecResponse) ProtoMessage()    {}
func (*QueryGetSpecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c05acd229a1b0b20, []int{3}
}
func (m *QueryGetSpecResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSpecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSpecResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSpecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSpecResponse.Merge(m, src)
}
func (m *QueryGetSpecResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSpecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSpecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSpecResponse proto.InternalMessageInfo

func (m *QueryGetSpecResponse) GetSpec() Spec {
	if m != nil {
		return m.Spec
	}
	return Spec{}
}

type QueryAllSpecRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSpecRequest) Reset()         { *m = QueryAllSpecRequest{} }
func (m *QueryAllSpecRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSpecRequest) ProtoMessage()    {}
func (*QueryAllSpecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c05acd229a1b0b20, []int{4}
}
func (m *QueryAllSpecRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSpecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSpecRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSpecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSpecRequest.Merge(m, src)
}
func (m *QueryAllSpecRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSpecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSpecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSpecRequest proto.InternalMessageInfo

func (m *QueryAllSpecRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSpecResponse struct {
	Spec       []Spec              `protobuf:"bytes,1,rep,name=Spec,proto3" json:"Spec"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSpecResponse) Reset()         { *m = QueryAllSpecResponse{} }
func (m *QueryAllSpecResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSpecResponse) ProtoMessage()    {}
func (*QueryAllSpecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c05acd229a1b0b20, []int{5}
}
func (m *QueryAllSpecResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSpecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSpecResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSpecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSpecResponse.Merge(m, src)
}
func (m *QueryAllSpecResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSpecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSpecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSpecResponse proto.InternalMessageInfo

func (m *QueryAllSpecResponse) GetSpec() []Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *QueryAllSpecResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryShowAllChainsRequest struct {
}

func (m *QueryShowAllChainsRequest) Reset()         { *m = QueryShowAllChainsRequest{} }
func (m *QueryShowAllChainsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryShowAllChainsRequest) ProtoMessage()    {}
func (*QueryShowAllChainsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c05acd229a1b0b20, []int{6}
}
func (m *QueryShowAllChainsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowAllChainsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowAllChainsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowAllChainsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowAllChainsRequest.Merge(m, src)
}
func (m *QueryShowAllChainsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowAllChainsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowAllChainsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowAllChainsRequest proto.InternalMessageInfo

type QueryShowAllChainsResponse struct {
	ChainInfoList []*ShowAllChainsInfoStruct `protobuf:"bytes,2,rep,name=chainInfoList,proto3" json:"chainInfoList,omitempty"`
}

func (m *QueryShowAllChainsResponse) Reset()         { *m = QueryShowAllChainsResponse{} }
func (m *QueryShowAllChainsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShowAllChainsResponse) ProtoMessage()    {}
func (*QueryShowAllChainsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c05acd229a1b0b20, []int{7}
}
func (m *QueryShowAllChainsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowAllChainsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowAllChainsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowAllChainsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowAllChainsResponse.Merge(m, src)
}
func (m *QueryShowAllChainsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowAllChainsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowAllChainsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowAllChainsResponse proto.InternalMessageInfo

func (m *QueryShowAllChainsResponse) GetChainInfoList() []*ShowAllChainsInfoStruct {
	if m != nil {
		return m.ChainInfoList
	}
	return nil
}

type ShowAllChainsInfoStruct struct {
	ChainName            string   `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"`
	ChainID              string   `protobuf:"bytes,2,opt,name=chainID,proto3" json:"chainID,omitempty"`
	EnabledApiInterfaces []string `protobuf:"bytes,3,rep,name=enabledApiInterfaces,proto3" json:"enabledApiInterfaces,omitempty"`
	ApiCount             uint64   `protobuf:"varint,4,opt,name=api_count,json=apiCount,proto3" json:"api_count,omitempty"`
}

func (m *ShowAllChainsInfoStruct) Reset()         { *m = ShowAllChainsInfoStruct{} }
func (m *ShowAllChainsInfoStruct) String() string { return proto.CompactTextString(m) }
func (*ShowAllChainsInfoStruct) ProtoMessage()    {}
func (*ShowAllChainsInfoStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_c05acd229a1b0b20, []int{8}
}
func (m *ShowAllChainsInfoStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShowAllChainsInfoStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShowAllChainsInfoStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShowAllChainsInfoStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowAllChainsInfoStruct.Merge(m, src)
}
func (m *ShowAllChainsInfoStruct) XXX_Size() int {
	return m.Size()
}
func (m *ShowAllChainsInfoStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowAllChainsInfoStruct.DiscardUnknown(m)
}

var xxx_messageInfo_ShowAllChainsInfoStruct proto.InternalMessageInfo

func (m *ShowAllChainsInfoStruct) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *ShowAllChainsInfoStruct) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *ShowAllChainsInfoStruct) GetEnabledApiInterfaces() []string {
	if m != nil {
		return m.EnabledApiInterfaces
	}
	return nil
}

func (m *ShowAllChainsInfoStruct) GetApiCount() uint64 {
	if m != nil {
		return m.ApiCount
	}
	return 0
}

type QueryShowChainInfoRequest struct {
	ChainName string `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"`
}

func (m *QueryShowChainInfoRequest) Reset()         { *m = QueryShowChainInfoRequest{} }
func (m *QueryShowChainInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryShowChainInfoRequest) ProtoMessage()    {}
func (*QueryShowChainInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c05acd229a1b0b20, []int{9}
}
func (m *QueryShowChainInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowChainInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowChainInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowChainInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowChainInfoRequest.Merge(m, src)
}
func (m *QueryShowChainInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowChainInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowChainInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowChainInfoRequest proto.InternalMessageInfo

func (m *QueryShowChainInfoRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

type ApiList struct {
	Interface     string   `protobuf:"bytes,4,opt,name=interface,proto3" json:"interface,omitempty"`
	SupportedApis []string `protobuf:"bytes,5,rep,name=supportedApis,proto3" json:"supportedApis,omitempty"`
	Addon         string   `protobuf:"bytes,6,opt,name=addon,proto3" json:"addon,omitempty"`
}

func (m *ApiList) Reset()         { *m = ApiList{} }
func (m *ApiList) String() string { return proto.CompactTextString(m) }
func (*ApiList) ProtoMessage()    {}
func (*ApiList) Descriptor() ([]byte, []int) {
	return fileDescriptor_c05acd229a1b0b20, []int{10}
}
func (m *ApiList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApiList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApiList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApiList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApiList.Merge(m, src)
}
func (m *ApiList) XXX_Size() int {
	return m.Size()
}
func (m *ApiList) XXX_DiscardUnknown() {
	xxx_messageInfo_ApiList.DiscardUnknown(m)
}

var xxx_messageInfo_ApiList proto.InternalMessageInfo

func (m *ApiList) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *ApiList) GetSupportedApis() []string {
	if m != nil {
		return m.SupportedApis
	}
	return nil
}

func (m *ApiList) GetAddon() string {
	if m != nil {
		return m.Addon
	}
	return ""
}

type QueryShowChainInfoResponse struct {
	ChainID                    string     `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	Interfaces                 []string   `protobuf:"bytes,2,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	SupportedApisInterfaceList []*ApiList `protobuf:"bytes,3,rep,name=supportedApisInterfaceList,proto3" json:"supportedApisInterfaceList,omitempty"`
	OptionalInterfaces         []string   `protobuf:"bytes,4,rep,name=optional_interfaces,json=optionalInterfaces,proto3" json:"optional_interfaces,omitempty"`
}

func (m *QueryShowChainInfoResponse) Reset()         { *m = QueryShowChainInfoResponse{} }
func (m *QueryShowChainInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShowChainInfoResponse) ProtoMessage()    {}
func (*QueryShowChainInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c05acd229a1b0b20, []int{11}
}
func (m *QueryShowChainInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowChainInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowChainInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowChainInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowChainInfoResponse.Merge(m, src)
}
func (m *QueryShowChainInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowChainInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowChainInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowChainInfoResponse proto.InternalMessageInfo

func (m *QueryShowChainInfoResponse) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *QueryShowChainInfoResponse) GetInterfaces() []string {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *QueryShowChainInfoResponse) GetSupportedApisInterfaceList() []*ApiList {
	if m != nil {
		return m.SupportedApisInterfaceList
	}
	return nil
}

func (m *QueryShowChainInfoResponse) GetOptionalInterfaces() []string {
	if m != nil {
		return m.OptionalInterfaces
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "lavanet.lava.spec.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "lavanet.lava.spec.QueryParamsResponse")
	proto.RegisterType((*QueryGetSpecRequest)(nil), "lavanet.lava.spec.QueryGetSpecRequest")
	proto.RegisterType((*QueryGetSpecResponse)(nil), "lavanet.lava.spec.QueryGetSpecResponse")
	proto.RegisterType((*QueryAllSpecRequest)(nil), "lavanet.lava.spec.QueryAllSpecRequest")
	proto.RegisterType((*QueryAllSpecResponse)(nil), "lavanet.lava.spec.QueryAllSpecResponse")
	proto.RegisterType((*QueryShowAllChainsRequest)(nil), "lavanet.lava.spec.QueryShowAllChainsRequest")
	proto.RegisterType((*QueryShowAllChainsResponse)(nil), "lavanet.lava.spec.QueryShowAllChainsResponse")
	proto.RegisterType((*ShowAllChainsInfoStruct)(nil), "lavanet.lava.spec.ShowAllChainsInfoStruct")
	proto.RegisterType((*QueryShowChainInfoRequest)(nil), "lavanet.lava.spec.QueryShowChainInfoRequest")
	proto.RegisterType((*ApiList)(nil), "lavanet.lava.spec.ApiList")
	proto.RegisterType((*QueryShowChainInfoResponse)(nil), "lavanet.lava.spec.QueryShowChainInfoResponse")
}

func init() { proto.RegisterFile("lava/spec/query.proto", fileDescriptor_c05acd229a1b0b20) }

var fileDescriptor_c05acd229a1b0b20 = []byte{
	// 857 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xcf, 0x4f, 0xdb, 0x48,
	0x14, 0xc7, 0xe3, 0x24, 0x24, 0x64, 0x56, 0x48, 0xbb, 0x43, 0x76, 0x49, 0x1c, 0x36, 0x80, 0xf9,
	0xb9, 0x68, 0xb1, 0x0b, 0x95, 0x5a, 0xf5, 0x52, 0x29, 0x50, 0x15, 0x51, 0x55, 0x88, 0x9a, 0x1b,
	0x52, 0x15, 0x4d, 0xcc, 0x90, 0x58, 0x72, 0x3c, 0x26, 0x9e, 0x90, 0x52, 0xc4, 0x85, 0x5b, 0x6f,
	0x55, 0x7b, 0xe9, 0xb9, 0xea, 0x1f, 0xc3, 0x11, 0xa9, 0x17, 0x4e, 0x55, 0x45, 0xfa, 0x87, 0x54,
	0xf3, 0x23, 0x89, 0x4d, 0xec, 0x80, 0xaa, 0x5e, 0x0c, 0x33, 0xf3, 0xde, 0xfb, 0x7e, 0xe6, 0x3b,
	0x8f, 0x27, 0xc0, 0xdf, 0x0e, 0x3a, 0x41, 0x86, 0xef, 0x61, 0xcb, 0x38, 0x6e, 0xe3, 0xd6, 0xa9,
	0xee, 0xb5, 0x08, 0x25, 0xf0, 0x2f, 0xb6, 0xed, 0x62, 0xaa, 0xb3, 0x9f, 0x3a, 0x3b, 0x56, 0xf3,
	0x75, 0x52, 0x27, 0xfc, 0xd4, 0x60, 0xbf, 0x89, 0x40, 0x75, 0xba, 0x4e, 0x48, 0xdd, 0xc1, 0x06,
	0xf2, 0x6c, 0x03, 0xb9, 0x2e, 0xa1, 0x88, 0xda, 0xc4, 0xf5, 0xe5, 0xe9, 0xaa, 0x45, 0xfc, 0x26,
	0xf1, 0x8d, 0x1a, 0xf2, 0xb1, 0xa8, 0x6f, 0x9c, 0xac, 0xd7, 0x30, 0x45, 0xeb, 0x86, 0x87, 0xea,
	0xb6, 0xcb, 0x83, 0x65, 0xec, 0x3f, 0x03, 0x12, 0x0f, 0xb5, 0x50, 0xb3, 0x57, 0x23, 0x3f, 0xd8,
	0x67, 0x1f, 0xb1, 0xab, 0xe5, 0x01, 0x7c, 0xc5, 0xea, 0xed, 0xf1, 0x50, 0x13, 0x1f, 0xb7, 0xb1,
	0x4f, 0xb5, 0x5d, 0x30, 0x19, 0xda, 0xf5, 0x3d, 0xe2, 0xfa, 0x18, 0x3e, 0x06, 0x19, 0x51, 0xb2,
	0xa0, 0xcc, 0x2a, 0x2b, 0x7f, 0x6c, 0x14, 0xf5, 0xa1, 0xeb, 0xe9, 0x22, 0x65, 0x33, 0x7d, 0xf9,
	0x6d, 0x26, 0x61, 0xca, 0x70, 0xcd, 0x90, 0xf5, 0xb6, 0x31, 0xdd, 0xf7, 0xb0, 0x25, 0x65, 0x60,
	0x01, 0x64, 0xb7, 0x1a, 0xc8, 0x76, 0x77, 0x9e, 0xf1, 0x82, 0x39, 0xb3, 0xb7, 0xd4, 0x76, 0x40,
	0x3e, 0x9c, 0x20, 0x09, 0xd6, 0x41, 0x9a, 0xad, 0xa5, 0xfe, 0x54, 0x84, 0x3e, 0x3b, 0x96, 0xea,
	0x3c, 0x54, 0x7b, 0x2d, 0xb5, 0x2b, 0x8e, 0x13, 0xd4, 0x7e, 0x0e, 0xc0, 0xc0, 0x3a, 0x59, 0x6f,
	0x49, 0x17, 0x3e, 0xeb, 0xcc, 0x67, 0x5d, 0xbc, 0xa3, 0xf4, 0x59, 0xdf, 0x43, 0x75, 0x2c, 0x73,
	0xcd, 0x40, 0xa6, 0xf6, 0x41, 0x91, 0xa8, 0xfd, 0xfa, 0x43, 0xa8, 0xa9, 0x7b, 0xa2, 0xc2, 0xed,
	0x10, 0x53, 0x92, 0x33, 0x2d, 0xdf, 0xc9, 0x24, 0xf4, 0x42, 0x50, 0x25, 0x50, 0xe4, 0x4c, 0xfb,
	0x0d, 0xd2, 0xa9, 0x38, 0x0e, 0x77, 0xb5, 0xff, 0xb8, 0x14, 0xa8, 0x51, 0x87, 0x12, 0x7b, 0x0f,
	0x4c, 0x58, 0xfc, 0x11, 0xdc, 0x23, 0xf2, 0xd2, 0xf6, 0x69, 0x21, 0xc9, 0xf9, 0x57, 0xa3, 0xf8,
	0x83, 0x05, 0x58, 0xfc, 0x3e, 0x6d, 0xb5, 0x2d, 0x6a, 0x86, 0x0b, 0xbc, 0x48, 0x8f, 0x2b, 0x7f,
	0x26, 0xb5, 0xcf, 0x0a, 0x98, 0x8a, 0x49, 0x80, 0xd3, 0x20, 0xc7, 0x53, 0x76, 0x51, 0x13, 0xcb,
	0x4e, 0x18, 0x6c, 0xb0, 0x2e, 0xb1, 0x64, 0x97, 0x24, 0x45, 0x97, 0xc8, 0x25, 0xdc, 0x00, 0x79,
	0xec, 0xa2, 0x9a, 0x83, 0x0f, 0x2b, 0x9e, 0xbd, 0xe3, 0x52, 0xdc, 0x3a, 0x42, 0x16, 0xf6, 0x0b,
	0xa9, 0xd9, 0xd4, 0x4a, 0xce, 0x8c, 0x3c, 0x83, 0x25, 0x90, 0x43, 0x9e, 0x5d, 0xb5, 0x48, 0xdb,
	0xa5, 0x85, 0xf4, 0xac, 0xb2, 0x92, 0x36, 0xc7, 0x91, 0x67, 0x6f, 0xb1, 0xb5, 0xf6, 0x24, 0xe0,
	0xdb, 0x56, 0xef, 0x12, 0xbd, 0x8e, 0x19, 0x49, 0xa9, 0x59, 0x20, 0x5b, 0xf1, 0x6c, 0x76, 0x61,
	0x16, 0x68, 0xf7, 0x04, 0xb9, 0x44, 0xce, 0x1c, 0x6c, 0xc0, 0x05, 0x30, 0xe1, 0xb7, 0x3d, 0x8f,
	0xb4, 0x28, 0x47, 0xf3, 0x0b, 0x63, 0x9c, 0x36, 0xbc, 0x09, 0xf3, 0x60, 0x0c, 0x1d, 0x1e, 0x12,
	0xb7, 0x90, 0xe1, 0xf9, 0x62, 0xa1, 0x75, 0x95, 0xc0, 0xdb, 0x05, 0x00, 0xe5, 0xdb, 0x05, 0x9c,
	0x52, 0xc2, 0x4e, 0x95, 0x01, 0xb0, 0x07, 0xfe, 0x24, 0xb9, 0x62, 0x60, 0x07, 0x1e, 0x00, 0x35,
	0xa4, 0xdf, 0x37, 0x8c, 0xb7, 0x40, 0x8a, 0xb7, 0x80, 0x1a, 0xd1, 0x02, 0xf2, 0xca, 0xe6, 0x88,
	0x6c, 0x68, 0x80, 0x49, 0xe2, 0xb1, 0xb6, 0x44, 0x4e, 0x35, 0x00, 0x91, 0xe6, 0x10, 0xb0, 0x77,
	0x34, 0x78, 0xa2, 0x8d, 0xeb, 0x2c, 0x18, 0xe3, 0xb7, 0x84, 0x6f, 0x41, 0x46, 0xcc, 0x13, 0xb8,
	0x18, 0x21, 0x3e, 0x3c, 0xb8, 0xd4, 0xa5, 0xbb, 0xc2, 0x84, 0x53, 0xda, 0xdc, 0xc5, 0xd7, 0x1f,
	0x1f, 0x93, 0x25, 0x58, 0x34, 0x64, 0xbc, 0x71, 0x7b, 0x6a, 0xc2, 0x0b, 0x45, 0xfc, 0x01, 0xc3,
	0xd8, 0x9a, 0xe1, 0x69, 0xa6, 0x2e, 0xdf, 0x19, 0x27, 0xc5, 0xff, 0xe3, 0xe2, 0xf3, 0x70, 0x2e,
	0x42, 0x9c, 0x7f, 0xce, 0xe4, 0x18, 0x3c, 0x87, 0x67, 0x20, 0xcb, 0x52, 0x2b, 0x8e, 0x13, 0x8f,
	0x11, 0x1e, 0x6c, 0xf1, 0x18, 0xb7, 0x06, 0x94, 0x36, 0xc3, 0x31, 0x8a, 0x70, 0x2a, 0x06, 0x03,
	0xbe, 0x53, 0x84, 0xba, 0x89, 0x3a, 0xbf, 0xdf, 0x84, 0x35, 0xae, 0xbe, 0x0c, 0x17, 0x63, 0xd4,
	0xab, 0x2d, 0xd4, 0x09, 0x18, 0x71, 0xa1, 0x00, 0x20, 0x9d, 0x18, 0x89, 0xf3, 0xab, 0x66, 0xcc,
	0x73, 0x9c, 0x7f, 0x61, 0x69, 0x04, 0x0e, 0xfc, 0xa4, 0x80, 0x89, 0xd0, 0x0c, 0x83, 0xff, 0xc7,
	0xd5, 0x8f, 0x9a, 0xbc, 0xea, 0xda, 0x3d, 0xa3, 0x25, 0xd3, 0x2a, 0x67, 0x5a, 0x80, 0x5a, 0x14,
	0x53, 0x83, 0x74, 0xaa, 0xc8, 0x71, 0xaa, 0x96, 0x00, 0xf9, 0x22, 0xd1, 0xfa, 0x43, 0x61, 0x34,
	0xda, 0xed, 0xe1, 0x36, 0x1a, 0x6d, 0x68, 0xd2, 0x68, 0x8f, 0x38, 0xda, 0x03, 0xa8, 0xc7, 0xa1,
	0x71, 0xac, 0xaa, 0xed, 0x1e, 0x11, 0xe3, 0xac, 0x3f, 0x24, 0xcf, 0x37, 0x9f, 0x5e, 0xde, 0x94,
	0x95, 0xab, 0x9b, 0xb2, 0xf2, 0xfd, 0xa6, 0xac, 0xbc, 0xef, 0x96, 0x13, 0x57, 0xdd, 0x72, 0xe2,
	0xba, 0x5b, 0x4e, 0x1c, 0x2c, 0xd4, 0x6d, 0xda, 0x68, 0xd7, 0x74, 0x8b, 0x34, 0xc3, 0x35, 0xdf,
	0x88, 0xaa, 0xf4, 0xd4, 0xc3, 0x7e, 0x2d, 0xc3, 0xff, 0x6b, 0x79, 0xf8, 0x33, 0x00, 0x00, 0xff,
	0xff, 0xe5, 0xc6, 0xe3, 0xe8, 0x6f, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Spec by id.
	Spec(ctx context.Context, in *QueryGetSpecRequest, opts ...grpc.CallOption) (*QueryGetSpecResponse, error)
	// Queries a list of Spec items.
	SpecAll(ctx context.Context, in *QueryAllSpecRequest, opts ...grpc.CallOption) (*QueryAllSpecResponse, error)
	// Queries a Spec by id (raw form).
	SpecRaw(ctx context.Context, in *QueryGetSpecRequest, opts ...grpc.CallOption) (*QueryGetSpecResponse, error)
	// Queries a list of Spec items (raw form).
	SpecAllRaw(ctx context.Context, in *QueryAllSpecRequest, opts ...grpc.CallOption) (*QueryAllSpecResponse, error)
	// Queries a list of ShowAllChains items.
	ShowAllChains(ctx context.Context, in *QueryShowAllChainsRequest, opts ...grpc.CallOption) (*QueryShowAllChainsResponse, error)
	// Queries a list of ShowChainInfo items.
	ShowChainInfo(ctx context.Context, in *QueryShowChainInfoRequest, opts ...grpc.CallOption) (*QueryShowChainInfoResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.spec.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Spec(ctx context.Context, in *QueryGetSpecRequest, opts ...grpc.CallOption) (*QueryGetSpecResponse, error) {
	out := new(QueryGetSpecResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.spec.Query/Spec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpecAll(ctx context.Context, in *QueryAllSpecRequest, opts ...grpc.CallOption) (*QueryAllSpecResponse, error) {
	out := new(QueryAllSpecResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.spec.Query/SpecAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpecRaw(ctx context.Context, in *QueryGetSpecRequest, opts ...grpc.CallOption) (*QueryGetSpecResponse, error) {
	out := new(QueryGetSpecResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.spec.Query/SpecRaw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpecAllRaw(ctx context.Context, in *QueryAllSpecRequest, opts ...grpc.CallOption) (*QueryAllSpecResponse, error) {
	out := new(QueryAllSpecResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.spec.Query/SpecAllRaw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowAllChains(ctx context.Context, in *QueryShowAllChainsRequest, opts ...grpc.CallOption) (*QueryShowAllChainsResponse, error) {
	out := new(QueryShowAllChainsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.spec.Query/ShowAllChains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowChainInfo(ctx context.Context, in *QueryShowChainInfoRequest, opts ...grpc.CallOption) (*QueryShowChainInfoResponse, error) {
	out := new(QueryShowChainInfoResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.spec.Query/ShowChainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Spec by id.
	Spec(context.Context, *QueryGetSpecRequest) (*QueryGetSpecResponse, error)
	// Queries a list of Spec items.
	SpecAll(context.Context, *QueryAllSpecRequest) (*QueryAllSpecResponse, error)
	// Queries a Spec by id (raw form).
	SpecRaw(context.Context, *QueryGetSpecRequest) (*QueryGetSpecResponse, error)
	// Queries a list of Spec items (raw form).
	SpecAllRaw(context.Context, *QueryAllSpecRequest) (*QueryAllSpecResponse, error)
	// Queries a list of ShowAllChains items.
	ShowAllChains(context.Context, *QueryShowAllChainsRequest) (*QueryShowAllChainsResponse, error)
	// Queries a list of ShowChainInfo items.
	ShowChainInfo(context.Context, *QueryShowChainInfoRequest) (*QueryShowChainInfoResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Spec(ctx context.Context, req *QueryGetSpecRequest) (*QueryGetSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Spec not implemented")
}
func (*UnimplementedQueryServer) SpecAll(ctx context.Context, req *QueryAllSpecRequest) (*QueryAllSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpecAll not implemented")
}
func (*UnimplementedQueryServer) SpecRaw(ctx context.Context, req *QueryGetSpecRequest) (*QueryGetSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpecRaw not implemented")
}
func (*UnimplementedQueryServer) SpecAllRaw(ctx context.Context, req *QueryAllSpecRequest) (*QueryAllSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpecAllRaw not implemented")
}
func (*UnimplementedQueryServer) ShowAllChains(ctx context.Context, req *QueryShowAllChainsRequest) (*QueryShowAllChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowAllChains not implemented")
}
func (*UnimplementedQueryServer) ShowChainInfo(ctx context.Context, req *QueryShowChainInfoRequest) (*QueryShowChainInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowChainInfo not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.spec.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Spec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Spec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.spec.Query/Spec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Spec(ctx, req.(*QueryGetSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpecAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpecAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.spec.Query/SpecAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpecAll(ctx, req.(*QueryAllSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpecRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpecRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.spec.Query/SpecRaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpecRaw(ctx, req.(*QueryGetSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpecAllRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpecAllRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.spec.Query/SpecAllRaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpecAllRaw(ctx, req.(*QueryAllSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowAllChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowAllChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowAllChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.spec.Query/ShowAllChains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowAllChains(ctx, req.(*QueryShowAllChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowChainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowChainInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowChainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.spec.Query/ShowChainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowChainInfo(ctx, req.(*QueryShowChainInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lavanet.lava.spec.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Spec",
			Handler:    _Query_Spec_Handler,
		},
		{
			MethodName: "SpecAll",
			Handler:    _Query_SpecAll_Handler,
		},
		{
			MethodName: "SpecRaw",
			Handler:    _Query_SpecRaw_Handler,
		},
		{
			MethodName: "SpecAllRaw",
			Handler:    _Query_SpecAllRaw_Handler,
		},
		{
			MethodName: "ShowAllChains",
			Handler:    _Query_ShowAllChains_Handler,
		},
		{
			MethodName: "ShowChainInfo",
			Handler:    _Query_ShowChainInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lava/spec/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetSpecRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSpecRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSpecRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSpecResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSpecResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSpecResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSpecRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSpecRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSpecRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSpecResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSpecResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSpecResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Spec) > 0 {
		for iNdEx := len(m.Spec) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Spec[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryShowAllChainsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowAllChainsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowAllChainsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryShowAllChainsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowAllChainsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowAllChainsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainInfoList) > 0 {
		for iNdEx := len(m.ChainInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *ShowAllChainsInfoStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShowAllChainsInfoStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShowAllChainsInfoStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApiCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ApiCount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.EnabledApiInterfaces) > 0 {
		for iNdEx := len(m.EnabledApiInterfaces) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EnabledApiInterfaces[iNdEx])
			copy(dAtA[i:], m.EnabledApiInterfaces[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.EnabledApiInterfaces[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryShowChainInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowChainInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowChainInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApiList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApiList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApiList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addon) > 0 {
		i -= len(m.Addon)
		copy(dAtA[i:], m.Addon)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Addon)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SupportedApis) > 0 {
		for iNdEx := len(m.SupportedApis) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SupportedApis[iNdEx])
			copy(dAtA[i:], m.SupportedApis[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.SupportedApis[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Interface) > 0 {
		i -= len(m.Interface)
		copy(dAtA[i:], m.Interface)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Interface)))
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}

func (m *QueryShowChainInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowChainInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowChainInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OptionalInterfaces) > 0 {
		for iNdEx := len(m.OptionalInterfaces) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OptionalInterfaces[iNdEx])
			copy(dAtA[i:], m.OptionalInterfaces[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.OptionalInterfaces[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SupportedApisInterfaceList) > 0 {
		for iNdEx := len(m.SupportedApisInterfaceList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SupportedApisInterfaceList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Interfaces) > 0 {
		for iNdEx := len(m.Interfaces) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Interfaces[iNdEx])
			copy(dAtA[i:], m.Interfaces[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Interfaces[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetSpecRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSpecResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Spec.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSpecRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSpecResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Spec) > 0 {
		for _, e := range m.Spec {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryShowAllChainsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryShowAllChainsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChainInfoList) > 0 {
		for _, e := range m.ChainInfoList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ShowAllChainsInfoStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.EnabledApiInterfaces) > 0 {
		for _, s := range m.EnabledApiInterfaces {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.ApiCount != 0 {
		n += 1 + sovQuery(uint64(m.ApiCount))
	}
	return n
}

func (m *QueryShowChainInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ApiList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Interface)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.SupportedApis) > 0 {
		for _, s := range m.SupportedApis {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.Addon)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryShowChainInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Interfaces) > 0 {
		for _, s := range m.Interfaces {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.SupportedApisInterfaceList) > 0 {
		for _, e := range m.SupportedApisInterfaceList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.OptionalInterfaces) > 0 {
		for _, s := range m.OptionalInterfaces {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSpecRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSpecRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSpecRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSpecResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSpecResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSpecResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSpecRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSpecRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSpecRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSpecResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSpecResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSpecResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spec = append(m.Spec, Spec{})
			if err := m.Spec[len(m.Spec)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowAllChainsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowAllChainsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowAllChainsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowAllChainsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowAllChainsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowAllChainsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainInfoList = append(m.ChainInfoList, &ShowAllChainsInfoStruct{})
			if err := m.ChainInfoList[len(m.ChainInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShowAllChainsInfoStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShowAllChainsInfoStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShowAllChainsInfoStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledApiInterfaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnabledApiInterfaces = append(m.EnabledApiInterfaces, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiCount", wireType)
			}
			m.ApiCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowChainInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowChainInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowChainInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApiList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedApis", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportedApis = append(m.SupportedApis, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowChainInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowChainInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowChainInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedApisInterfaceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportedApisInterfaceList = append(m.SupportedApisInterfaceList, &ApiList{})
			if err := m.SupportedApisInterfaceList[len(m.SupportedApisInterfaceList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionalInterfaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OptionalInterfaces = append(m.OptionalInterfaces, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
