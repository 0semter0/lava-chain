// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pairing/stake_range_to_cu_list.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StakeRangeToCUList struct {
	List []*StakeRangeToCU `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
}

func (m *StakeRangeToCUList) Reset()         { *m = StakeRangeToCUList{} }
func (m *StakeRangeToCUList) String() string { return proto.CompactTextString(m) }
func (*StakeRangeToCUList) ProtoMessage()    {}
func (*StakeRangeToCUList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1f1adee1d8f4e67, []int{0}
}
func (m *StakeRangeToCUList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakeRangeToCUList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakeRangeToCUList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakeRangeToCUList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakeRangeToCUList.Merge(m, src)
}
func (m *StakeRangeToCUList) XXX_Size() int {
	return m.Size()
}
func (m *StakeRangeToCUList) XXX_DiscardUnknown() {
	xxx_messageInfo_StakeRangeToCUList.DiscardUnknown(m)
}

var xxx_messageInfo_StakeRangeToCUList proto.InternalMessageInfo

func (m *StakeRangeToCUList) GetList() []*StakeRangeToCU {
	if m != nil {
		return m.List
	}
	return nil
}

type StakeRangeToCU struct {
	LowerStake   uint64 `protobuf:"varint,1,opt,name=LowerStake,proto3" json:"LowerStake,omitempty"`
	UpperStake   uint64 `protobuf:"varint,2,opt,name=UpperStake,proto3" json:"UpperStake,omitempty"`
	ComputeUnits uint64 `protobuf:"varint,3,opt,name=ComputeUnits,proto3" json:"ComputeUnits,omitempty"`
}

func (m *StakeRangeToCU) Reset()         { *m = StakeRangeToCU{} }
func (m *StakeRangeToCU) String() string { return proto.CompactTextString(m) }
func (*StakeRangeToCU) ProtoMessage()    {}
func (*StakeRangeToCU) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1f1adee1d8f4e67, []int{1}
}
func (m *StakeRangeToCU) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakeRangeToCU) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakeRangeToCU.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakeRangeToCU) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakeRangeToCU.Merge(m, src)
}
func (m *StakeRangeToCU) XXX_Size() int {
	return m.Size()
}
func (m *StakeRangeToCU) XXX_DiscardUnknown() {
	xxx_messageInfo_StakeRangeToCU.DiscardUnknown(m)
}

var xxx_messageInfo_StakeRangeToCU proto.InternalMessageInfo

func (m *StakeRangeToCU) GetLowerStake() uint64 {
	if m != nil {
		return m.LowerStake
	}
	return 0
}

func (m *StakeRangeToCU) GetUpperStake() uint64 {
	if m != nil {
		return m.UpperStake
	}
	return 0
}

func (m *StakeRangeToCU) GetComputeUnits() uint64 {
	if m != nil {
		return m.ComputeUnits
	}
	return 0
}

func init() {
	proto.RegisterType((*StakeRangeToCUList)(nil), "lavanet.lava.pairing.StakeRangeToCUList")
	proto.RegisterType((*StakeRangeToCU)(nil), "lavanet.lava.pairing.StakeRangeToCU")
}

func init() {
	proto.RegisterFile("pairing/stake_range_to_cu_list.proto", fileDescriptor_f1f1adee1d8f4e67)
}

var fileDescriptor_f1f1adee1d8f4e67 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x29, 0x48, 0xcc, 0x2c,
	0xca, 0xcc, 0x4b, 0xd7, 0x2f, 0x2e, 0x49, 0xcc, 0x4e, 0x8d, 0x2f, 0x4a, 0xcc, 0x4b, 0x4f, 0x8d,
	0x2f, 0xc9, 0x8f, 0x4f, 0x2e, 0x8d, 0xcf, 0xc9, 0x2c, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x12, 0xc9, 0x49, 0x2c, 0x4b, 0xcc, 0x4b, 0x2d, 0xd1, 0x03, 0xd1, 0x7a, 0x50, 0x2d, 0x4a,
	0x7e, 0x5c, 0x42, 0xc1, 0x20, 0x5d, 0x41, 0x20, 0x4d, 0x21, 0xf9, 0xce, 0xa1, 0x3e, 0x99, 0xc5,
	0x25, 0x42, 0x16, 0x5c, 0x2c, 0x20, 0x5a, 0x82, 0x51, 0x81, 0x59, 0x83, 0xdb, 0x48, 0x45, 0x0f,
	0x9b, 0x56, 0x3d, 0x54, 0x7d, 0x41, 0x60, 0x1d, 0x4a, 0x25, 0x5c, 0x7c, 0xa8, 0xe2, 0x42, 0x72,
	0x5c, 0x5c, 0x3e, 0xf9, 0xe5, 0xa9, 0x45, 0x60, 0x61, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x96, 0x20,
	0x24, 0x11, 0x90, 0x7c, 0x68, 0x41, 0x01, 0x4c, 0x9e, 0x09, 0x22, 0x8f, 0x10, 0x11, 0x52, 0xe2,
	0xe2, 0x71, 0xce, 0xcf, 0x2d, 0x28, 0x2d, 0x49, 0x0d, 0xcd, 0xcb, 0x2c, 0x29, 0x96, 0x60, 0x06,
	0xab, 0x40, 0x11, 0x73, 0x72, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f,
	0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28,
	0xf5, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0x7d, 0xa8, 0x2f, 0xc0, 0xb4,
	0x7e, 0x85, 0x3e, 0x2c, 0xd4, 0x4a, 0x2a, 0x0b, 0x52, 0x8b, 0x93, 0xd8, 0xc0, 0xa1, 0x64, 0x0c,
	0x08, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x9e, 0x83, 0xf8, 0x4d, 0x01, 0x00, 0x00,
}

func (m *StakeRangeToCUList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakeRangeToCUList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakeRangeToCUList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStakeRangeToCuList(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StakeRangeToCU) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakeRangeToCU) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakeRangeToCU) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ComputeUnits != 0 {
		i = encodeVarintStakeRangeToCuList(dAtA, i, uint64(m.ComputeUnits))
		i--
		dAtA[i] = 0x18
	}
	if m.UpperStake != 0 {
		i = encodeVarintStakeRangeToCuList(dAtA, i, uint64(m.UpperStake))
		i--
		dAtA[i] = 0x10
	}
	if m.LowerStake != 0 {
		i = encodeVarintStakeRangeToCuList(dAtA, i, uint64(m.LowerStake))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStakeRangeToCuList(dAtA []byte, offset int, v uint64) int {
	offset -= sovStakeRangeToCuList(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StakeRangeToCUList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovStakeRangeToCuList(uint64(l))
		}
	}
	return n
}

func (m *StakeRangeToCU) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LowerStake != 0 {
		n += 1 + sovStakeRangeToCuList(uint64(m.LowerStake))
	}
	if m.UpperStake != 0 {
		n += 1 + sovStakeRangeToCuList(uint64(m.UpperStake))
	}
	if m.ComputeUnits != 0 {
		n += 1 + sovStakeRangeToCuList(uint64(m.ComputeUnits))
	}
	return n
}

func sovStakeRangeToCuList(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStakeRangeToCuList(x uint64) (n int) {
	return sovStakeRangeToCuList(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StakeRangeToCUList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakeRangeToCuList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakeRangeToCUList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakeRangeToCUList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakeRangeToCuList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStakeRangeToCuList
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStakeRangeToCuList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &StakeRangeToCU{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStakeRangeToCuList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakeRangeToCuList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakeRangeToCU) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakeRangeToCuList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakeRangeToCU: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakeRangeToCU: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerStake", wireType)
			}
			m.LowerStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakeRangeToCuList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerStake |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperStake", wireType)
			}
			m.UpperStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakeRangeToCuList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperStake |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputeUnits", wireType)
			}
			m.ComputeUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakeRangeToCuList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ComputeUnits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStakeRangeToCuList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakeRangeToCuList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStakeRangeToCuList(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStakeRangeToCuList
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakeRangeToCuList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakeRangeToCuList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStakeRangeToCuList
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStakeRangeToCuList
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStakeRangeToCuList
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStakeRangeToCuList        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStakeRangeToCuList          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStakeRangeToCuList = fmt.Errorf("proto: unexpected end of group")
)
