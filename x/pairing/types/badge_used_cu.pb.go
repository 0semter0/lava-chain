// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pairing/badge_used_cu.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BadgeUsedCu struct {
	BadgeUsedCuMapKey []byte `protobuf:"bytes,1,opt,name=badgeUsedCuMapKey,proto3" json:"badgeUsedCuMapKey,omitempty"`
	UsedCu            uint64 `protobuf:"varint,2,opt,name=usedCu,proto3" json:"usedCu,omitempty"`
}

func (m *BadgeUsedCu) Reset()         { *m = BadgeUsedCu{} }
func (m *BadgeUsedCu) String() string { return proto.CompactTextString(m) }
func (*BadgeUsedCu) ProtoMessage()    {}
func (*BadgeUsedCu) Descriptor() ([]byte, []int) {
	return fileDescriptor_a95275a94dcba513, []int{0}
}
func (m *BadgeUsedCu) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BadgeUsedCu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BadgeUsedCu.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BadgeUsedCu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BadgeUsedCu.Merge(m, src)
}
func (m *BadgeUsedCu) XXX_Size() int {
	return m.Size()
}
func (m *BadgeUsedCu) XXX_DiscardUnknown() {
	xxx_messageInfo_BadgeUsedCu.DiscardUnknown(m)
}

var xxx_messageInfo_BadgeUsedCu proto.InternalMessageInfo

func (m *BadgeUsedCu) GetBadgeUsedCuMapKey() []byte {
	if m != nil {
		return m.BadgeUsedCuMapKey
	}
	return nil
}

func (m *BadgeUsedCu) GetUsedCu() uint64 {
	if m != nil {
		return m.UsedCu
	}
	return 0
}

func init() {
	proto.RegisterType((*BadgeUsedCu)(nil), "lavanet.lava.pairing.BadgeUsedCu")
}

func init() { proto.RegisterFile("pairing/badge_used_cu.proto", fileDescriptor_a95275a94dcba513) }

var fileDescriptor_a95275a94dcba513 = []byte{
	// 178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0x48, 0xcc, 0x2c,
	0xca, 0xcc, 0x4b, 0xd7, 0x4f, 0x4a, 0x4c, 0x49, 0x4f, 0x8d, 0x2f, 0x2d, 0x4e, 0x4d, 0x89, 0x4f,
	0x2e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xc9, 0x49, 0x2c, 0x4b, 0xcc, 0x4b, 0x2d,
	0xd1, 0x03, 0xd1, 0x7a, 0x50, 0x95, 0x4a, 0xc1, 0x5c, 0xdc, 0x4e, 0x20, 0xc5, 0xa1, 0xc5, 0xa9,
	0x29, 0xce, 0xa5, 0x42, 0x3a, 0x5c, 0x82, 0x49, 0x08, 0xae, 0x6f, 0x62, 0x81, 0x77, 0x6a, 0xa5,
	0x04, 0xa3, 0x02, 0xa3, 0x06, 0x4f, 0x10, 0xa6, 0x84, 0x90, 0x18, 0x17, 0x5b, 0x29, 0x98, 0x2f,
	0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x12, 0x04, 0xe5, 0x39, 0x39, 0x9e, 0x78, 0x24, 0xc7, 0x78, 0xe1,
	0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70,
	0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x7a, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae,
	0x3e, 0xd4, 0x3d, 0x60, 0x5a, 0xbf, 0x42, 0x1f, 0xe6, 0xf6, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24,
	0x36, 0xb0, 0xa3, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x83, 0x51, 0x7b, 0x4b, 0xd3, 0x00,
	0x00, 0x00,
}

func (m *BadgeUsedCu) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BadgeUsedCu) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BadgeUsedCu) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UsedCu != 0 {
		i = encodeVarintBadgeUsedCu(dAtA, i, uint64(m.UsedCu))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BadgeUsedCuMapKey) > 0 {
		i -= len(m.BadgeUsedCuMapKey)
		copy(dAtA[i:], m.BadgeUsedCuMapKey)
		i = encodeVarintBadgeUsedCu(dAtA, i, uint64(len(m.BadgeUsedCuMapKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBadgeUsedCu(dAtA []byte, offset int, v uint64) int {
	offset -= sovBadgeUsedCu(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BadgeUsedCu) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BadgeUsedCuMapKey)
	if l > 0 {
		n += 1 + l + sovBadgeUsedCu(uint64(l))
	}
	if m.UsedCu != 0 {
		n += 1 + sovBadgeUsedCu(uint64(m.UsedCu))
	}
	return n
}

func sovBadgeUsedCu(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBadgeUsedCu(x uint64) (n int) {
	return sovBadgeUsedCu(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BadgeUsedCu) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBadgeUsedCu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BadgeUsedCu: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BadgeUsedCu: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BadgeUsedCuMapKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadgeUsedCu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBadgeUsedCu
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBadgeUsedCu
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BadgeUsedCuMapKey = append(m.BadgeUsedCuMapKey[:0], dAtA[iNdEx:postIndex]...)
			if m.BadgeUsedCuMapKey == nil {
				m.BadgeUsedCuMapKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedCu", wireType)
			}
			m.UsedCu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBadgeUsedCu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedCu |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBadgeUsedCu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBadgeUsedCu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBadgeUsedCu(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBadgeUsedCu
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBadgeUsedCu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBadgeUsedCu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBadgeUsedCu
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBadgeUsedCu
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBadgeUsedCu
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBadgeUsedCu        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBadgeUsedCu          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBadgeUsedCu = fmt.Errorf("proto: unexpected end of group")
)
