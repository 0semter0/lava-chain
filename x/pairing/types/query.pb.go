// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pairing/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/lavanet/lava/x/epochstorage/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd8a3cd41a2a1ee, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd8a3cd41a2a1ee, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryProvidersRequest struct {
	ChainID string `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
}

func (m *QueryProvidersRequest) Reset()         { *m = QueryProvidersRequest{} }
func (m *QueryProvidersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProvidersRequest) ProtoMessage()    {}
func (*QueryProvidersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd8a3cd41a2a1ee, []int{2}
}
func (m *QueryProvidersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProvidersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProvidersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProvidersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProvidersRequest.Merge(m, src)
}
func (m *QueryProvidersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProvidersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProvidersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProvidersRequest proto.InternalMessageInfo

func (m *QueryProvidersRequest) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

type QueryProvidersResponse struct {
}

func (m *QueryProvidersResponse) Reset()         { *m = QueryProvidersResponse{} }
func (m *QueryProvidersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProvidersResponse) ProtoMessage()    {}
func (*QueryProvidersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd8a3cd41a2a1ee, []int{3}
}
func (m *QueryProvidersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProvidersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProvidersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProvidersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProvidersResponse.Merge(m, src)
}
func (m *QueryProvidersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProvidersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProvidersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProvidersResponse proto.InternalMessageInfo

type QueryClientsRequest struct {
	ChainID string `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
}

func (m *QueryClientsRequest) Reset()         { *m = QueryClientsRequest{} }
func (m *QueryClientsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClientsRequest) ProtoMessage()    {}
func (*QueryClientsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd8a3cd41a2a1ee, []int{4}
}
func (m *QueryClientsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClientsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClientsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClientsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClientsRequest.Merge(m, src)
}
func (m *QueryClientsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClientsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClientsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClientsRequest proto.InternalMessageInfo

func (m *QueryClientsRequest) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

type QueryClientsResponse struct {
}

func (m *QueryClientsResponse) Reset()         { *m = QueryClientsResponse{} }
func (m *QueryClientsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClientsResponse) ProtoMessage()    {}
func (*QueryClientsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd8a3cd41a2a1ee, []int{5}
}
func (m *QueryClientsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClientsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClientsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClientsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClientsResponse.Merge(m, src)
}
func (m *QueryClientsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClientsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClientsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClientsResponse proto.InternalMessageInfo

type QueryGetPairingRequest struct {
	ChainID string `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	Client  string `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty"`
}

func (m *QueryGetPairingRequest) Reset()         { *m = QueryGetPairingRequest{} }
func (m *QueryGetPairingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPairingRequest) ProtoMessage()    {}
func (*QueryGetPairingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd8a3cd41a2a1ee, []int{6}
}
func (m *QueryGetPairingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPairingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPairingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPairingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPairingRequest.Merge(m, src)
}
func (m *QueryGetPairingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPairingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPairingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPairingRequest proto.InternalMessageInfo

func (m *QueryGetPairingRequest) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *QueryGetPairingRequest) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

type QueryGetPairingResponse struct {
	Providers []*types.StakeEntry `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
}

func (m *QueryGetPairingResponse) Reset()         { *m = QueryGetPairingResponse{} }
func (m *QueryGetPairingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPairingResponse) ProtoMessage()    {}
func (*QueryGetPairingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd8a3cd41a2a1ee, []int{7}
}
func (m *QueryGetPairingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPairingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPairingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPairingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPairingResponse.Merge(m, src)
}
func (m *QueryGetPairingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPairingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPairingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPairingResponse proto.InternalMessageInfo

func (m *QueryGetPairingResponse) GetProviders() []*types.StakeEntry {
	if m != nil {
		return m.Providers
	}
	return nil
}

type QueryVerifyPairingRequest struct {
	ChainID  string `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	Client   string `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty"`
	Provider string `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	Block    uint64 `protobuf:"varint,4,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *QueryVerifyPairingRequest) Reset()         { *m = QueryVerifyPairingRequest{} }
func (m *QueryVerifyPairingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyPairingRequest) ProtoMessage()    {}
func (*QueryVerifyPairingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd8a3cd41a2a1ee, []int{8}
}
func (m *QueryVerifyPairingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyPairingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyPairingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyPairingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyPairingRequest.Merge(m, src)
}
func (m *QueryVerifyPairingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyPairingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyPairingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyPairingRequest proto.InternalMessageInfo

func (m *QueryVerifyPairingRequest) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *QueryVerifyPairingRequest) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

func (m *QueryVerifyPairingRequest) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *QueryVerifyPairingRequest) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

type QueryVerifyPairingResponse struct {
	Valid   bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Overlap bool `protobuf:"varint,2,opt,name=overlap,proto3" json:"overlap,omitempty"`
}

func (m *QueryVerifyPairingResponse) Reset()         { *m = QueryVerifyPairingResponse{} }
func (m *QueryVerifyPairingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyPairingResponse) ProtoMessage()    {}
func (*QueryVerifyPairingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd8a3cd41a2a1ee, []int{9}
}
func (m *QueryVerifyPairingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyPairingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyPairingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyPairingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyPairingResponse.Merge(m, src)
}
func (m *QueryVerifyPairingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyPairingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyPairingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyPairingResponse proto.InternalMessageInfo

func (m *QueryVerifyPairingResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *QueryVerifyPairingResponse) GetOverlap() bool {
	if m != nil {
		return m.Overlap
	}
	return false
}

type QueryGetUniquePaymentStorageClientProviderRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetUniquePaymentStorageClientProviderRequest) Reset() {
	*m = QueryGetUniquePaymentStorageClientProviderRequest{}
}
func (m *QueryGetUniquePaymentStorageClientProviderRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetUniquePaymentStorageClientProviderRequest) ProtoMessage() {}
func (*QueryGetUniquePaymentStorageClientProviderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd8a3cd41a2a1ee, []int{10}
}
func (m *QueryGetUniquePaymentStorageClientProviderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUniquePaymentStorageClientProviderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUniquePaymentStorageClientProviderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUniquePaymentStorageClientProviderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUniquePaymentStorageClientProviderRequest.Merge(m, src)
}
func (m *QueryGetUniquePaymentStorageClientProviderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUniquePaymentStorageClientProviderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUniquePaymentStorageClientProviderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUniquePaymentStorageClientProviderRequest proto.InternalMessageInfo

func (m *QueryGetUniquePaymentStorageClientProviderRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetUniquePaymentStorageClientProviderResponse struct {
	UniquePaymentStorageClientProvider UniquePaymentStorageClientProvider `protobuf:"bytes,1,opt,name=uniquePaymentStorageClientProvider,proto3" json:"uniquePaymentStorageClientProvider"`
}

func (m *QueryGetUniquePaymentStorageClientProviderResponse) Reset() {
	*m = QueryGetUniquePaymentStorageClientProviderResponse{}
}
func (m *QueryGetUniquePaymentStorageClientProviderResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetUniquePaymentStorageClientProviderResponse) ProtoMessage() {}
func (*QueryGetUniquePaymentStorageClientProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd8a3cd41a2a1ee, []int{11}
}
func (m *QueryGetUniquePaymentStorageClientProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUniquePaymentStorageClientProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUniquePaymentStorageClientProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUniquePaymentStorageClientProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUniquePaymentStorageClientProviderResponse.Merge(m, src)
}
func (m *QueryGetUniquePaymentStorageClientProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUniquePaymentStorageClientProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUniquePaymentStorageClientProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUniquePaymentStorageClientProviderResponse proto.InternalMessageInfo

func (m *QueryGetUniquePaymentStorageClientProviderResponse) GetUniquePaymentStorageClientProvider() UniquePaymentStorageClientProvider {
	if m != nil {
		return m.UniquePaymentStorageClientProvider
	}
	return UniquePaymentStorageClientProvider{}
}

type QueryAllUniquePaymentStorageClientProviderRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUniquePaymentStorageClientProviderRequest) Reset() {
	*m = QueryAllUniquePaymentStorageClientProviderRequest{}
}
func (m *QueryAllUniquePaymentStorageClientProviderRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllUniquePaymentStorageClientProviderRequest) ProtoMessage() {}
func (*QueryAllUniquePaymentStorageClientProviderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd8a3cd41a2a1ee, []int{12}
}
func (m *QueryAllUniquePaymentStorageClientProviderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUniquePaymentStorageClientProviderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUniquePaymentStorageClientProviderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUniquePaymentStorageClientProviderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUniquePaymentStorageClientProviderRequest.Merge(m, src)
}
func (m *QueryAllUniquePaymentStorageClientProviderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUniquePaymentStorageClientProviderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUniquePaymentStorageClientProviderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUniquePaymentStorageClientProviderRequest proto.InternalMessageInfo

func (m *QueryAllUniquePaymentStorageClientProviderRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllUniquePaymentStorageClientProviderResponse struct {
	UniquePaymentStorageClientProvider []UniquePaymentStorageClientProvider `protobuf:"bytes,1,rep,name=uniquePaymentStorageClientProvider,proto3" json:"uniquePaymentStorageClientProvider"`
	Pagination                         *query.PageResponse                  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUniquePaymentStorageClientProviderResponse) Reset() {
	*m = QueryAllUniquePaymentStorageClientProviderResponse{}
}
func (m *QueryAllUniquePaymentStorageClientProviderResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllUniquePaymentStorageClientProviderResponse) ProtoMessage() {}
func (*QueryAllUniquePaymentStorageClientProviderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd8a3cd41a2a1ee, []int{13}
}
func (m *QueryAllUniquePaymentStorageClientProviderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUniquePaymentStorageClientProviderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUniquePaymentStorageClientProviderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUniquePaymentStorageClientProviderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUniquePaymentStorageClientProviderResponse.Merge(m, src)
}
func (m *QueryAllUniquePaymentStorageClientProviderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUniquePaymentStorageClientProviderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUniquePaymentStorageClientProviderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUniquePaymentStorageClientProviderResponse proto.InternalMessageInfo

func (m *QueryAllUniquePaymentStorageClientProviderResponse) GetUniquePaymentStorageClientProvider() []UniquePaymentStorageClientProvider {
	if m != nil {
		return m.UniquePaymentStorageClientProvider
	}
	return nil
}

func (m *QueryAllUniquePaymentStorageClientProviderResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetClientPaymentStorageRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetClientPaymentStorageRequest) Reset()         { *m = QueryGetClientPaymentStorageRequest{} }
func (m *QueryGetClientPaymentStorageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetClientPaymentStorageRequest) ProtoMessage()    {}
func (*QueryGetClientPaymentStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd8a3cd41a2a1ee, []int{14}
}
func (m *QueryGetClientPaymentStorageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetClientPaymentStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetClientPaymentStorageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetClientPaymentStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetClientPaymentStorageRequest.Merge(m, src)
}
func (m *QueryGetClientPaymentStorageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetClientPaymentStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetClientPaymentStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetClientPaymentStorageRequest proto.InternalMessageInfo

func (m *QueryGetClientPaymentStorageRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetClientPaymentStorageResponse struct {
	ClientPaymentStorage ClientPaymentStorage `protobuf:"bytes,1,opt,name=clientPaymentStorage,proto3" json:"clientPaymentStorage"`
}

func (m *QueryGetClientPaymentStorageResponse) Reset()         { *m = QueryGetClientPaymentStorageResponse{} }
func (m *QueryGetClientPaymentStorageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetClientPaymentStorageResponse) ProtoMessage()    {}
func (*QueryGetClientPaymentStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd8a3cd41a2a1ee, []int{15}
}
func (m *QueryGetClientPaymentStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetClientPaymentStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetClientPaymentStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetClientPaymentStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetClientPaymentStorageResponse.Merge(m, src)
}
func (m *QueryGetClientPaymentStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetClientPaymentStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetClientPaymentStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetClientPaymentStorageResponse proto.InternalMessageInfo

func (m *QueryGetClientPaymentStorageResponse) GetClientPaymentStorage() ClientPaymentStorage {
	if m != nil {
		return m.ClientPaymentStorage
	}
	return ClientPaymentStorage{}
}

type QueryAllClientPaymentStorageRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllClientPaymentStorageRequest) Reset()         { *m = QueryAllClientPaymentStorageRequest{} }
func (m *QueryAllClientPaymentStorageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllClientPaymentStorageRequest) ProtoMessage()    {}
func (*QueryAllClientPaymentStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd8a3cd41a2a1ee, []int{16}
}
func (m *QueryAllClientPaymentStorageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllClientPaymentStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllClientPaymentStorageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllClientPaymentStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllClientPaymentStorageRequest.Merge(m, src)
}
func (m *QueryAllClientPaymentStorageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllClientPaymentStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllClientPaymentStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllClientPaymentStorageRequest proto.InternalMessageInfo

func (m *QueryAllClientPaymentStorageRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllClientPaymentStorageResponse struct {
	ClientPaymentStorage []ClientPaymentStorage `protobuf:"bytes,1,rep,name=clientPaymentStorage,proto3" json:"clientPaymentStorage"`
	Pagination           *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllClientPaymentStorageResponse) Reset()         { *m = QueryAllClientPaymentStorageResponse{} }
func (m *QueryAllClientPaymentStorageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllClientPaymentStorageResponse) ProtoMessage()    {}
func (*QueryAllClientPaymentStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd8a3cd41a2a1ee, []int{17}
}
func (m *QueryAllClientPaymentStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllClientPaymentStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllClientPaymentStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllClientPaymentStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllClientPaymentStorageResponse.Merge(m, src)
}
func (m *QueryAllClientPaymentStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllClientPaymentStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllClientPaymentStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllClientPaymentStorageResponse proto.InternalMessageInfo

func (m *QueryAllClientPaymentStorageResponse) GetClientPaymentStorage() []ClientPaymentStorage {
	if m != nil {
		return m.ClientPaymentStorage
	}
	return nil
}

func (m *QueryAllClientPaymentStorageResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetEpochPaymentsRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetEpochPaymentsRequest) Reset()         { *m = QueryGetEpochPaymentsRequest{} }
func (m *QueryGetEpochPaymentsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochPaymentsRequest) ProtoMessage()    {}
func (*QueryGetEpochPaymentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd8a3cd41a2a1ee, []int{18}
}
func (m *QueryGetEpochPaymentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochPaymentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochPaymentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochPaymentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochPaymentsRequest.Merge(m, src)
}
func (m *QueryGetEpochPaymentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochPaymentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochPaymentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochPaymentsRequest proto.InternalMessageInfo

func (m *QueryGetEpochPaymentsRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetEpochPaymentsResponse struct {
	EpochPayments EpochPayments `protobuf:"bytes,1,opt,name=epochPayments,proto3" json:"epochPayments"`
}

func (m *QueryGetEpochPaymentsResponse) Reset()         { *m = QueryGetEpochPaymentsResponse{} }
func (m *QueryGetEpochPaymentsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochPaymentsResponse) ProtoMessage()    {}
func (*QueryGetEpochPaymentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd8a3cd41a2a1ee, []int{19}
}
func (m *QueryGetEpochPaymentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochPaymentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochPaymentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochPaymentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochPaymentsResponse.Merge(m, src)
}
func (m *QueryGetEpochPaymentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochPaymentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochPaymentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochPaymentsResponse proto.InternalMessageInfo

func (m *QueryGetEpochPaymentsResponse) GetEpochPayments() EpochPayments {
	if m != nil {
		return m.EpochPayments
	}
	return EpochPayments{}
}

type QueryAllEpochPaymentsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEpochPaymentsRequest) Reset()         { *m = QueryAllEpochPaymentsRequest{} }
func (m *QueryAllEpochPaymentsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllEpochPaymentsRequest) ProtoMessage()    {}
func (*QueryAllEpochPaymentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd8a3cd41a2a1ee, []int{20}
}
func (m *QueryAllEpochPaymentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEpochPaymentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEpochPaymentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEpochPaymentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEpochPaymentsRequest.Merge(m, src)
}
func (m *QueryAllEpochPaymentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEpochPaymentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEpochPaymentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEpochPaymentsRequest proto.InternalMessageInfo

func (m *QueryAllEpochPaymentsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllEpochPaymentsResponse struct {
	EpochPayments []EpochPayments     `protobuf:"bytes,1,rep,name=epochPayments,proto3" json:"epochPayments"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllEpochPaymentsResponse) Reset()         { *m = QueryAllEpochPaymentsResponse{} }
func (m *QueryAllEpochPaymentsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllEpochPaymentsResponse) ProtoMessage()    {}
func (*QueryAllEpochPaymentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bd8a3cd41a2a1ee, []int{21}
}
func (m *QueryAllEpochPaymentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEpochPaymentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEpochPaymentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEpochPaymentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEpochPaymentsResponse.Merge(m, src)
}
func (m *QueryAllEpochPaymentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEpochPaymentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEpochPaymentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEpochPaymentsResponse proto.InternalMessageInfo

func (m *QueryAllEpochPaymentsResponse) GetEpochPayments() []EpochPayments {
	if m != nil {
		return m.EpochPayments
	}
	return nil
}

func (m *QueryAllEpochPaymentsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "lavanet.lava.pairing.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "lavanet.lava.pairing.QueryParamsResponse")
	proto.RegisterType((*QueryProvidersRequest)(nil), "lavanet.lava.pairing.QueryProvidersRequest")
	proto.RegisterType((*QueryProvidersResponse)(nil), "lavanet.lava.pairing.QueryProvidersResponse")
	proto.RegisterType((*QueryClientsRequest)(nil), "lavanet.lava.pairing.QueryClientsRequest")
	proto.RegisterType((*QueryClientsResponse)(nil), "lavanet.lava.pairing.QueryClientsResponse")
	proto.RegisterType((*QueryGetPairingRequest)(nil), "lavanet.lava.pairing.QueryGetPairingRequest")
	proto.RegisterType((*QueryGetPairingResponse)(nil), "lavanet.lava.pairing.QueryGetPairingResponse")
	proto.RegisterType((*QueryVerifyPairingRequest)(nil), "lavanet.lava.pairing.QueryVerifyPairingRequest")
	proto.RegisterType((*QueryVerifyPairingResponse)(nil), "lavanet.lava.pairing.QueryVerifyPairingResponse")
	proto.RegisterType((*QueryGetUniquePaymentStorageClientProviderRequest)(nil), "lavanet.lava.pairing.QueryGetUniquePaymentStorageClientProviderRequest")
	proto.RegisterType((*QueryGetUniquePaymentStorageClientProviderResponse)(nil), "lavanet.lava.pairing.QueryGetUniquePaymentStorageClientProviderResponse")
	proto.RegisterType((*QueryAllUniquePaymentStorageClientProviderRequest)(nil), "lavanet.lava.pairing.QueryAllUniquePaymentStorageClientProviderRequest")
	proto.RegisterType((*QueryAllUniquePaymentStorageClientProviderResponse)(nil), "lavanet.lava.pairing.QueryAllUniquePaymentStorageClientProviderResponse")
	proto.RegisterType((*QueryGetClientPaymentStorageRequest)(nil), "lavanet.lava.pairing.QueryGetClientPaymentStorageRequest")
	proto.RegisterType((*QueryGetClientPaymentStorageResponse)(nil), "lavanet.lava.pairing.QueryGetClientPaymentStorageResponse")
	proto.RegisterType((*QueryAllClientPaymentStorageRequest)(nil), "lavanet.lava.pairing.QueryAllClientPaymentStorageRequest")
	proto.RegisterType((*QueryAllClientPaymentStorageResponse)(nil), "lavanet.lava.pairing.QueryAllClientPaymentStorageResponse")
	proto.RegisterType((*QueryGetEpochPaymentsRequest)(nil), "lavanet.lava.pairing.QueryGetEpochPaymentsRequest")
	proto.RegisterType((*QueryGetEpochPaymentsResponse)(nil), "lavanet.lava.pairing.QueryGetEpochPaymentsResponse")
	proto.RegisterType((*QueryAllEpochPaymentsRequest)(nil), "lavanet.lava.pairing.QueryAllEpochPaymentsRequest")
	proto.RegisterType((*QueryAllEpochPaymentsResponse)(nil), "lavanet.lava.pairing.QueryAllEpochPaymentsResponse")
}

func init() { proto.RegisterFile("pairing/query.proto", fileDescriptor_6bd8a3cd41a2a1ee) }

var fileDescriptor_6bd8a3cd41a2a1ee = []byte{
	// 1131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x5d, 0x6f, 0xdb, 0x54,
	0x18, 0xae, 0x93, 0xb6, 0x6b, 0xdf, 0xa9, 0xd2, 0x74, 0x66, 0xba, 0x60, 0x85, 0x30, 0x79, 0xdd,
	0xfa, 0xb1, 0x62, 0x93, 0xac, 0x42, 0x6c, 0x4c, 0x48, 0xd9, 0xba, 0x8d, 0x4d, 0x95, 0xe8, 0x32,
	0x8d, 0x0b, 0x2e, 0xa8, 0x9c, 0xf4, 0xcc, 0xb5, 0xe6, 0xd8, 0x6e, 0xec, 0x44, 0xab, 0xa2, 0x08,
	0x04, 0xe2, 0x0e, 0x4d, 0x20, 0xae, 0xf8, 0x05, 0x88, 0x1b, 0xb8, 0xe6, 0x07, 0x30, 0x4d, 0xe2,
	0x66, 0x12, 0x42, 0xe2, 0x0a, 0xa1, 0x96, 0x1f, 0x82, 0x7c, 0xce, 0x7b, 0xd2, 0xba, 0x3d, 0x71,
	0x9c, 0x35, 0xe2, 0x2a, 0x39, 0x39, 0xef, 0xc7, 0xf3, 0x3c, 0xef, 0xc9, 0xf1, 0x93, 0xc0, 0xf9,
	0xc0, 0x72, 0x5a, 0x8e, 0x67, 0x9b, 0xbb, 0x6d, 0xda, 0xda, 0x33, 0x82, 0x96, 0x1f, 0xf9, 0x44,
	0x75, 0xad, 0x8e, 0xe5, 0xd1, 0xc8, 0x88, 0x5f, 0x0d, 0x8c, 0xd0, 0x54, 0xdb, 0xb7, 0x7d, 0x16,
	0x60, 0xc6, 0xef, 0x78, 0xac, 0x56, 0xb4, 0x7d, 0xdf, 0x76, 0xa9, 0x69, 0x05, 0x8e, 0x69, 0x79,
	0x9e, 0x1f, 0x59, 0x91, 0xe3, 0x7b, 0x21, 0xee, 0xae, 0x34, 0xfc, 0xb0, 0xe9, 0x87, 0x66, 0xdd,
	0x0a, 0x29, 0x6f, 0x61, 0x76, 0xca, 0x75, 0x1a, 0x59, 0x65, 0x33, 0xb0, 0x6c, 0xc7, 0x63, 0xc1,
	0x18, 0xab, 0x0a, 0x28, 0x81, 0xd5, 0xb2, 0x9a, 0xa2, 0x42, 0x51, 0x7c, 0x4a, 0x03, 0xbf, 0xb1,
	0xb3, 0x15, 0x58, 0x7b, 0x4d, 0xea, 0x45, 0x62, 0x77, 0x41, 0xec, 0x36, 0x5c, 0x87, 0x7a, 0x91,
	0xd8, 0xde, 0x0a, 0x23, 0xbf, 0x65, 0xd9, 0x14, 0xa3, 0xd6, 0x44, 0x54, 0xdb, 0x73, 0x76, 0xdb,
	0xf4, 0x78, 0xd4, 0x96, 0x48, 0x6e, 0xf9, 0x1d, 0x67, 0x9b, 0xb6, 0x30, 0xab, 0xc4, 0x3a, 0x62,
	0x8c, 0x19, 0x46, 0xd6, 0x53, 0xba, 0x45, 0xbd, 0x48, 0xa8, 0xa4, 0xab, 0x40, 0x1e, 0xc6, 0x8c,
	0x36, 0x19, 0xdc, 0x1a, 0xdd, 0x6d, 0xd3, 0x30, 0xd2, 0x1f, 0xc2, 0xf9, 0xc4, 0xa7, 0x61, 0xe0,
	0x7b, 0x21, 0x25, 0x37, 0x60, 0x9a, 0xd3, 0x2a, 0x28, 0x17, 0x95, 0xa5, 0xb3, 0x95, 0xa2, 0x21,
	0xd3, 0xd8, 0xe0, 0x59, 0xb7, 0x26, 0x5f, 0xfe, 0xfd, 0xf6, 0x44, 0x0d, 0x33, 0xf4, 0x32, 0xbc,
	0xc1, 0x4b, 0x22, 0x3e, 0xd1, 0x8b, 0x14, 0xe0, 0x4c, 0x63, 0xc7, 0x72, 0xbc, 0xfb, 0xeb, 0xac,
	0xea, 0x6c, 0x4d, 0x2c, 0xf5, 0x02, 0xcc, 0x1f, 0x4f, 0xe1, 0x40, 0x74, 0x13, 0xf1, 0xdd, 0x66,
	0x9c, 0x33, 0x94, 0x9a, 0x07, 0x35, 0x99, 0x80, 0x85, 0x1e, 0x60, 0x8b, 0x7b, 0x34, 0xda, 0xe4,
	0xe8, 0x87, 0xd6, 0x22, 0xf3, 0x30, 0xcd, 0xb5, 0x2e, 0xe4, 0xd8, 0x06, 0xae, 0xf4, 0xcf, 0xe0,
	0xc2, 0x89, 0x5a, 0x28, 0xdc, 0x6d, 0x98, 0x15, 0x73, 0x89, 0xb5, 0xcb, 0x2f, 0x9d, 0xad, 0x5c,
	0x4e, 0x6a, 0x77, 0x74, 0x4c, 0xc6, 0xa3, 0x78, 0x4c, 0x77, 0xe2, 0x29, 0xd5, 0x0e, 0xf3, 0xf4,
	0xcf, 0xe1, 0x4d, 0x56, 0xff, 0x13, 0xda, 0x72, 0x9e, 0xec, 0x9d, 0x16, 0x2e, 0xd1, 0x60, 0x46,
	0xd4, 0x2e, 0xe4, 0xd9, 0x4e, 0x7f, 0x4d, 0x54, 0x98, 0xaa, 0xbb, 0x7e, 0xe3, 0x69, 0x61, 0xf2,
	0xa2, 0xb2, 0x34, 0x59, 0xe3, 0x0b, 0x7d, 0x03, 0x34, 0x19, 0x00, 0xe4, 0xa8, 0xc2, 0x54, 0xc7,
	0x72, 0x9d, 0x6d, 0xd6, 0x7f, 0xa6, 0xc6, 0x17, 0x31, 0x2e, 0xbf, 0x43, 0x5b, 0xae, 0x15, 0xb0,
	0xf6, 0x33, 0x35, 0xb1, 0xd4, 0xef, 0x43, 0x59, 0xc8, 0xf5, 0x98, 0x9d, 0xe8, 0x4d, 0x7e, 0xa0,
	0x1f, 0x71, 0x11, 0xf8, 0xa4, 0xc4, 0xe8, 0x05, 0x4d, 0x15, 0xa6, 0x1c, 0x6f, 0x9b, 0x3e, 0x43,
	0x92, 0x7c, 0xa1, 0xff, 0xa6, 0x40, 0x65, 0x94, 0x5a, 0x88, 0xf8, 0xb9, 0x02, 0x7a, 0x7b, 0x68,
	0x38, 0x9e, 0xf5, 0xf7, 0xe5, 0x67, 0x7d, 0x78, 0x3b, 0xfc, 0x1e, 0x64, 0xe8, 0xa4, 0x77, 0x51,
	0x92, 0xaa, 0xeb, 0x66, 0x97, 0xe4, 0x2e, 0xc0, 0xe1, 0x2d, 0x84, 0x60, 0xaf, 0x18, 0xfc, 0xca,
	0x32, 0xe2, 0x2b, 0xcb, 0xe0, 0xb7, 0x22, 0x5e, 0x59, 0xc6, 0xa6, 0x65, 0x53, 0xcc, 0xad, 0x1d,
	0xc9, 0xd4, 0x9f, 0xe7, 0x50, 0xc4, 0x8c, 0xdd, 0x47, 0x15, 0x31, 0xff, 0xff, 0x88, 0x48, 0xee,
	0x25, 0xf4, 0xc8, 0x31, 0x3d, 0x16, 0x87, 0xea, 0xc1, 0xd9, 0x24, 0x04, 0xf9, 0x00, 0x2e, 0x89,
	0x43, 0x85, 0x2d, 0x12, 0x6d, 0xd3, 0x8f, 0xe4, 0x37, 0x0a, 0x2c, 0xa4, 0x67, 0xa3, 0x7e, 0xdb,
	0xa0, 0x36, 0x24, 0xfb, 0x38, 0xc8, 0x15, 0xb9, 0x60, 0xb2, 0x8a, 0x28, 0x91, 0xb4, 0x9a, 0xde,
	0x44, 0x2e, 0x55, 0xd7, 0x4d, 0xe3, 0x32, 0xae, 0xb3, 0xf4, 0xa7, 0x60, 0x3f, 0xb0, 0xdf, 0x50,
	0xf6, 0xf9, 0xf1, 0xb1, 0x1f, 0xdf, 0x91, 0x58, 0x83, 0xa2, 0x18, 0xea, 0x9d, 0xf8, 0xc2, 0xc6,
	0x3e, 0x61, 0xfa, 0x59, 0x08, 0xe0, 0xad, 0x01, 0x59, 0xa8, 0xc2, 0xc7, 0x30, 0x47, 0x8f, 0x6e,
	0xa0, 0xf2, 0x97, 0xe4, 0xf4, 0x13, 0x35, 0x90, 0x77, 0x32, 0x5f, 0x7f, 0x82, 0x38, 0xab, 0xae,
	0x2b, 0xc5, 0x39, 0xae, 0x39, 0xff, 0xaa, 0x20, 0xb5, 0x93, 0x8d, 0x06, 0x53, 0xcb, 0x9f, 0x86,
	0xda, 0xd8, 0x66, 0x59, 0xf9, 0xe5, 0x1c, 0x4c, 0x31, 0xec, 0xe4, 0x2b, 0x05, 0xa6, 0xb9, 0x67,
	0x21, 0x4b, 0x72, 0x5c, 0x27, 0x2d, 0x92, 0xb6, 0x9c, 0x21, 0x12, 0x4d, 0xc6, 0xc2, 0x97, 0x7f,
	0xfc, 0xfb, 0x7d, 0xae, 0x44, 0x8a, 0x26, 0xa6, 0xb0, 0x57, 0x33, 0xe9, 0x14, 0xc9, 0x0f, 0x0a,
	0xcc, 0xf6, 0x9d, 0x0e, 0xb9, 0x9a, 0x56, 0xfe, 0x98, 0x85, 0xd2, 0x56, 0xb3, 0x05, 0x23, 0x9c,
	0x32, 0x83, 0x73, 0x95, 0x2c, 0x0f, 0x80, 0x23, 0x12, 0xcc, 0x2e, 0x5a, 0x88, 0x1e, 0xf9, 0x4e,
	0x81, 0x33, 0x68, 0x9d, 0x48, 0x1a, 0xf1, 0xa4, 0x1f, 0xd3, 0x56, 0xb2, 0x84, 0x0a, 0x4b, 0xc7,
	0x50, 0x2d, 0x93, 0x45, 0x39, 0x2a, 0xfe, 0xbd, 0x3e, 0x8a, 0xe9, 0x47, 0x05, 0xe0, 0xd0, 0x6a,
	0x91, 0x34, 0x0d, 0x4e, 0xb8, 0x3b, 0xed, 0x9d, 0x8c, 0xd1, 0x08, 0xee, 0x26, 0x03, 0xf7, 0x1e,
	0x59, 0x93, 0x83, 0xb3, 0x69, 0x6c, 0xda, 0xf9, 0xfb, 0x3e, 0x40, 0xb3, 0xcb, 0x31, 0xf7, 0xc8,
	0x0b, 0x05, 0xe6, 0x12, 0x9e, 0x89, 0x98, 0x29, 0xed, 0x65, 0xf6, 0x4e, 0x7b, 0x37, 0x7b, 0x02,
	0x42, 0xae, 0x31, 0xc8, 0x1b, 0xe4, 0x81, 0x1c, 0x72, 0x87, 0x25, 0xa5, 0xa0, 0x36, 0xbb, 0xe2,
	0x20, 0xf4, 0xcc, 0x2e, 0xf3, 0x7f, 0x3d, 0xf2, 0x75, 0x0e, 0xf4, 0xc7, 0x19, 0x9e, 0xc0, 0xe9,
	0xe2, 0x66, 0xb6, 0x36, 0xda, 0x47, 0xa7, 0x2f, 0x84, 0x6a, 0x6c, 0x30, 0x35, 0xee, 0x92, 0x75,
	0xb9, 0x1a, 0xd9, 0x7e, 0x52, 0x99, 0x5d, 0x76, 0x9f, 0xf7, 0xc8, 0x17, 0x39, 0xb8, 0x3c, 0xbc,
	0x79, 0xd5, 0x75, 0x53, 0xa5, 0x18, 0xc5, 0xe5, 0xa5, 0x4a, 0x31, 0x92, 0x61, 0xd3, 0xd7, 0x99,
	0x14, 0x1f, 0x92, 0x9b, 0xa7, 0x91, 0x82, 0xfc, 0xae, 0x80, 0x2a, 0x7b, 0x0e, 0x93, 0xeb, 0xe9,
	0x33, 0x4b, 0x71, 0x1f, 0xda, 0x8d, 0xd7, 0x49, 0xcd, 0xf6, 0x0d, 0x95, 0xff, 0xb2, 0xee, 0x0f,
	0xf4, 0x85, 0x02, 0x17, 0x64, 0xe5, 0xe3, 0x11, 0x5e, 0x4f, 0x57, 0xfe, 0x75, 0x09, 0x0d, 0x71,
	0x46, 0xfa, 0x1a, 0x23, 0x64, 0x90, 0xd5, 0x51, 0x08, 0x91, 0x9f, 0x15, 0x98, 0x4b, 0x3c, 0x44,
	0x49, 0x25, 0x5d, 0x54, 0x99, 0x3d, 0xd0, 0xae, 0x8d, 0x94, 0x93, 0x0d, 0x70, 0xf2, 0x9f, 0x8f,
	0xbe, 0xf2, 0x3f, 0x29, 0x70, 0x2e, 0x51, 0x2f, 0x96, 0xbc, 0x92, 0xae, 0xdb, 0xc8, 0x98, 0x07,
	0xb9, 0x13, 0x7d, 0x95, 0x61, 0xbe, 0x42, 0x16, 0xb2, 0x60, 0xbe, 0x55, 0x7d, 0xb9, 0x5f, 0x52,
	0x5e, 0xed, 0x97, 0x94, 0x7f, 0xf6, 0x4b, 0xca, 0xb7, 0x07, 0xa5, 0x89, 0x57, 0x07, 0xa5, 0x89,
	0xbf, 0x0e, 0x4a, 0x13, 0x9f, 0x2e, 0xda, 0x4e, 0xb4, 0xd3, 0xae, 0x1b, 0x0d, 0xbf, 0x99, 0xac,
	0xf4, 0xac, 0x5f, 0x2b, 0xda, 0x0b, 0x68, 0x58, 0x9f, 0x66, 0xff, 0xba, 0x5c, 0xfb, 0x2f, 0x00,
	0x00, 0xff, 0xff, 0x22, 0xc4, 0x42, 0xd4, 0xb2, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Providers items.
	Providers(ctx context.Context, in *QueryProvidersRequest, opts ...grpc.CallOption) (*QueryProvidersResponse, error)
	// Queries a list of Clients items.
	Clients(ctx context.Context, in *QueryClientsRequest, opts ...grpc.CallOption) (*QueryClientsResponse, error)
	// Queries a list of GetPairing items.
	GetPairing(ctx context.Context, in *QueryGetPairingRequest, opts ...grpc.CallOption) (*QueryGetPairingResponse, error)
	// Queries a list of VerifyPairing items.
	VerifyPairing(ctx context.Context, in *QueryVerifyPairingRequest, opts ...grpc.CallOption) (*QueryVerifyPairingResponse, error)
	// Queries a UniquePaymentStorageClientProvider by index.
	UniquePaymentStorageClientProvider(ctx context.Context, in *QueryGetUniquePaymentStorageClientProviderRequest, opts ...grpc.CallOption) (*QueryGetUniquePaymentStorageClientProviderResponse, error)
	// Queries a list of UniquePaymentStorageClientProvider items.
	UniquePaymentStorageClientProviderAll(ctx context.Context, in *QueryAllUniquePaymentStorageClientProviderRequest, opts ...grpc.CallOption) (*QueryAllUniquePaymentStorageClientProviderResponse, error)
	// Queries a ClientPaymentStorage by index.
	ClientPaymentStorage(ctx context.Context, in *QueryGetClientPaymentStorageRequest, opts ...grpc.CallOption) (*QueryGetClientPaymentStorageResponse, error)
	// Queries a list of ClientPaymentStorage items.
	ClientPaymentStorageAll(ctx context.Context, in *QueryAllClientPaymentStorageRequest, opts ...grpc.CallOption) (*QueryAllClientPaymentStorageResponse, error)
	// Queries a EpochPayments by index.
	EpochPayments(ctx context.Context, in *QueryGetEpochPaymentsRequest, opts ...grpc.CallOption) (*QueryGetEpochPaymentsResponse, error)
	// Queries a list of EpochPayments items.
	EpochPaymentsAll(ctx context.Context, in *QueryAllEpochPaymentsRequest, opts ...grpc.CallOption) (*QueryAllEpochPaymentsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.pairing.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Providers(ctx context.Context, in *QueryProvidersRequest, opts ...grpc.CallOption) (*QueryProvidersResponse, error) {
	out := new(QueryProvidersResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.pairing.Query/Providers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Clients(ctx context.Context, in *QueryClientsRequest, opts ...grpc.CallOption) (*QueryClientsResponse, error) {
	out := new(QueryClientsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.pairing.Query/Clients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPairing(ctx context.Context, in *QueryGetPairingRequest, opts ...grpc.CallOption) (*QueryGetPairingResponse, error) {
	out := new(QueryGetPairingResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.pairing.Query/GetPairing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerifyPairing(ctx context.Context, in *QueryVerifyPairingRequest, opts ...grpc.CallOption) (*QueryVerifyPairingResponse, error) {
	out := new(QueryVerifyPairingResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.pairing.Query/VerifyPairing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UniquePaymentStorageClientProvider(ctx context.Context, in *QueryGetUniquePaymentStorageClientProviderRequest, opts ...grpc.CallOption) (*QueryGetUniquePaymentStorageClientProviderResponse, error) {
	out := new(QueryGetUniquePaymentStorageClientProviderResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.pairing.Query/UniquePaymentStorageClientProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UniquePaymentStorageClientProviderAll(ctx context.Context, in *QueryAllUniquePaymentStorageClientProviderRequest, opts ...grpc.CallOption) (*QueryAllUniquePaymentStorageClientProviderResponse, error) {
	out := new(QueryAllUniquePaymentStorageClientProviderResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.pairing.Query/UniquePaymentStorageClientProviderAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClientPaymentStorage(ctx context.Context, in *QueryGetClientPaymentStorageRequest, opts ...grpc.CallOption) (*QueryGetClientPaymentStorageResponse, error) {
	out := new(QueryGetClientPaymentStorageResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.pairing.Query/ClientPaymentStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClientPaymentStorageAll(ctx context.Context, in *QueryAllClientPaymentStorageRequest, opts ...grpc.CallOption) (*QueryAllClientPaymentStorageResponse, error) {
	out := new(QueryAllClientPaymentStorageResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.pairing.Query/ClientPaymentStorageAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochPayments(ctx context.Context, in *QueryGetEpochPaymentsRequest, opts ...grpc.CallOption) (*QueryGetEpochPaymentsResponse, error) {
	out := new(QueryGetEpochPaymentsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.pairing.Query/EpochPayments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochPaymentsAll(ctx context.Context, in *QueryAllEpochPaymentsRequest, opts ...grpc.CallOption) (*QueryAllEpochPaymentsResponse, error) {
	out := new(QueryAllEpochPaymentsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.pairing.Query/EpochPaymentsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Providers items.
	Providers(context.Context, *QueryProvidersRequest) (*QueryProvidersResponse, error)
	// Queries a list of Clients items.
	Clients(context.Context, *QueryClientsRequest) (*QueryClientsResponse, error)
	// Queries a list of GetPairing items.
	GetPairing(context.Context, *QueryGetPairingRequest) (*QueryGetPairingResponse, error)
	// Queries a list of VerifyPairing items.
	VerifyPairing(context.Context, *QueryVerifyPairingRequest) (*QueryVerifyPairingResponse, error)
	// Queries a UniquePaymentStorageClientProvider by index.
	UniquePaymentStorageClientProvider(context.Context, *QueryGetUniquePaymentStorageClientProviderRequest) (*QueryGetUniquePaymentStorageClientProviderResponse, error)
	// Queries a list of UniquePaymentStorageClientProvider items.
	UniquePaymentStorageClientProviderAll(context.Context, *QueryAllUniquePaymentStorageClientProviderRequest) (*QueryAllUniquePaymentStorageClientProviderResponse, error)
	// Queries a ClientPaymentStorage by index.
	ClientPaymentStorage(context.Context, *QueryGetClientPaymentStorageRequest) (*QueryGetClientPaymentStorageResponse, error)
	// Queries a list of ClientPaymentStorage items.
	ClientPaymentStorageAll(context.Context, *QueryAllClientPaymentStorageRequest) (*QueryAllClientPaymentStorageResponse, error)
	// Queries a EpochPayments by index.
	EpochPayments(context.Context, *QueryGetEpochPaymentsRequest) (*QueryGetEpochPaymentsResponse, error)
	// Queries a list of EpochPayments items.
	EpochPaymentsAll(context.Context, *QueryAllEpochPaymentsRequest) (*QueryAllEpochPaymentsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Providers(ctx context.Context, req *QueryProvidersRequest) (*QueryProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Providers not implemented")
}
func (*UnimplementedQueryServer) Clients(ctx context.Context, req *QueryClientsRequest) (*QueryClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clients not implemented")
}
func (*UnimplementedQueryServer) GetPairing(ctx context.Context, req *QueryGetPairingRequest) (*QueryGetPairingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPairing not implemented")
}
func (*UnimplementedQueryServer) VerifyPairing(ctx context.Context, req *QueryVerifyPairingRequest) (*QueryVerifyPairingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPairing not implemented")
}
func (*UnimplementedQueryServer) UniquePaymentStorageClientProvider(ctx context.Context, req *QueryGetUniquePaymentStorageClientProviderRequest) (*QueryGetUniquePaymentStorageClientProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UniquePaymentStorageClientProvider not implemented")
}
func (*UnimplementedQueryServer) UniquePaymentStorageClientProviderAll(ctx context.Context, req *QueryAllUniquePaymentStorageClientProviderRequest) (*QueryAllUniquePaymentStorageClientProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UniquePaymentStorageClientProviderAll not implemented")
}
func (*UnimplementedQueryServer) ClientPaymentStorage(ctx context.Context, req *QueryGetClientPaymentStorageRequest) (*QueryGetClientPaymentStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientPaymentStorage not implemented")
}
func (*UnimplementedQueryServer) ClientPaymentStorageAll(ctx context.Context, req *QueryAllClientPaymentStorageRequest) (*QueryAllClientPaymentStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientPaymentStorageAll not implemented")
}
func (*UnimplementedQueryServer) EpochPayments(ctx context.Context, req *QueryGetEpochPaymentsRequest) (*QueryGetEpochPaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochPayments not implemented")
}
func (*UnimplementedQueryServer) EpochPaymentsAll(ctx context.Context, req *QueryAllEpochPaymentsRequest) (*QueryAllEpochPaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochPaymentsAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.pairing.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Providers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Providers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.pairing.Query/Providers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Providers(ctx, req.(*QueryProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Clients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Clients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.pairing.Query/Clients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Clients(ctx, req.(*QueryClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPairing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPairingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPairing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.pairing.Query/GetPairing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPairing(ctx, req.(*QueryGetPairingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerifyPairing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerifyPairingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerifyPairing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.pairing.Query/VerifyPairing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerifyPairing(ctx, req.(*QueryVerifyPairingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UniquePaymentStorageClientProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUniquePaymentStorageClientProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UniquePaymentStorageClientProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.pairing.Query/UniquePaymentStorageClientProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UniquePaymentStorageClientProvider(ctx, req.(*QueryGetUniquePaymentStorageClientProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UniquePaymentStorageClientProviderAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUniquePaymentStorageClientProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UniquePaymentStorageClientProviderAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.pairing.Query/UniquePaymentStorageClientProviderAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UniquePaymentStorageClientProviderAll(ctx, req.(*QueryAllUniquePaymentStorageClientProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClientPaymentStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetClientPaymentStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClientPaymentStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.pairing.Query/ClientPaymentStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClientPaymentStorage(ctx, req.(*QueryGetClientPaymentStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClientPaymentStorageAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllClientPaymentStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClientPaymentStorageAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.pairing.Query/ClientPaymentStorageAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClientPaymentStorageAll(ctx, req.(*QueryAllClientPaymentStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEpochPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.pairing.Query/EpochPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochPayments(ctx, req.(*QueryGetEpochPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochPaymentsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllEpochPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochPaymentsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.pairing.Query/EpochPaymentsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochPaymentsAll(ctx, req.(*QueryAllEpochPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lavanet.lava.pairing.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Providers",
			Handler:    _Query_Providers_Handler,
		},
		{
			MethodName: "Clients",
			Handler:    _Query_Clients_Handler,
		},
		{
			MethodName: "GetPairing",
			Handler:    _Query_GetPairing_Handler,
		},
		{
			MethodName: "VerifyPairing",
			Handler:    _Query_VerifyPairing_Handler,
		},
		{
			MethodName: "UniquePaymentStorageClientProvider",
			Handler:    _Query_UniquePaymentStorageClientProvider_Handler,
		},
		{
			MethodName: "UniquePaymentStorageClientProviderAll",
			Handler:    _Query_UniquePaymentStorageClientProviderAll_Handler,
		},
		{
			MethodName: "ClientPaymentStorage",
			Handler:    _Query_ClientPaymentStorage_Handler,
		},
		{
			MethodName: "ClientPaymentStorageAll",
			Handler:    _Query_ClientPaymentStorageAll_Handler,
		},
		{
			MethodName: "EpochPayments",
			Handler:    _Query_EpochPayments_Handler,
		},
		{
			MethodName: "EpochPaymentsAll",
			Handler:    _Query_EpochPaymentsAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pairing/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryProvidersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProvidersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProvidersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProvidersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProvidersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProvidersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryClientsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClientsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClientsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClientsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClientsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClientsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetPairingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPairingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPairingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Client) > 0 {
		i -= len(m.Client)
		copy(dAtA[i:], m.Client)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Client)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPairingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPairingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPairingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Providers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyPairingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyPairingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyPairingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Client) > 0 {
		i -= len(m.Client)
		copy(dAtA[i:], m.Client)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Client)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyPairingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyPairingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyPairingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Overlap {
		i--
		if m.Overlap {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUniquePaymentStorageClientProviderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUniquePaymentStorageClientProviderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUniquePaymentStorageClientProviderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUniquePaymentStorageClientProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUniquePaymentStorageClientProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUniquePaymentStorageClientProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UniquePaymentStorageClientProvider.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllUniquePaymentStorageClientProviderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUniquePaymentStorageClientProviderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUniquePaymentStorageClientProviderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllUniquePaymentStorageClientProviderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUniquePaymentStorageClientProviderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUniquePaymentStorageClientProviderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UniquePaymentStorageClientProvider) > 0 {
		for iNdEx := len(m.UniquePaymentStorageClientProvider) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UniquePaymentStorageClientProvider[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetClientPaymentStorageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetClientPaymentStorageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetClientPaymentStorageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetClientPaymentStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetClientPaymentStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetClientPaymentStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ClientPaymentStorage.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllClientPaymentStorageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllClientPaymentStorageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllClientPaymentStorageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllClientPaymentStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllClientPaymentStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllClientPaymentStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientPaymentStorage) > 0 {
		for iNdEx := len(m.ClientPaymentStorage) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClientPaymentStorage[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochPaymentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochPaymentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochPaymentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochPaymentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochPaymentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochPaymentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EpochPayments.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllEpochPaymentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEpochPaymentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEpochPaymentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllEpochPaymentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEpochPaymentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEpochPaymentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.EpochPayments) > 0 {
		for iNdEx := len(m.EpochPayments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochPayments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryProvidersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProvidersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryClientsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClientsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetPairingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Client)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPairingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for _, e := range m.Providers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryVerifyPairingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Client)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Block != 0 {
		n += 1 + sovQuery(uint64(m.Block))
	}
	return n
}

func (m *QueryVerifyPairingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	if m.Overlap {
		n += 2
	}
	return n
}

func (m *QueryGetUniquePaymentStorageClientProviderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUniquePaymentStorageClientProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UniquePaymentStorageClientProvider.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllUniquePaymentStorageClientProviderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllUniquePaymentStorageClientProviderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UniquePaymentStorageClientProvider) > 0 {
		for _, e := range m.UniquePaymentStorageClientProvider {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetClientPaymentStorageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetClientPaymentStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ClientPaymentStorage.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllClientPaymentStorageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllClientPaymentStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClientPaymentStorage) > 0 {
		for _, e := range m.ClientPaymentStorage {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEpochPaymentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEpochPaymentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EpochPayments.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllEpochPaymentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllEpochPaymentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EpochPayments) > 0 {
		for _, e := range m.EpochPayments {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProvidersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProvidersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProvidersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProvidersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProvidersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProvidersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClientsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClientsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClientsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClientsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClientsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClientsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPairingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPairingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPairingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Client = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPairingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPairingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPairingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, &types.StakeEntry{})
			if err := m.Providers[len(m.Providers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyPairingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyPairingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyPairingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Client = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyPairingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyPairingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyPairingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overlap", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Overlap = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUniquePaymentStorageClientProviderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUniquePaymentStorageClientProviderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUniquePaymentStorageClientProviderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUniquePaymentStorageClientProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUniquePaymentStorageClientProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUniquePaymentStorageClientProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniquePaymentStorageClientProvider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UniquePaymentStorageClientProvider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUniquePaymentStorageClientProviderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUniquePaymentStorageClientProviderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUniquePaymentStorageClientProviderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUniquePaymentStorageClientProviderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUniquePaymentStorageClientProviderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUniquePaymentStorageClientProviderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniquePaymentStorageClientProvider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniquePaymentStorageClientProvider = append(m.UniquePaymentStorageClientProvider, UniquePaymentStorageClientProvider{})
			if err := m.UniquePaymentStorageClientProvider[len(m.UniquePaymentStorageClientProvider)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetClientPaymentStorageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetClientPaymentStorageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetClientPaymentStorageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetClientPaymentStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetClientPaymentStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetClientPaymentStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientPaymentStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClientPaymentStorage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllClientPaymentStorageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllClientPaymentStorageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllClientPaymentStorageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllClientPaymentStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllClientPaymentStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllClientPaymentStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientPaymentStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientPaymentStorage = append(m.ClientPaymentStorage, ClientPaymentStorage{})
			if err := m.ClientPaymentStorage[len(m.ClientPaymentStorage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochPaymentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochPaymentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochPaymentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochPaymentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochPaymentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochPaymentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochPayments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochPayments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEpochPaymentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEpochPaymentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEpochPaymentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEpochPaymentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEpochPaymentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEpochPaymentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochPayments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochPayments = append(m.EpochPayments, EpochPayments{})
			if err := m.EpochPayments[len(m.EpochPayments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
