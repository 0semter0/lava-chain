// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pairing/epoch_payments.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EpochPayments struct {
	Index                    string                             `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	ClientsPayments          []*ClientPaymentStorage            `protobuf:"bytes,2,rep,name=clientsPayments,proto3" json:"clientsPayments,omitempty"`
	NumberOfProviderPayments []*PaymentRequestsProvidersStorage `protobuf:"bytes,3,rep,name=number_of_provider_payments,json=numberOfProviderPayments,proto3" json:"number_of_provider_payments,omitempty"`
}

func (m *EpochPayments) Reset()         { *m = EpochPayments{} }
func (m *EpochPayments) String() string { return proto.CompactTextString(m) }
func (*EpochPayments) ProtoMessage()    {}
func (*EpochPayments) Descriptor() ([]byte, []int) {
	return fileDescriptor_747a4457843f82da, []int{0}
}
func (m *EpochPayments) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochPayments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochPayments.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochPayments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochPayments.Merge(m, src)
}
func (m *EpochPayments) XXX_Size() int {
	return m.Size()
}
func (m *EpochPayments) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochPayments.DiscardUnknown(m)
}

var xxx_messageInfo_EpochPayments proto.InternalMessageInfo

func (m *EpochPayments) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *EpochPayments) GetClientsPayments() []*ClientPaymentStorage {
	if m != nil {
		return m.ClientsPayments
	}
	return nil
}

func (m *EpochPayments) GetNumberOfProviderPayments() []*PaymentRequestsProvidersStorage {
	if m != nil {
		return m.NumberOfProviderPayments
	}
	return nil
}

type PaymentRequestsProvidersStorage struct {
	ProviderId                        string   `protobuf:"bytes,1,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	NumberOfPayments                  int64    `protobuf:"varint,2,opt,name=number_of_payments,json=numberOfPayments,proto3" json:"number_of_payments,omitempty"`
	ComplaintsForUnresponsiveProvider []string `protobuf:"bytes,3,rep,name=complaints_for_unresponsive_provider,json=complaintsForUnresponsiveProvider,proto3" json:"complaints_for_unresponsive_provider,omitempty"`
}

func (m *PaymentRequestsProvidersStorage) Reset()         { *m = PaymentRequestsProvidersStorage{} }
func (m *PaymentRequestsProvidersStorage) String() string { return proto.CompactTextString(m) }
func (*PaymentRequestsProvidersStorage) ProtoMessage()    {}
func (*PaymentRequestsProvidersStorage) Descriptor() ([]byte, []int) {
	return fileDescriptor_747a4457843f82da, []int{1}
}
func (m *PaymentRequestsProvidersStorage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentRequestsProvidersStorage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentRequestsProvidersStorage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentRequestsProvidersStorage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentRequestsProvidersStorage.Merge(m, src)
}
func (m *PaymentRequestsProvidersStorage) XXX_Size() int {
	return m.Size()
}
func (m *PaymentRequestsProvidersStorage) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentRequestsProvidersStorage.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentRequestsProvidersStorage proto.InternalMessageInfo

func (m *PaymentRequestsProvidersStorage) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

func (m *PaymentRequestsProvidersStorage) GetNumberOfPayments() int64 {
	if m != nil {
		return m.NumberOfPayments
	}
	return 0
}

func (m *PaymentRequestsProvidersStorage) GetComplaintsForUnresponsiveProvider() []string {
	if m != nil {
		return m.ComplaintsForUnresponsiveProvider
	}
	return nil
}

func init() {
	proto.RegisterType((*EpochPayments)(nil), "lavanet.lava.pairing.EpochPayments")
	proto.RegisterType((*PaymentRequestsProvidersStorage)(nil), "lavanet.lava.pairing.PaymentRequestsProvidersStorage")
}

func init() { proto.RegisterFile("pairing/epoch_payments.proto", fileDescriptor_747a4457843f82da) }

var fileDescriptor_747a4457843f82da = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x4a, 0xeb, 0x40,
	0x18, 0x85, 0x3b, 0xb7, 0xdc, 0x0b, 0x9d, 0x72, 0x51, 0x86, 0x2e, 0x82, 0x4a, 0x5a, 0x4b, 0xc1,
	0x22, 0x92, 0x80, 0xe2, 0x03, 0xa8, 0x28, 0xb8, 0x6a, 0x89, 0xba, 0x71, 0x13, 0xd2, 0xe4, 0x6f,
	0x3b, 0xd0, 0xcc, 0x8c, 0x33, 0x93, 0xd2, 0xbe, 0x85, 0xaf, 0xe4, 0xce, 0x65, 0x97, 0x2e, 0xa5,
	0x7d, 0x02, 0xdf, 0x40, 0x9a, 0xcc, 0xa4, 0x45, 0x0a, 0xae, 0x86, 0x64, 0xce, 0x39, 0xdf, 0x7f,
	0x7e, 0x06, 0x1f, 0x89, 0x88, 0x4a, 0xca, 0x46, 0x3e, 0x08, 0x1e, 0x8f, 0x43, 0x11, 0xcd, 0x53,
	0x60, 0x5a, 0x79, 0x42, 0x72, 0xcd, 0x49, 0x63, 0x12, 0x4d, 0x23, 0x06, 0xda, 0x5b, 0x9f, 0x9e,
	0x91, 0x1e, 0x74, 0xac, 0x27, 0x9e, 0x50, 0x60, 0xda, 0x9a, 0x42, 0xa5, 0xb9, 0x8c, 0x46, 0x50,
	0x78, 0xdb, 0x5f, 0x08, 0xff, 0xbf, 0x5d, 0x87, 0xf6, 0x4d, 0x26, 0x69, 0xe0, 0xbf, 0x94, 0x25,
	0x30, 0x73, 0x50, 0x0b, 0x75, 0x6b, 0x41, 0xf1, 0x41, 0x1e, 0xf1, 0x5e, 0x91, 0xa3, 0xac, 0xd0,
	0xf9, 0xd3, 0xaa, 0x76, 0xeb, 0xe7, 0xa7, 0xde, 0x2e, 0xba, 0x77, 0x93, 0x8b, 0x8d, 0xf6, 0xa1,
	0x40, 0x06, 0x3f, 0x23, 0x88, 0xc6, 0x87, 0x2c, 0x4b, 0x07, 0x20, 0x43, 0x3e, 0x0c, 0x85, 0xe4,
	0x53, 0x9a, 0x80, 0x2c, 0xeb, 0x39, 0xd5, 0x9c, 0x70, 0xb9, 0x9b, 0x60, 0x42, 0x02, 0x78, 0xc9,
	0x40, 0x69, 0xd5, 0x37, 0x6e, 0x65, 0x61, 0x4e, 0x91, 0xdc, 0x1b, 0xda, 0x1b, 0x4b, 0x6d, 0xbf,
	0x21, 0xdc, 0xfc, 0xc5, 0x4d, 0x9a, 0xb8, 0x5e, 0xce, 0x43, 0x13, 0xb3, 0x0b, 0x6c, 0x7f, 0xdd,
	0x27, 0xe4, 0x0c, 0x93, 0xad, 0xd1, 0x37, 0x3b, 0x41, 0xdd, 0x6a, 0xb0, 0x5f, 0xa2, 0x6d, 0xd1,
	0x1e, 0xee, 0xc4, 0x3c, 0x15, 0x93, 0x88, 0x32, 0xad, 0xc2, 0x21, 0x97, 0x61, 0xc6, 0x24, 0x28,
	0xc1, 0x99, 0xa2, 0x53, 0x28, 0xab, 0xe7, 0x8d, 0x6b, 0xc1, 0xf1, 0x46, 0x7b, 0xc7, 0xe5, 0xd3,
	0x96, 0xd2, 0xce, 0x79, 0x7d, 0xf5, 0xbe, 0x74, 0xd1, 0x62, 0xe9, 0xa2, 0xcf, 0xa5, 0x8b, 0x5e,
	0x57, 0x6e, 0x65, 0xb1, 0x72, 0x2b, 0x1f, 0x2b, 0xb7, 0xf2, 0x7c, 0x32, 0xa2, 0x7a, 0x9c, 0x0d,
	0xbc, 0x98, 0xa7, 0xbe, 0x59, 0x5c, 0x7e, 0xfa, 0x33, 0xdf, 0xbe, 0x08, 0x3d, 0x17, 0xa0, 0x06,
	0xff, 0xf2, 0x17, 0x70, 0xf1, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xa4, 0xb9, 0xa3, 0x88, 0x5d, 0x02,
	0x00, 0x00,
}

func (m *EpochPayments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochPayments) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochPayments) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NumberOfProviderPayments) > 0 {
		for iNdEx := len(m.NumberOfProviderPayments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NumberOfProviderPayments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEpochPayments(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ClientsPayments) > 0 {
		for iNdEx := len(m.ClientsPayments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClientsPayments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEpochPayments(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintEpochPayments(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PaymentRequestsProvidersStorage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentRequestsProvidersStorage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentRequestsProvidersStorage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ComplaintsForUnresponsiveProvider) > 0 {
		for iNdEx := len(m.ComplaintsForUnresponsiveProvider) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ComplaintsForUnresponsiveProvider[iNdEx])
			copy(dAtA[i:], m.ComplaintsForUnresponsiveProvider[iNdEx])
			i = encodeVarintEpochPayments(dAtA, i, uint64(len(m.ComplaintsForUnresponsiveProvider[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.NumberOfPayments != 0 {
		i = encodeVarintEpochPayments(dAtA, i, uint64(m.NumberOfPayments))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ProviderId) > 0 {
		i -= len(m.ProviderId)
		copy(dAtA[i:], m.ProviderId)
		i = encodeVarintEpochPayments(dAtA, i, uint64(len(m.ProviderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEpochPayments(dAtA []byte, offset int, v uint64) int {
	offset -= sovEpochPayments(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EpochPayments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovEpochPayments(uint64(l))
	}
	if len(m.ClientsPayments) > 0 {
		for _, e := range m.ClientsPayments {
			l = e.Size()
			n += 1 + l + sovEpochPayments(uint64(l))
		}
	}
	if len(m.NumberOfProviderPayments) > 0 {
		for _, e := range m.NumberOfProviderPayments {
			l = e.Size()
			n += 1 + l + sovEpochPayments(uint64(l))
		}
	}
	return n
}

func (m *PaymentRequestsProvidersStorage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProviderId)
	if l > 0 {
		n += 1 + l + sovEpochPayments(uint64(l))
	}
	if m.NumberOfPayments != 0 {
		n += 1 + sovEpochPayments(uint64(m.NumberOfPayments))
	}
	if len(m.ComplaintsForUnresponsiveProvider) > 0 {
		for _, s := range m.ComplaintsForUnresponsiveProvider {
			l = len(s)
			n += 1 + l + sovEpochPayments(uint64(l))
		}
	}
	return n
}

func sovEpochPayments(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEpochPayments(x uint64) (n int) {
	return sovEpochPayments(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EpochPayments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochPayments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochPayments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochPayments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochPayments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientsPayments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpochPayments
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpochPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientsPayments = append(m.ClientsPayments, &ClientPaymentStorage{})
			if err := m.ClientsPayments[len(m.ClientsPayments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfProviderPayments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpochPayments
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpochPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumberOfProviderPayments = append(m.NumberOfProviderPayments, &PaymentRequestsProvidersStorage{})
			if err := m.NumberOfProviderPayments[len(m.NumberOfProviderPayments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEpochPayments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochPayments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentRequestsProvidersStorage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochPayments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentRequestsProvidersStorage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentRequestsProvidersStorage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochPayments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfPayments", wireType)
			}
			m.NumberOfPayments = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfPayments |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComplaintsForUnresponsiveProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochPayments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComplaintsForUnresponsiveProvider = append(m.ComplaintsForUnresponsiveProvider, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEpochPayments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochPayments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEpochPayments(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEpochPayments
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochPayments
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochPayments
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEpochPayments
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEpochPayments
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEpochPayments
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEpochPayments        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEpochPayments          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEpochPayments = fmt.Errorf("proto: unexpected end of group")
)
