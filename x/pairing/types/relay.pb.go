// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pairing/relay.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RelaySession struct {
	SpecId                string                  `protobuf:"bytes,1,opt,name=spec_id,json=specId,proto3" json:"spec_id,omitempty"`
	ContentHash           []byte                  `protobuf:"bytes,2,opt,name=content_hash,json=contentHash,proto3" json:"content_hash,omitempty"`
	SessionId             uint64                  `protobuf:"varint,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	CuSum                 uint64                  `protobuf:"varint,4,opt,name=cu_sum,json=cuSum,proto3" json:"cu_sum,omitempty"`
	Provider              string                  `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	RelayNum              uint64                  `protobuf:"varint,6,opt,name=relay_num,json=relayNum,proto3" json:"relay_num,omitempty"`
	QosReport             *QualityOfServiceReport `protobuf:"bytes,7,opt,name=qos_report,json=qosReport,proto3" json:"qos_report,omitempty"`
	Epoch                 int64                   `protobuf:"varint,8,opt,name=epoch,proto3" json:"epoch,omitempty"`
	UnresponsiveProviders []byte                  `protobuf:"bytes,9,opt,name=unresponsive_providers,json=unresponsiveProviders,proto3" json:"unresponsive_providers,omitempty"`
	LavaChainId           string                  `protobuf:"bytes,10,opt,name=lava_chain_id,json=lavaChainId,proto3" json:"lava_chain_id,omitempty"`
	Sig                   []byte                  `protobuf:"bytes,11,opt,name=sig,proto3" json:"sig,omitempty"`
	Badge                 *Badge                  `protobuf:"bytes,12,opt,name=badge,proto3" json:"badge,omitempty"`
}

func (m *RelaySession) Reset()         { *m = RelaySession{} }
func (m *RelaySession) String() string { return proto.CompactTextString(m) }
func (*RelaySession) ProtoMessage()    {}
func (*RelaySession) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cd1bfeb9978acf, []int{0}
}
func (m *RelaySession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelaySession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelaySession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelaySession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelaySession.Merge(m, src)
}
func (m *RelaySession) XXX_Size() int {
	return m.Size()
}
func (m *RelaySession) XXX_DiscardUnknown() {
	xxx_messageInfo_RelaySession.DiscardUnknown(m)
}

var xxx_messageInfo_RelaySession proto.InternalMessageInfo

func (m *RelaySession) GetSpecId() string {
	if m != nil {
		return m.SpecId
	}
	return ""
}

func (m *RelaySession) GetContentHash() []byte {
	if m != nil {
		return m.ContentHash
	}
	return nil
}

func (m *RelaySession) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *RelaySession) GetCuSum() uint64 {
	if m != nil {
		return m.CuSum
	}
	return 0
}

func (m *RelaySession) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *RelaySession) GetRelayNum() uint64 {
	if m != nil {
		return m.RelayNum
	}
	return 0
}

func (m *RelaySession) GetQosReport() *QualityOfServiceReport {
	if m != nil {
		return m.QosReport
	}
	return nil
}

func (m *RelaySession) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *RelaySession) GetUnresponsiveProviders() []byte {
	if m != nil {
		return m.UnresponsiveProviders
	}
	return nil
}

func (m *RelaySession) GetLavaChainId() string {
	if m != nil {
		return m.LavaChainId
	}
	return ""
}

func (m *RelaySession) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *RelaySession) GetBadge() *Badge {
	if m != nil {
		return m.Badge
	}
	return nil
}

type RelayPrivateData struct {
	ConnectionType string     `protobuf:"bytes,1,opt,name=connection_type,json=connectionType,proto3" json:"connection_type,omitempty"`
	ApiUrl         string     `protobuf:"bytes,2,opt,name=api_url,json=apiUrl,proto3" json:"api_url,omitempty"`
	Data           []byte     `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	RequestBlock   int64      `protobuf:"varint,4,opt,name=request_block,json=requestBlock,proto3" json:"request_block,omitempty"`
	ApiInterface   string     `protobuf:"bytes,5,opt,name=api_interface,json=apiInterface,proto3" json:"api_interface,omitempty"`
	Salt           []byte     `protobuf:"bytes,6,opt,name=salt,proto3" json:"salt,omitempty"`
	Metadata       []Metadata `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata"`
}

func (m *RelayPrivateData) Reset()         { *m = RelayPrivateData{} }
func (m *RelayPrivateData) String() string { return proto.CompactTextString(m) }
func (*RelayPrivateData) ProtoMessage()    {}
func (*RelayPrivateData) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cd1bfeb9978acf, []int{1}
}
func (m *RelayPrivateData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayPrivateData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayPrivateData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayPrivateData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayPrivateData.Merge(m, src)
}
func (m *RelayPrivateData) XXX_Size() int {
	return m.Size()
}
func (m *RelayPrivateData) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayPrivateData.DiscardUnknown(m)
}

var xxx_messageInfo_RelayPrivateData proto.InternalMessageInfo

func (m *RelayPrivateData) GetConnectionType() string {
	if m != nil {
		return m.ConnectionType
	}
	return ""
}

func (m *RelayPrivateData) GetApiUrl() string {
	if m != nil {
		return m.ApiUrl
	}
	return ""
}

func (m *RelayPrivateData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RelayPrivateData) GetRequestBlock() int64 {
	if m != nil {
		return m.RequestBlock
	}
	return 0
}

func (m *RelayPrivateData) GetApiInterface() string {
	if m != nil {
		return m.ApiInterface
	}
	return ""
}

func (m *RelayPrivateData) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *RelayPrivateData) GetMetadata() []Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Metadata struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cd1bfeb9978acf, []int{2}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Metadata) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type RelayRequest struct {
	RelaySession *RelaySession     `protobuf:"bytes,1,opt,name=relay_session,json=relaySession,proto3" json:"relay_session,omitempty"`
	RelayData    *RelayPrivateData `protobuf:"bytes,2,opt,name=relay_data,json=relayData,proto3" json:"relay_data,omitempty"`
}

func (m *RelayRequest) Reset()         { *m = RelayRequest{} }
func (m *RelayRequest) String() string { return proto.CompactTextString(m) }
func (*RelayRequest) ProtoMessage()    {}
func (*RelayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cd1bfeb9978acf, []int{3}
}
func (m *RelayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayRequest.Merge(m, src)
}
func (m *RelayRequest) XXX_Size() int {
	return m.Size()
}
func (m *RelayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RelayRequest proto.InternalMessageInfo

func (m *RelayRequest) GetRelaySession() *RelaySession {
	if m != nil {
		return m.RelaySession
	}
	return nil
}

func (m *RelayRequest) GetRelayData() *RelayPrivateData {
	if m != nil {
		return m.RelayData
	}
	return nil
}

type Badge struct {
	CuAllocation uint64 `protobuf:"varint,1,opt,name=cu_allocation,json=cuAllocation,proto3" json:"cu_allocation,omitempty"`
	Epoch        uint64 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Address      string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	LavaChainId  string `protobuf:"bytes,4,opt,name=lava_chain_id,json=lavaChainId,proto3" json:"lava_chain_id,omitempty"`
	ProjectSig   []byte `protobuf:"bytes,5,opt,name=project_sig,json=projectSig,proto3" json:"project_sig,omitempty"`
}

func (m *Badge) Reset()         { *m = Badge{} }
func (m *Badge) String() string { return proto.CompactTextString(m) }
func (*Badge) ProtoMessage()    {}
func (*Badge) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cd1bfeb9978acf, []int{4}
}
func (m *Badge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Badge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Badge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Badge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Badge.Merge(m, src)
}
func (m *Badge) XXX_Size() int {
	return m.Size()
}
func (m *Badge) XXX_DiscardUnknown() {
	xxx_messageInfo_Badge.DiscardUnknown(m)
}

var xxx_messageInfo_Badge proto.InternalMessageInfo

func (m *Badge) GetCuAllocation() uint64 {
	if m != nil {
		return m.CuAllocation
	}
	return 0
}

func (m *Badge) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Badge) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Badge) GetLavaChainId() string {
	if m != nil {
		return m.LavaChainId
	}
	return ""
}

func (m *Badge) GetProjectSig() []byte {
	if m != nil {
		return m.ProjectSig
	}
	return nil
}

type RelayReply struct {
	Data                  []byte     `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Sig                   []byte     `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	Nonce                 uint32     `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	LatestBlock           int64      `protobuf:"varint,4,opt,name=latest_block,json=latestBlock,proto3" json:"latest_block,omitempty"`
	FinalizedBlocksHashes []byte     `protobuf:"bytes,5,opt,name=finalized_blocks_hashes,json=finalizedBlocksHashes,proto3" json:"finalized_blocks_hashes,omitempty"`
	SigBlocks             []byte     `protobuf:"bytes,6,opt,name=sig_blocks,json=sigBlocks,proto3" json:"sig_blocks,omitempty"`
	Metadata              []Metadata `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata"`
}

func (m *RelayReply) Reset()         { *m = RelayReply{} }
func (m *RelayReply) String() string { return proto.CompactTextString(m) }
func (*RelayReply) ProtoMessage()    {}
func (*RelayReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cd1bfeb9978acf, []int{5}
}
func (m *RelayReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayReply.Merge(m, src)
}
func (m *RelayReply) XXX_Size() int {
	return m.Size()
}
func (m *RelayReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayReply.DiscardUnknown(m)
}

var xxx_messageInfo_RelayReply proto.InternalMessageInfo

func (m *RelayReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RelayReply) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *RelayReply) GetNonce() uint32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *RelayReply) GetLatestBlock() int64 {
	if m != nil {
		return m.LatestBlock
	}
	return 0
}

func (m *RelayReply) GetFinalizedBlocksHashes() []byte {
	if m != nil {
		return m.FinalizedBlocksHashes
	}
	return nil
}

func (m *RelayReply) GetSigBlocks() []byte {
	if m != nil {
		return m.SigBlocks
	}
	return nil
}

func (m *RelayReply) GetMetadata() []Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type QualityOfServiceReport struct {
	Latency      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=latency,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"latency" yaml:"Latency"`
	Availability github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=availability,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"availability" yaml:"availability"`
	Sync         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=sync,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"sync" yaml:"sync"`
}

func (m *QualityOfServiceReport) Reset()         { *m = QualityOfServiceReport{} }
func (m *QualityOfServiceReport) String() string { return proto.CompactTextString(m) }
func (*QualityOfServiceReport) ProtoMessage()    {}
func (*QualityOfServiceReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cd1bfeb9978acf, []int{6}
}
func (m *QualityOfServiceReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QualityOfServiceReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QualityOfServiceReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QualityOfServiceReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QualityOfServiceReport.Merge(m, src)
}
func (m *QualityOfServiceReport) XXX_Size() int {
	return m.Size()
}
func (m *QualityOfServiceReport) XXX_DiscardUnknown() {
	xxx_messageInfo_QualityOfServiceReport.DiscardUnknown(m)
}

var xxx_messageInfo_QualityOfServiceReport proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RelaySession)(nil), "lavanet.lava.pairing.RelaySession")
	proto.RegisterType((*RelayPrivateData)(nil), "lavanet.lava.pairing.RelayPrivateData")
	proto.RegisterType((*Metadata)(nil), "lavanet.lava.pairing.Metadata")
	proto.RegisterType((*RelayRequest)(nil), "lavanet.lava.pairing.RelayRequest")
	proto.RegisterType((*Badge)(nil), "lavanet.lava.pairing.Badge")
	proto.RegisterType((*RelayReply)(nil), "lavanet.lava.pairing.RelayReply")
	proto.RegisterType((*QualityOfServiceReport)(nil), "lavanet.lava.pairing.QualityOfServiceReport")
}

func init() { proto.RegisterFile("pairing/relay.proto", fileDescriptor_10cd1bfeb9978acf) }

var fileDescriptor_10cd1bfeb9978acf = []byte{
	// 1001 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xfa, 0x4f, 0x6c, 0x3f, 0x3b, 0x21, 0x9a, 0x26, 0xed, 0x2a, 0x05, 0xc7, 0x2c, 0x52,
	0xeb, 0x03, 0xd8, 0x10, 0x4a, 0x0f, 0x48, 0x48, 0xad, 0x69, 0x44, 0xc3, 0xbf, 0xa6, 0x13, 0xca,
	0x21, 0x97, 0xd5, 0x78, 0x76, 0xb2, 0x1e, 0xba, 0xde, 0xd9, 0xcc, 0xcc, 0x1a, 0xcc, 0x99, 0x03,
	0x47, 0xbe, 0x02, 0x12, 0x9f, 0x80, 0x33, 0x1f, 0xa0, 0xc7, 0x1e, 0x11, 0x87, 0x08, 0x25, 0xdf,
	0x80, 0x3b, 0x12, 0x9a, 0x99, 0xdd, 0xc4, 0xb4, 0x51, 0xa4, 0x4a, 0x3d, 0xed, 0x9b, 0xf7, 0xde,
	0xfc, 0xde, 0xbc, 0xf9, 0xfd, 0xde, 0xd8, 0x70, 0x2d, 0x23, 0x5c, 0xf2, 0x34, 0x1e, 0x49, 0x96,
	0x90, 0xc5, 0x30, 0x93, 0x42, 0x0b, 0xb4, 0x91, 0x90, 0x39, 0x49, 0x99, 0x1e, 0x9a, 0xef, 0xb0,
	0xc8, 0xd8, 0xda, 0x88, 0x45, 0x2c, 0x6c, 0xc2, 0xc8, 0x58, 0x2e, 0x77, 0xab, 0x17, 0x0b, 0x11,
	0x27, 0x6c, 0x64, 0x57, 0x93, 0xfc, 0x68, 0xf4, 0xbd, 0x24, 0x59, 0xc6, 0xa4, 0x72, 0xf1, 0xe0,
	0x8f, 0x1a, 0x74, 0xb1, 0xc1, 0x3e, 0x60, 0x4a, 0x71, 0x91, 0xa2, 0x1b, 0xd0, 0x54, 0x19, 0xa3,
	0x21, 0x8f, 0x7c, 0xaf, 0xef, 0x0d, 0xda, 0x78, 0xc5, 0x2c, 0xf7, 0x22, 0xf4, 0x36, 0x74, 0xa9,
	0x48, 0x35, 0x4b, 0x75, 0x38, 0x25, 0x6a, 0xea, 0x57, 0xfb, 0xde, 0xa0, 0x8b, 0x3b, 0x85, 0xef,
	0x21, 0x51, 0x53, 0xf4, 0x16, 0x80, 0x72, 0x30, 0x66, 0x7b, 0xad, 0xef, 0x0d, 0xea, 0xb8, 0x5d,
	0x78, 0xf6, 0x22, 0xb4, 0x09, 0x2b, 0x34, 0x0f, 0x55, 0x3e, 0xf3, 0xeb, 0x36, 0xd4, 0xa0, 0xf9,
	0x41, 0x3e, 0x43, 0x5b, 0xd0, 0xca, 0xa4, 0x98, 0xf3, 0x88, 0x49, 0xbf, 0x61, 0x4b, 0x9e, 0xaf,
	0xd1, 0x4d, 0x68, 0xdb, 0xce, 0xc3, 0x34, 0x9f, 0xf9, 0x2b, 0x76, 0x57, 0xcb, 0x3a, 0xbe, 0xce,
	0x67, 0xe8, 0x0b, 0x80, 0x63, 0xa1, 0x42, 0xc9, 0x32, 0x21, 0xb5, 0xdf, 0xec, 0x7b, 0x83, 0xce,
	0xce, 0xbb, 0xc3, 0xcb, 0x2e, 0x67, 0xf8, 0x38, 0x27, 0x09, 0xd7, 0x8b, 0x47, 0x47, 0x07, 0x4c,
	0xce, 0x39, 0x65, 0xd8, 0xee, 0xc1, 0xed, 0x63, 0xa1, 0x9c, 0x89, 0x36, 0xa0, 0xc1, 0x32, 0x41,
	0xa7, 0x7e, 0xab, 0xef, 0x0d, 0x6a, 0xd8, 0x2d, 0xd0, 0x47, 0x70, 0x3d, 0x4f, 0x25, 0x53, 0x99,
	0x48, 0x15, 0x9f, 0xb3, 0xb0, 0x3c, 0x98, 0xf2, 0xdb, 0xb6, 0xfd, 0xcd, 0xe5, 0xe8, 0x7e, 0x19,
	0x44, 0x01, 0xac, 0x9a, 0xf2, 0x21, 0x9d, 0x12, 0x6e, 0xef, 0x02, 0x6c, 0x5f, 0x1d, 0xe3, 0xfc,
	0xd4, 0xf8, 0xf6, 0x22, 0xb4, 0x0e, 0x35, 0xc5, 0x63, 0xbf, 0x63, 0x71, 0x8c, 0x89, 0x3e, 0x80,
	0xc6, 0x84, 0x44, 0x31, 0xf3, 0xbb, 0xb6, 0x95, 0x9b, 0x97, 0xb7, 0x32, 0x36, 0x29, 0xd8, 0x65,
	0x06, 0x3f, 0x57, 0x61, 0xdd, 0xd2, 0xb7, 0x2f, 0xf9, 0x9c, 0x68, 0xf6, 0x80, 0x68, 0x82, 0x6e,
	0xc3, 0x1b, 0x54, 0xa4, 0x29, 0xa3, 0xda, 0x30, 0xa1, 0x17, 0x19, 0x2b, 0xa8, 0x5c, 0xbb, 0x70,
	0x7f, 0xb3, 0xc8, 0x98, 0xe1, 0x9a, 0x64, 0x3c, 0xcc, 0x65, 0x62, 0xd9, 0x6c, 0xe3, 0x15, 0x92,
	0xf1, 0x27, 0x32, 0x41, 0x08, 0xea, 0x11, 0xd1, 0xc4, 0x52, 0xd8, 0xc5, 0xd6, 0x46, 0xef, 0xc0,
	0xaa, 0x64, 0xc7, 0x39, 0x53, 0x3a, 0x9c, 0x24, 0x82, 0x3e, 0xb5, 0x24, 0xd6, 0x70, 0xb7, 0x70,
	0x8e, 0x8d, 0xcf, 0x24, 0x19, 0x44, 0x9e, 0x6a, 0x26, 0x8f, 0x08, 0x65, 0x05, 0xa1, 0x5d, 0x92,
	0xf1, 0xbd, 0xd2, 0x67, 0xd0, 0x15, 0x49, 0xb4, 0xe5, 0xb3, 0x8b, 0xad, 0x8d, 0xee, 0x41, 0x6b,
	0xc6, 0x34, 0xb1, 0x55, 0x9b, 0xfd, 0xda, 0xa0, 0xb3, 0xd3, 0xbb, 0xbc, 0xfd, 0xaf, 0x8a, 0xac,
	0x71, 0xfd, 0xd9, 0xc9, 0x76, 0x05, 0x9f, 0xef, 0x0a, 0xee, 0x40, 0xab, 0x8c, 0x99, 0x0a, 0x29,
	0x99, 0x95, 0x6d, 0x5b, 0xdb, 0x10, 0x3c, 0x27, 0x49, 0xce, 0x8a, 0x56, 0xdd, 0x22, 0xf8, 0xcd,
	0x2b, 0xf4, 0x8f, 0x5d, 0x1b, 0xe8, 0x33, 0xd3, 0xa6, 0x51, 0x5c, 0xa1, 0x5b, 0x8b, 0xd1, 0xd9,
	0x09, 0x2e, 0x3f, 0xcd, 0xf2, 0xe8, 0x98, 0xab, 0x58, 0x1a, 0xa4, 0x5d, 0x00, 0x07, 0x64, 0x7b,
	0xaa, 0x5a, 0x94, 0x5b, 0x57, 0xa0, 0x2c, 0x31, 0x88, 0x9d, 0xe8, 0x8d, 0xf9, 0x79, 0xbd, 0x55,
	0x5b, 0xaf, 0x07, 0xbf, 0x7a, 0xd0, 0xb0, 0xc4, 0x9b, 0x1b, 0xa6, 0x79, 0x48, 0x92, 0x44, 0x50,
	0xa2, 0xcb, 0xf3, 0xd5, 0x71, 0x97, 0xe6, 0xf7, 0xcf, 0x7d, 0x17, 0x62, 0xae, 0xba, 0x41, 0x73,
	0x62, 0xf6, 0xa1, 0x49, 0xa2, 0x48, 0x32, 0xa5, 0x2c, 0xb1, 0x6d, 0x5c, 0x2e, 0x5f, 0xd6, 0x6b,
	0xfd, 0x65, 0xbd, 0x6e, 0x43, 0x27, 0x93, 0xe2, 0x3b, 0x46, 0x75, 0x68, 0x74, 0xdb, 0xb0, 0xe4,
	0x41, 0xe1, 0x3a, 0xe0, 0x71, 0xf0, 0x53, 0x15, 0xa0, 0xb8, 0xca, 0x2c, 0x59, 0x9c, 0x6b, 0xc8,
	0x5b, 0xd2, 0x50, 0xa1, 0xf9, 0xea, 0x85, 0xe6, 0x37, 0xa0, 0x91, 0x8a, 0x94, 0x32, 0x7b, 0xa2,
	0x55, 0xec, 0x16, 0xe6, 0xad, 0x49, 0x88, 0x7e, 0x51, 0x6a, 0x1d, 0xe7, 0x73, 0x4a, 0xbb, 0x0b,
	0x37, 0x8e, 0x78, 0x4a, 0x12, 0xfe, 0x23, 0x8b, 0x5c, 0x96, 0xb2, 0xef, 0x12, 0x53, 0xc5, 0xd1,
	0x36, 0xcf, 0xc3, 0x76, 0x83, 0x7a, 0x68, 0x83, 0xf6, 0x8d, 0xe2, 0x71, 0xb1, 0xa3, 0x90, 0x60,
	0x5b, 0xf1, 0xd8, 0x25, 0xbd, 0x06, 0x1d, 0xfe, 0x5e, 0x85, 0xeb, 0x97, 0x3f, 0x37, 0xe8, 0x10,
	0x9a, 0xa6, 0x85, 0x94, 0x2e, 0x9c, 0x32, 0xc7, 0xf7, 0xcc, 0xde, 0xbf, 0x4e, 0xb6, 0x6f, 0xc5,
	0x5c, 0x4f, 0xf3, 0xc9, 0x90, 0x8a, 0xd9, 0x88, 0x0a, 0x35, 0x13, 0xaa, 0xf8, 0xbc, 0xa7, 0xa2,
	0xa7, 0x23, 0x33, 0xc1, 0x6a, 0xf8, 0x80, 0xd1, 0x7f, 0x4e, 0xb6, 0xd7, 0x16, 0x64, 0x96, 0x7c,
	0x1c, 0x7c, 0xe9, 0x60, 0x02, 0x5c, 0x02, 0x22, 0x0e, 0x5d, 0x32, 0x27, 0x3c, 0x21, 0x13, 0x6e,
	0x4a, 0x3b, 0x95, 0x8f, 0x77, 0x5f, 0xb9, 0xc0, 0x35, 0x57, 0x60, 0x19, 0x2b, 0xc0, 0xff, 0x83,
	0x46, 0x8f, 0xa1, 0xae, 0x16, 0x29, 0x75, 0x22, 0x1a, 0x7f, 0xf2, 0xca, 0x25, 0x3a, 0xae, 0x84,
	0xc1, 0x08, 0xb0, 0x85, 0xda, 0xf9, 0xd7, 0x83, 0xa6, 0xd5, 0x0e, 0x93, 0xe8, 0x11, 0x34, 0xac,
	0x89, 0xae, 0x9a, 0xb9, 0x62, 0x5c, 0xb7, 0xfa, 0x57, 0xe6, 0x64, 0xc9, 0x22, 0xa8, 0xa0, 0x43,
	0x58, 0x73, 0x73, 0x9a, 0x4f, 0x14, 0x95, 0x7c, 0xc2, 0x5e, 0x17, 0xf2, 0xfb, 0x1e, 0xda, 0x85,
	0xc6, 0xbe, 0x14, 0x13, 0x86, 0xde, 0x1c, 0xba, 0x5f, 0xda, 0x61, 0xf9, 0x4b, 0x3b, 0x7c, 0xb2,
	0x97, 0xea, 0xbb, 0x77, 0xbe, 0x35, 0xcf, 0xcc, 0xd6, 0x95, 0xd1, 0xa0, 0x32, 0xbe, 0xff, 0xec,
	0xb4, 0xe7, 0x3d, 0x3f, 0xed, 0x79, 0x7f, 0x9f, 0xf6, 0xbc, 0x5f, 0xce, 0x7a, 0x95, 0xe7, 0x67,
	0xbd, 0xca, 0x9f, 0x67, 0xbd, 0xca, 0xe1, 0xed, 0xa5, 0x6b, 0x2d, 0x0e, 0x64, 0xbf, 0xa3, 0x1f,
	0x46, 0xe5, 0x7f, 0x03, 0x7b, 0xb7, 0x93, 0x15, 0x0b, 0xfd, 0xe1, 0x7f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x6b, 0xbc, 0xfa, 0x3b, 0x33, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RelayerClient is the client API for Relayer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RelayerClient interface {
	Relay(ctx context.Context, in *RelayRequest, opts ...grpc.CallOption) (*RelayReply, error)
	RelaySubscribe(ctx context.Context, in *RelayRequest, opts ...grpc.CallOption) (Relayer_RelaySubscribeClient, error)
	Probe(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error)
}

type relayerClient struct {
	cc grpc1.ClientConn
}

func NewRelayerClient(cc grpc1.ClientConn) RelayerClient {
	return &relayerClient{cc}
}

func (c *relayerClient) Relay(ctx context.Context, in *RelayRequest, opts ...grpc.CallOption) (*RelayReply, error) {
	out := new(RelayReply)
	err := c.cc.Invoke(ctx, "/lavanet.lava.pairing.Relayer/Relay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerClient) RelaySubscribe(ctx context.Context, in *RelayRequest, opts ...grpc.CallOption) (Relayer_RelaySubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Relayer_serviceDesc.Streams[0], "/lavanet.lava.pairing.Relayer/RelaySubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &relayerRelaySubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Relayer_RelaySubscribeClient interface {
	Recv() (*RelayReply, error)
	grpc.ClientStream
}

type relayerRelaySubscribeClient struct {
	grpc.ClientStream
}

func (x *relayerRelaySubscribeClient) Recv() (*RelayReply, error) {
	m := new(RelayReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *relayerClient) Probe(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*wrapperspb.UInt64Value, error) {
	out := new(wrapperspb.UInt64Value)
	err := c.cc.Invoke(ctx, "/lavanet.lava.pairing.Relayer/Probe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayerServer is the server API for Relayer service.
type RelayerServer interface {
	Relay(context.Context, *RelayRequest) (*RelayReply, error)
	RelaySubscribe(*RelayRequest, Relayer_RelaySubscribeServer) error
	Probe(context.Context, *wrapperspb.UInt64Value) (*wrapperspb.UInt64Value, error)
}

// UnimplementedRelayerServer can be embedded to have forward compatible implementations.
type UnimplementedRelayerServer struct {
}

func (*UnimplementedRelayerServer) Relay(ctx context.Context, req *RelayRequest) (*RelayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Relay not implemented")
}
func (*UnimplementedRelayerServer) RelaySubscribe(req *RelayRequest, srv Relayer_RelaySubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method RelaySubscribe not implemented")
}
func (*UnimplementedRelayerServer) Probe(ctx context.Context, req *wrapperspb.UInt64Value) (*wrapperspb.UInt64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Probe not implemented")
}

func RegisterRelayerServer(s grpc1.Server, srv RelayerServer) {
	s.RegisterService(&_Relayer_serviceDesc, srv)
}

func _Relayer_Relay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerServer).Relay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.pairing.Relayer/Relay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerServer).Relay(ctx, req.(*RelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relayer_RelaySubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RelayRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RelayerServer).RelaySubscribe(m, &relayerRelaySubscribeServer{stream})
}

type Relayer_RelaySubscribeServer interface {
	Send(*RelayReply) error
	grpc.ServerStream
}

type relayerRelaySubscribeServer struct {
	grpc.ServerStream
}

func (x *relayerRelaySubscribeServer) Send(m *RelayReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Relayer_Probe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerServer).Probe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.pairing.Relayer/Probe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerServer).Probe(ctx, req.(*wrapperspb.UInt64Value))
	}
	return interceptor(ctx, in, info, handler)
}

var _Relayer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lavanet.lava.pairing.Relayer",
	HandlerType: (*RelayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Relay",
			Handler:    _Relayer_Relay_Handler,
		},
		{
			MethodName: "Probe",
			Handler:    _Relayer_Probe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RelaySubscribe",
			Handler:       _Relayer_RelaySubscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pairing/relay.proto",
}

func (m *RelaySession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelaySession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelaySession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Badge != nil {
		{
			size, err := m.Badge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelay(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.LavaChainId) > 0 {
		i -= len(m.LavaChainId)
		copy(dAtA[i:], m.LavaChainId)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.LavaChainId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.UnresponsiveProviders) > 0 {
		i -= len(m.UnresponsiveProviders)
		copy(dAtA[i:], m.UnresponsiveProviders)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.UnresponsiveProviders)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Epoch != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x40
	}
	if m.QosReport != nil {
		{
			size, err := m.QosReport.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelay(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.RelayNum != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.RelayNum))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CuSum != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.CuSum))
		i--
		dAtA[i] = 0x20
	}
	if m.SessionId != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ContentHash) > 0 {
		i -= len(m.ContentHash)
		copy(dAtA[i:], m.ContentHash)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.ContentHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SpecId) > 0 {
		i -= len(m.SpecId)
		copy(dAtA[i:], m.SpecId)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.SpecId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelayPrivateData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayPrivateData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayPrivateData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for iNdEx := len(m.Metadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRelay(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Salt) > 0 {
		i -= len(m.Salt)
		copy(dAtA[i:], m.Salt)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Salt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ApiInterface) > 0 {
		i -= len(m.ApiInterface)
		copy(dAtA[i:], m.ApiInterface)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.ApiInterface)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RequestBlock != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.RequestBlock))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ApiUrl) > 0 {
		i -= len(m.ApiUrl)
		copy(dAtA[i:], m.ApiUrl)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.ApiUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionType) > 0 {
		i -= len(m.ConnectionType)
		copy(dAtA[i:], m.ConnectionType)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.ConnectionType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RelayData != nil {
		{
			size, err := m.RelayData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelay(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RelaySession != nil {
		{
			size, err := m.RelaySession.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelay(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Badge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Badge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Badge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProjectSig) > 0 {
		i -= len(m.ProjectSig)
		copy(dAtA[i:], m.ProjectSig)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.ProjectSig)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LavaChainId) > 0 {
		i -= len(m.LavaChainId)
		copy(dAtA[i:], m.LavaChainId)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.LavaChainId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Epoch != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x10
	}
	if m.CuAllocation != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.CuAllocation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RelayReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for iNdEx := len(m.Metadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRelay(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.SigBlocks) > 0 {
		i -= len(m.SigBlocks)
		copy(dAtA[i:], m.SigBlocks)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.SigBlocks)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FinalizedBlocksHashes) > 0 {
		i -= len(m.FinalizedBlocksHashes)
		copy(dAtA[i:], m.FinalizedBlocksHashes)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.FinalizedBlocksHashes)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LatestBlock != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.LatestBlock))
		i--
		dAtA[i] = 0x20
	}
	if m.Nonce != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QualityOfServiceReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QualityOfServiceReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QualityOfServiceReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Sync.Size()
		i -= size
		if _, err := m.Sync.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRelay(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Availability.Size()
		i -= size
		if _, err := m.Availability.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRelay(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Latency.Size()
		i -= size
		if _, err := m.Latency.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRelay(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintRelay(dAtA []byte, offset int, v uint64) int {
	offset -= sovRelay(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RelaySession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecId)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.ContentHash)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	if m.SessionId != 0 {
		n += 1 + sovRelay(uint64(m.SessionId))
	}
	if m.CuSum != 0 {
		n += 1 + sovRelay(uint64(m.CuSum))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	if m.RelayNum != 0 {
		n += 1 + sovRelay(uint64(m.RelayNum))
	}
	if m.QosReport != nil {
		l = m.QosReport.Size()
		n += 1 + l + sovRelay(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovRelay(uint64(m.Epoch))
	}
	l = len(m.UnresponsiveProviders)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.LavaChainId)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	if m.Badge != nil {
		l = m.Badge.Size()
		n += 1 + l + sovRelay(uint64(l))
	}
	return n
}

func (m *RelayPrivateData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionType)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.ApiUrl)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	if m.RequestBlock != 0 {
		n += 1 + sovRelay(uint64(m.RequestBlock))
	}
	l = len(m.ApiInterface)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.Salt)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 1 + l + sovRelay(uint64(l))
		}
	}
	return n
}

func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	return n
}

func (m *RelayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RelaySession != nil {
		l = m.RelaySession.Size()
		n += 1 + l + sovRelay(uint64(l))
	}
	if m.RelayData != nil {
		l = m.RelayData.Size()
		n += 1 + l + sovRelay(uint64(l))
	}
	return n
}

func (m *Badge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CuAllocation != 0 {
		n += 1 + sovRelay(uint64(m.CuAllocation))
	}
	if m.Epoch != 0 {
		n += 1 + sovRelay(uint64(m.Epoch))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.LavaChainId)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.ProjectSig)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	return n
}

func (m *RelayReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovRelay(uint64(m.Nonce))
	}
	if m.LatestBlock != 0 {
		n += 1 + sovRelay(uint64(m.LatestBlock))
	}
	l = len(m.FinalizedBlocksHashes)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.SigBlocks)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 1 + l + sovRelay(uint64(l))
		}
	}
	return n
}

func (m *QualityOfServiceReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Latency.Size()
	n += 1 + l + sovRelay(uint64(l))
	l = m.Availability.Size()
	n += 1 + l + sovRelay(uint64(l))
	l = m.Sync.Size()
	n += 1 + l + sovRelay(uint64(l))
	return n
}

func sovRelay(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRelay(x uint64) (n int) {
	return sovRelay(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RelaySession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelaySession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelaySession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentHash = append(m.ContentHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ContentHash == nil {
				m.ContentHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CuSum", wireType)
			}
			m.CuSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CuSum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayNum", wireType)
			}
			m.RelayNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelayNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QosReport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QosReport == nil {
				m.QosReport = &QualityOfServiceReport{}
			}
			if err := m.QosReport.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnresponsiveProviders", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnresponsiveProviders = append(m.UnresponsiveProviders[:0], dAtA[iNdEx:postIndex]...)
			if m.UnresponsiveProviders == nil {
				m.UnresponsiveProviders = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LavaChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LavaChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Badge == nil {
				m.Badge = &Badge{}
			}
			if err := m.Badge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayPrivateData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayPrivateData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayPrivateData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestBlock", wireType)
			}
			m.RequestBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiInterface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Salt = append(m.Salt[:0], dAtA[iNdEx:postIndex]...)
			if m.Salt == nil {
				m.Salt = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, Metadata{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelaySession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RelaySession == nil {
				m.RelaySession = &RelaySession{}
			}
			if err := m.RelaySession.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RelayData == nil {
				m.RelayData = &RelayPrivateData{}
			}
			if err := m.RelayData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Badge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Badge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Badge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CuAllocation", wireType)
			}
			m.CuAllocation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CuAllocation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LavaChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LavaChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectSig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectSig = append(m.ProjectSig[:0], dAtA[iNdEx:postIndex]...)
			if m.ProjectSig == nil {
				m.ProjectSig = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlock", wireType)
			}
			m.LatestBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedBlocksHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalizedBlocksHashes = append(m.FinalizedBlocksHashes[:0], dAtA[iNdEx:postIndex]...)
			if m.FinalizedBlocksHashes == nil {
				m.FinalizedBlocksHashes = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigBlocks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigBlocks = append(m.SigBlocks[:0], dAtA[iNdEx:postIndex]...)
			if m.SigBlocks == nil {
				m.SigBlocks = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, Metadata{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QualityOfServiceReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QualityOfServiceReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QualityOfServiceReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Latency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Availability", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Availability.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sync", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sync.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelay(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRelay
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRelay
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRelay
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRelay        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelay          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRelay = fmt.Errorf("proto: unexpected end of group")
)
