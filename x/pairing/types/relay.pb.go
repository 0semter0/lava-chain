// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pairing/relay.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RelayRequest struct {
	ChainID         string                  `protobuf:"bytes,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	ApiId           uint32                  `protobuf:"varint,2,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	ApiUrl          string                  `protobuf:"bytes,3,opt,name=api_url,json=apiUrl,proto3" json:"api_url,omitempty"`
	SessionId       uint64                  `protobuf:"varint,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	CuSum           uint64                  `protobuf:"varint,5,opt,name=cu_sum,json=cuSum,proto3" json:"cu_sum,omitempty"`
	Data            []byte                  `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Sig             []byte                  `protobuf:"bytes,7,opt,name=sig,proto3" json:"sig,omitempty"`
	Provider        string                  `protobuf:"bytes,8,opt,name=provider,proto3" json:"provider,omitempty"`
	BlockHeight     int64                   `protobuf:"varint,9,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	RelayNum        uint64                  `protobuf:"varint,10,opt,name=relay_num,json=relayNum,proto3" json:"relay_num,omitempty"`
	RequestBlock    int64                   `protobuf:"varint,11,opt,name=request_block,json=requestBlock,proto3" json:"request_block,omitempty"`
	DataReliability *VRFData                `protobuf:"bytes,12,opt,name=DataReliability,proto3" json:"DataReliability,omitempty"`
	QoSReport       *QualityOfServiceReport `protobuf:"bytes,13,opt,name=QoSReport,proto3" json:"QoSReport,omitempty"`
}

func (m *RelayRequest) Reset()         { *m = RelayRequest{} }
func (m *RelayRequest) String() string { return proto.CompactTextString(m) }
func (*RelayRequest) ProtoMessage()    {}
func (*RelayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cd1bfeb9978acf, []int{0}
}
func (m *RelayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayRequest.Merge(m, src)
}
func (m *RelayRequest) XXX_Size() int {
	return m.Size()
}
func (m *RelayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RelayRequest proto.InternalMessageInfo

func (m *RelayRequest) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *RelayRequest) GetApiId() uint32 {
	if m != nil {
		return m.ApiId
	}
	return 0
}

func (m *RelayRequest) GetApiUrl() string {
	if m != nil {
		return m.ApiUrl
	}
	return ""
}

func (m *RelayRequest) GetSessionId() uint64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *RelayRequest) GetCuSum() uint64 {
	if m != nil {
		return m.CuSum
	}
	return 0
}

func (m *RelayRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RelayRequest) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *RelayRequest) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *RelayRequest) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *RelayRequest) GetRelayNum() uint64 {
	if m != nil {
		return m.RelayNum
	}
	return 0
}

func (m *RelayRequest) GetRequestBlock() int64 {
	if m != nil {
		return m.RequestBlock
	}
	return 0
}

func (m *RelayRequest) GetDataReliability() *VRFData {
	if m != nil {
		return m.DataReliability
	}
	return nil
}

func (m *RelayRequest) GetQoSReport() *QualityOfServiceReport {
	if m != nil {
		return m.QoSReport
	}
	return nil
}

type RelayReply struct {
	Data                  []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Sig                   []byte `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	Nonce                 uint32 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	LatestBlock           int64  `protobuf:"varint,4,opt,name=latest_block,json=latestBlock,proto3" json:"latest_block,omitempty"`
	FinalizedBlocksHashes []byte `protobuf:"bytes,5,opt,name=finalized_blocks_hashes,json=finalizedBlocksHashes,proto3" json:"finalized_blocks_hashes,omitempty"`
	SigBlocks             []byte `protobuf:"bytes,6,opt,name=sig_blocks,json=sigBlocks,proto3" json:"sig_blocks,omitempty"`
}

func (m *RelayReply) Reset()         { *m = RelayReply{} }
func (m *RelayReply) String() string { return proto.CompactTextString(m) }
func (*RelayReply) ProtoMessage()    {}
func (*RelayReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cd1bfeb9978acf, []int{1}
}
func (m *RelayReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayReply.Merge(m, src)
}
func (m *RelayReply) XXX_Size() int {
	return m.Size()
}
func (m *RelayReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayReply.DiscardUnknown(m)
}

var xxx_messageInfo_RelayReply proto.InternalMessageInfo

func (m *RelayReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RelayReply) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *RelayReply) GetNonce() uint32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *RelayReply) GetLatestBlock() int64 {
	if m != nil {
		return m.LatestBlock
	}
	return 0
}

func (m *RelayReply) GetFinalizedBlocksHashes() []byte {
	if m != nil {
		return m.FinalizedBlocksHashes
	}
	return nil
}

func (m *RelayReply) GetSigBlocks() []byte {
	if m != nil {
		return m.SigBlocks
	}
	return nil
}

type VRFData struct {
	Differentiator bool   `protobuf:"varint,1,opt,name=differentiator,proto3" json:"differentiator,omitempty"`
	VrfValue       []byte `protobuf:"bytes,2,opt,name=vrf_value,json=vrfValue,proto3" json:"vrf_value,omitempty"`
	VrfProof       []byte `protobuf:"bytes,3,opt,name=vrf_proof,json=vrfProof,proto3" json:"vrf_proof,omitempty"`
	ProviderSig    []byte `protobuf:"bytes,4,opt,name=provider_sig,json=providerSig,proto3" json:"provider_sig,omitempty"`
	AllDataHash    []byte `protobuf:"bytes,5,opt,name=allDataHash,proto3" json:"allDataHash,omitempty"`
	QueryHash      []byte `protobuf:"bytes,6,opt,name=queryHash,proto3" json:"queryHash,omitempty"`
	Sig            []byte `protobuf:"bytes,7,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (m *VRFData) Reset()         { *m = VRFData{} }
func (m *VRFData) String() string { return proto.CompactTextString(m) }
func (*VRFData) ProtoMessage()    {}
func (*VRFData) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cd1bfeb9978acf, []int{2}
}
func (m *VRFData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VRFData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VRFData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VRFData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VRFData.Merge(m, src)
}
func (m *VRFData) XXX_Size() int {
	return m.Size()
}
func (m *VRFData) XXX_DiscardUnknown() {
	xxx_messageInfo_VRFData.DiscardUnknown(m)
}

var xxx_messageInfo_VRFData proto.InternalMessageInfo

func (m *VRFData) GetDifferentiator() bool {
	if m != nil {
		return m.Differentiator
	}
	return false
}

func (m *VRFData) GetVrfValue() []byte {
	if m != nil {
		return m.VrfValue
	}
	return nil
}

func (m *VRFData) GetVrfProof() []byte {
	if m != nil {
		return m.VrfProof
	}
	return nil
}

func (m *VRFData) GetProviderSig() []byte {
	if m != nil {
		return m.ProviderSig
	}
	return nil
}

func (m *VRFData) GetAllDataHash() []byte {
	if m != nil {
		return m.AllDataHash
	}
	return nil
}

func (m *VRFData) GetQueryHash() []byte {
	if m != nil {
		return m.QueryHash
	}
	return nil
}

func (m *VRFData) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

type QualityOfServiceReport struct {
	Latency      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=latency,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"latency" yaml:"Latency"`
	Availability github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=availability,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"availability" yaml:"availability"`
	Freshness    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=freshness,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"freshness" yaml:"freshness"`
}

func (m *QualityOfServiceReport) Reset()         { *m = QualityOfServiceReport{} }
func (m *QualityOfServiceReport) String() string { return proto.CompactTextString(m) }
func (*QualityOfServiceReport) ProtoMessage()    {}
func (*QualityOfServiceReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_10cd1bfeb9978acf, []int{3}
}
func (m *QualityOfServiceReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QualityOfServiceReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QualityOfServiceReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QualityOfServiceReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QualityOfServiceReport.Merge(m, src)
}
func (m *QualityOfServiceReport) XXX_Size() int {
	return m.Size()
}
func (m *QualityOfServiceReport) XXX_DiscardUnknown() {
	xxx_messageInfo_QualityOfServiceReport.DiscardUnknown(m)
}

var xxx_messageInfo_QualityOfServiceReport proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RelayRequest)(nil), "lavanet.lava.pairing.RelayRequest")
	proto.RegisterType((*RelayReply)(nil), "lavanet.lava.pairing.RelayReply")
	proto.RegisterType((*VRFData)(nil), "lavanet.lava.pairing.VRFData")
	proto.RegisterType((*QualityOfServiceReport)(nil), "lavanet.lava.pairing.QualityOfServiceReport")
}

func init() { proto.RegisterFile("pairing/relay.proto", fileDescriptor_10cd1bfeb9978acf) }

var fileDescriptor_10cd1bfeb9978acf = []byte{
	// 751 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x4f, 0xf3, 0x46,
	0x10, 0x8e, 0xf3, 0x41, 0xe2, 0x4d, 0x42, 0xd1, 0x02, 0xc5, 0xa2, 0x25, 0x71, 0x5d, 0x89, 0xe6,
	0xd0, 0x26, 0x12, 0x95, 0x7a, 0xe8, 0xa9, 0x8d, 0x68, 0x0b, 0x52, 0x55, 0x60, 0xa3, 0x72, 0xe0,
	0xe2, 0x6e, 0xec, 0xb5, 0xb3, 0x62, 0xe3, 0x35, 0xbb, 0x76, 0x54, 0xf7, 0x57, 0xf4, 0x2f, 0xb5,
	0x27, 0x8e, 0x1c, 0xab, 0x1e, 0x22, 0x04, 0xff, 0xe0, 0xfd, 0x05, 0xaf, 0x76, 0xed, 0x7c, 0xbc,
	0x10, 0xbd, 0x12, 0xa7, 0xdd, 0x79, 0x66, 0xe6, 0x19, 0xcf, 0x33, 0xe3, 0x05, 0xbb, 0x31, 0xa6,
	0x82, 0x46, 0xe1, 0x40, 0x10, 0x86, 0xb3, 0x7e, 0x2c, 0x78, 0xc2, 0xe1, 0x1e, 0xc3, 0x33, 0x1c,
	0x91, 0xa4, 0xaf, 0xce, 0x7e, 0x11, 0x71, 0xb8, 0x17, 0xf2, 0x90, 0xeb, 0x80, 0x81, 0xba, 0xe5,
	0xb1, 0xce, 0x43, 0x05, 0xb4, 0x90, 0xca, 0x45, 0xe4, 0x2e, 0x25, 0x32, 0x81, 0x16, 0xa8, 0x7b,
	0x13, 0x4c, 0xa3, 0xf3, 0x53, 0xcb, 0xb0, 0x8d, 0x9e, 0x89, 0x16, 0x26, 0xdc, 0x07, 0x5b, 0x38,
	0xa6, 0x2e, 0xf5, 0xad, 0xb2, 0x6d, 0xf4, 0xda, 0xa8, 0x86, 0x63, 0x7a, 0xee, 0xc3, 0x03, 0x50,
	0x57, 0x70, 0x2a, 0x98, 0x55, 0xd1, 0x09, 0x2a, 0xea, 0x77, 0xc1, 0xe0, 0x11, 0x00, 0x92, 0x48,
	0x49, 0x79, 0xa4, 0x72, 0xaa, 0xb6, 0xd1, 0xab, 0x22, 0xb3, 0x40, 0xce, 0x7d, 0x45, 0xe7, 0xa5,
	0xae, 0x4c, 0xa7, 0x56, 0x4d, 0xbb, 0x6a, 0x5e, 0x3a, 0x4a, 0xa7, 0x10, 0x82, 0xaa, 0x8f, 0x13,
	0x6c, 0x6d, 0xd9, 0x46, 0xaf, 0x85, 0xf4, 0x1d, 0xee, 0x80, 0x8a, 0xa4, 0xa1, 0x55, 0xd7, 0x90,
	0xba, 0xc2, 0x43, 0xd0, 0x88, 0x05, 0x9f, 0x51, 0x9f, 0x08, 0xab, 0xa1, 0xab, 0x2e, 0x6d, 0xf8,
	0x05, 0x68, 0x8d, 0x19, 0xf7, 0x6e, 0xdd, 0x09, 0xa1, 0xe1, 0x24, 0xb1, 0x4c, 0xdb, 0xe8, 0x55,
	0x50, 0x53, 0x63, 0x67, 0x1a, 0x82, 0x9f, 0x01, 0x53, 0x0b, 0xe6, 0x46, 0xe9, 0xd4, 0x02, 0xba,
	0x7c, 0x43, 0x03, 0xbf, 0xa5, 0x53, 0xf8, 0x25, 0x68, 0x8b, 0x5c, 0x0c, 0x57, 0xe7, 0x58, 0x4d,
	0x4d, 0xd0, 0x2a, 0xc0, 0xa1, 0xc2, 0xe0, 0x2f, 0xe0, 0x93, 0x53, 0x9c, 0x60, 0x44, 0x18, 0xc5,
	0x63, 0xca, 0x68, 0x92, 0x59, 0x2d, 0xdb, 0xe8, 0x35, 0x4f, 0x8e, 0xfa, 0x9b, 0xd4, 0xef, 0x5f,
	0xa3, 0x9f, 0x75, 0xfc, 0xcb, 0x2c, 0x78, 0x09, 0xcc, 0x2b, 0x3e, 0x42, 0x24, 0xe6, 0x22, 0xb1,
	0xda, 0x9a, 0xe2, 0xeb, 0xcd, 0x14, 0x57, 0x29, 0x56, 0x19, 0x17, 0xc1, 0x88, 0x88, 0x19, 0xf5,
	0x48, 0x9e, 0x33, 0xac, 0xde, 0xcf, 0xbb, 0x06, 0x5a, 0x91, 0x38, 0xff, 0x1a, 0x00, 0x14, 0x23,
	0x8d, 0x59, 0xb6, 0x14, 0xd4, 0x78, 0x2d, 0x68, 0x79, 0x25, 0xe8, 0x1e, 0xa8, 0x45, 0x3c, 0xf2,
	0x88, 0x9e, 0x61, 0x1b, 0xe5, 0x86, 0x92, 0x92, 0xe1, 0x64, 0xa5, 0x44, 0x35, 0x97, 0x32, 0xc7,
	0x72, 0x21, 0xbe, 0x03, 0x07, 0x01, 0x8d, 0x30, 0xa3, 0x7f, 0x11, 0x3f, 0x8f, 0x92, 0xee, 0x04,
	0xcb, 0x09, 0x91, 0x7a, 0xae, 0x2d, 0xb4, 0xbf, 0x74, 0xeb, 0x04, 0x79, 0xa6, 0x9d, 0x7a, 0x3b,
	0x68, 0x58, 0x64, 0x14, 0xd3, 0x36, 0x25, 0x0d, 0xf3, 0x20, 0xe7, 0xd1, 0x00, 0xf5, 0x42, 0x33,
	0x78, 0x0c, 0xb6, 0x7d, 0x1a, 0x04, 0x44, 0x90, 0x28, 0xa1, 0x38, 0xe1, 0x42, 0xf7, 0xd2, 0x40,
	0x2f, 0x50, 0x35, 0xd5, 0x99, 0x08, 0xdc, 0x19, 0x66, 0x29, 0x29, 0x7a, 0x6b, 0xcc, 0x44, 0x70,
	0xad, 0xec, 0x85, 0x33, 0x16, 0x9c, 0x07, 0xba, 0xc9, 0xdc, 0x79, 0xa9, 0x6c, 0xd5, 0xe7, 0x62,
	0x7d, 0x5c, 0x25, 0x4c, 0x55, 0xfb, 0x9b, 0x0b, 0x6c, 0x44, 0x43, 0x68, 0x83, 0x26, 0x66, 0x4c,
	0x7d, 0x8f, 0x6a, 0xa0, 0xe8, 0x6d, 0x1d, 0x82, 0x9f, 0x03, 0xf3, 0x2e, 0x25, 0x22, 0xd3, 0xfe,
	0xa2, 0xa1, 0x25, 0xf0, 0x7a, 0x87, 0x9d, 0x7f, 0xca, 0xe0, 0xd3, 0xcd, 0x33, 0x85, 0x37, 0xa0,
	0xae, 0x34, 0x8e, 0xbc, 0x2c, 0xff, 0x09, 0x87, 0x3f, 0xdc, 0xcf, 0xbb, 0xa5, 0xff, 0xe7, 0xdd,
	0xe3, 0x90, 0x26, 0x93, 0x74, 0xdc, 0xf7, 0xf8, 0x74, 0xe0, 0x71, 0x39, 0xe5, 0xb2, 0x38, 0xbe,
	0x91, 0xfe, 0xed, 0x20, 0xc9, 0x62, 0x22, 0xfb, 0xa7, 0xc4, 0x7b, 0x37, 0xef, 0x6e, 0x67, 0x78,
	0xca, 0xbe, 0x77, 0x7e, 0xcd, 0x69, 0x1c, 0xb4, 0x20, 0x84, 0x14, 0xb4, 0xf0, 0x0c, 0x53, 0xb6,
	0x58, 0xdb, 0xb2, 0x2e, 0xf0, 0xd3, 0x9b, 0x0b, 0xec, 0xe6, 0x05, 0xd6, 0xb9, 0x1c, 0xf4, 0x01,
	0x35, 0xfc, 0x03, 0x98, 0x81, 0x20, 0x72, 0x12, 0x11, 0x29, 0xf3, 0xc7, 0x61, 0x38, 0x7c, 0x73,
	0x9d, 0x9d, 0xbc, 0xce, 0x92, 0xc8, 0x41, 0x2b, 0xd2, 0x93, 0x1b, 0x50, 0xd7, 0xab, 0x4e, 0x04,
	0xbc, 0x00, 0x35, 0x7d, 0x85, 0xce, 0xe6, 0xdf, 0x67, 0xfd, 0x95, 0x3b, 0xb4, 0x3f, 0x1a, 0x13,
	0xb3, 0xcc, 0x29, 0x0d, 0x7f, 0xbc, 0x7f, 0xea, 0x18, 0x0f, 0x4f, 0x1d, 0xe3, 0xf1, 0xa9, 0x63,
	0xfc, 0xfd, 0xdc, 0x29, 0x3d, 0x3c, 0x77, 0x4a, 0xff, 0x3d, 0x77, 0x4a, 0x37, 0x5f, 0xad, 0x7d,
	0x7c, 0xc1, 0xa3, 0xcf, 0xc1, 0x9f, 0x83, 0xc5, 0x7b, 0xac, 0x3b, 0x18, 0x6f, 0xe9, 0x47, 0xf6,
	0xdb, 0xf7, 0x01, 0x00, 0x00, 0xff, 0xff, 0x05, 0x7f, 0xc2, 0x46, 0xa7, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RelayerClient is the client API for Relayer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RelayerClient interface {
	Relay(ctx context.Context, in *RelayRequest, opts ...grpc.CallOption) (*RelayReply, error)
}

type relayerClient struct {
	cc grpc1.ClientConn
}

func NewRelayerClient(cc grpc1.ClientConn) RelayerClient {
	return &relayerClient{cc}
}

func (c *relayerClient) Relay(ctx context.Context, in *RelayRequest, opts ...grpc.CallOption) (*RelayReply, error) {
	out := new(RelayReply)
	err := c.cc.Invoke(ctx, "/lavanet.lava.pairing.Relayer/Relay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayerServer is the server API for Relayer service.
type RelayerServer interface {
	Relay(context.Context, *RelayRequest) (*RelayReply, error)
}

// UnimplementedRelayerServer can be embedded to have forward compatible implementations.
type UnimplementedRelayerServer struct {
}

func (*UnimplementedRelayerServer) Relay(ctx context.Context, req *RelayRequest) (*RelayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Relay not implemented")
}

func RegisterRelayerServer(s grpc1.Server, srv RelayerServer) {
	s.RegisterService(&_Relayer_serviceDesc, srv)
}

func _Relayer_Relay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerServer).Relay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.pairing.Relayer/Relay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerServer).Relay(ctx, req.(*RelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Relayer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lavanet.lava.pairing.Relayer",
	HandlerType: (*RelayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Relay",
			Handler:    _Relayer_Relay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pairing/relay.proto",
}

func (m *RelayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QoSReport != nil {
		{
			size, err := m.QoSReport.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelay(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.DataReliability != nil {
		{
			size, err := m.DataReliability.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelay(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.RequestBlock != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.RequestBlock))
		i--
		dAtA[i] = 0x58
	}
	if m.RelayNum != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.RelayNum))
		i--
		dAtA[i] = 0x50
	}
	if m.BlockHeight != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x32
	}
	if m.CuSum != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.CuSum))
		i--
		dAtA[i] = 0x28
	}
	if m.SessionId != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ApiUrl) > 0 {
		i -= len(m.ApiUrl)
		copy(dAtA[i:], m.ApiUrl)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.ApiUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ApiId != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.ApiId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelayReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SigBlocks) > 0 {
		i -= len(m.SigBlocks)
		copy(dAtA[i:], m.SigBlocks)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.SigBlocks)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FinalizedBlocksHashes) > 0 {
		i -= len(m.FinalizedBlocksHashes)
		copy(dAtA[i:], m.FinalizedBlocksHashes)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.FinalizedBlocksHashes)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LatestBlock != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.LatestBlock))
		i--
		dAtA[i] = 0x20
	}
	if m.Nonce != 0 {
		i = encodeVarintRelay(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VRFData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VRFData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VRFData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.QueryHash) > 0 {
		i -= len(m.QueryHash)
		copy(dAtA[i:], m.QueryHash)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.QueryHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AllDataHash) > 0 {
		i -= len(m.AllDataHash)
		copy(dAtA[i:], m.AllDataHash)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.AllDataHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProviderSig) > 0 {
		i -= len(m.ProviderSig)
		copy(dAtA[i:], m.ProviderSig)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.ProviderSig)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VrfProof) > 0 {
		i -= len(m.VrfProof)
		copy(dAtA[i:], m.VrfProof)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.VrfProof)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VrfValue) > 0 {
		i -= len(m.VrfValue)
		copy(dAtA[i:], m.VrfValue)
		i = encodeVarintRelay(dAtA, i, uint64(len(m.VrfValue)))
		i--
		dAtA[i] = 0x12
	}
	if m.Differentiator {
		i--
		if m.Differentiator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QualityOfServiceReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QualityOfServiceReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QualityOfServiceReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Freshness.Size()
		i -= size
		if _, err := m.Freshness.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRelay(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Availability.Size()
		i -= size
		if _, err := m.Availability.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRelay(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Latency.Size()
		i -= size
		if _, err := m.Latency.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRelay(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintRelay(dAtA []byte, offset int, v uint64) int {
	offset -= sovRelay(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RelayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	if m.ApiId != 0 {
		n += 1 + sovRelay(uint64(m.ApiId))
	}
	l = len(m.ApiUrl)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	if m.SessionId != 0 {
		n += 1 + sovRelay(uint64(m.SessionId))
	}
	if m.CuSum != 0 {
		n += 1 + sovRelay(uint64(m.CuSum))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovRelay(uint64(m.BlockHeight))
	}
	if m.RelayNum != 0 {
		n += 1 + sovRelay(uint64(m.RelayNum))
	}
	if m.RequestBlock != 0 {
		n += 1 + sovRelay(uint64(m.RequestBlock))
	}
	if m.DataReliability != nil {
		l = m.DataReliability.Size()
		n += 1 + l + sovRelay(uint64(l))
	}
	if m.QoSReport != nil {
		l = m.QoSReport.Size()
		n += 1 + l + sovRelay(uint64(l))
	}
	return n
}

func (m *RelayReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovRelay(uint64(m.Nonce))
	}
	if m.LatestBlock != 0 {
		n += 1 + sovRelay(uint64(m.LatestBlock))
	}
	l = len(m.FinalizedBlocksHashes)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.SigBlocks)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	return n
}

func (m *VRFData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Differentiator {
		n += 2
	}
	l = len(m.VrfValue)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.VrfProof)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.ProviderSig)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.AllDataHash)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.QueryHash)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovRelay(uint64(l))
	}
	return n
}

func (m *QualityOfServiceReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Latency.Size()
	n += 1 + l + sovRelay(uint64(l))
	l = m.Availability.Size()
	n += 1 + l + sovRelay(uint64(l))
	l = m.Freshness.Size()
	n += 1 + l + sovRelay(uint64(l))
	return n
}

func sovRelay(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRelay(x uint64) (n int) {
	return sovRelay(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RelayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiId", wireType)
			}
			m.ApiId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CuSum", wireType)
			}
			m.CuSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CuSum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayNum", wireType)
			}
			m.RelayNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelayNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestBlock", wireType)
			}
			m.RequestBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataReliability", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataReliability == nil {
				m.DataReliability = &VRFData{}
			}
			if err := m.DataReliability.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QoSReport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QoSReport == nil {
				m.QoSReport = &QualityOfServiceReport{}
			}
			if err := m.QoSReport.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlock", wireType)
			}
			m.LatestBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedBlocksHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalizedBlocksHashes = append(m.FinalizedBlocksHashes[:0], dAtA[iNdEx:postIndex]...)
			if m.FinalizedBlocksHashes == nil {
				m.FinalizedBlocksHashes = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigBlocks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigBlocks = append(m.SigBlocks[:0], dAtA[iNdEx:postIndex]...)
			if m.SigBlocks == nil {
				m.SigBlocks = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VRFData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VRFData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VRFData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Differentiator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Differentiator = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfValue = append(m.VrfValue[:0], dAtA[iNdEx:postIndex]...)
			if m.VrfValue == nil {
				m.VrfValue = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfProof = append(m.VrfProof[:0], dAtA[iNdEx:postIndex]...)
			if m.VrfProof == nil {
				m.VrfProof = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProviderSig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProviderSig = append(m.ProviderSig[:0], dAtA[iNdEx:postIndex]...)
			if m.ProviderSig == nil {
				m.ProviderSig = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllDataHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllDataHash = append(m.AllDataHash[:0], dAtA[iNdEx:postIndex]...)
			if m.AllDataHash == nil {
				m.AllDataHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryHash = append(m.QueryHash[:0], dAtA[iNdEx:postIndex]...)
			if m.QueryHash == nil {
				m.QueryHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QualityOfServiceReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QualityOfServiceReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QualityOfServiceReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Latency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Availability", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Availability.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Freshness", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelay
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelay
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Freshness.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelay(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelay
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRelay
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRelay
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRelay
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRelay        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelay          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRelay = fmt.Errorf("proto: unexpected end of group")
)
