// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lavanet/lava/pairing/provider_qos.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProviderQos struct {
	Provider      string                 `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	QosExcellence QualityOfServiceReport `protobuf:"bytes,2,opt,name=qos_excellence,json=qosExcellence,proto3" json:"qos_excellence"`
}

func (m *ProviderQos) Reset()         { *m = ProviderQos{} }
func (m *ProviderQos) String() string { return proto.CompactTextString(m) }
func (*ProviderQos) ProtoMessage()    {}
func (*ProviderQos) Descriptor() ([]byte, []int) {
	return fileDescriptor_4002a5ae098b5f6a, []int{0}
}
func (m *ProviderQos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderQos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderQos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderQos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderQos.Merge(m, src)
}
func (m *ProviderQos) XXX_Size() int {
	return m.Size()
}
func (m *ProviderQos) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderQos.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderQos proto.InternalMessageInfo

func (m *ProviderQos) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *ProviderQos) GetQosExcellence() QualityOfServiceReport {
	if m != nil {
		return m.QosExcellence
	}
	return QualityOfServiceReport{}
}

func init() {
	proto.RegisterType((*ProviderQos)(nil), "lavanet.lava.pairing.ProviderQos")
}

func init() {
	proto.RegisterFile("lavanet/lava/pairing/provider_qos.proto", fileDescriptor_4002a5ae098b5f6a)
}

var fileDescriptor_4002a5ae098b5f6a = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8f, 0xc1, 0x4a, 0xc3, 0x40,
	0x18, 0x84, 0xb3, 0x22, 0xa2, 0x29, 0x7a, 0x28, 0x3d, 0x94, 0x1c, 0xd6, 0xe0, 0xa5, 0x3d, 0xc8,
	0x2e, 0xe8, 0x13, 0x58, 0xf0, 0xac, 0x8d, 0x27, 0xbd, 0x94, 0x4d, 0xfc, 0xbb, 0x2e, 0xac, 0xf9,
	0x37, 0x9b, 0x4d, 0x6c, 0xee, 0x3e, 0x80, 0x8f, 0xd5, 0x63, 0x8f, 0x9e, 0x44, 0x92, 0x17, 0x91,
	0xc4, 0x18, 0x10, 0x7a, 0x9a, 0x7f, 0xe0, 0x63, 0xfe, 0x19, 0x7f, 0xa6, 0x45, 0x29, 0x52, 0x70,
	0xbc, 0x55, 0x6e, 0x84, 0xb2, 0x2a, 0x95, 0xdc, 0x58, 0x2c, 0xd5, 0x33, 0xd8, 0x55, 0x86, 0x39,
	0x33, 0x16, 0x1d, 0x8e, 0x27, 0x3d, 0xc8, 0x5a, 0x65, 0x3d, 0x18, 0x4c, 0x24, 0x4a, 0xec, 0x00,
	0xde, 0x5e, 0xbf, 0x6c, 0x10, 0xee, 0x0d, 0xb5, 0xa0, 0x45, 0xd5, 0x13, 0x54, 0x22, 0x4a, 0x0d,
	0xbc, 0x73, 0x71, 0xb1, 0xe6, 0x6f, 0x56, 0x18, 0x03, 0xb6, 0xff, 0x76, 0xf1, 0x4e, 0xfc, 0xd1,
	0x7d, 0x5f, 0x62, 0x89, 0xf9, 0x38, 0xf0, 0x8f, 0xff, 0x3a, 0x4d, 0x49, 0x48, 0xe6, 0x27, 0xd1,
	0xe0, 0xc7, 0x8f, 0xfe, 0x59, 0x86, 0xf9, 0x0a, 0x36, 0x09, 0x68, 0x0d, 0x69, 0x02, 0xd3, 0x83,
	0x90, 0xcc, 0x47, 0x57, 0x97, 0x6c, 0x5f, 0x65, 0xb6, 0x2c, 0x84, 0x56, 0xae, 0xba, 0x5b, 0x3f,
	0x80, 0x2d, 0x55, 0x02, 0x11, 0x18, 0xb4, 0x6e, 0x71, 0xb8, 0xfd, 0x3a, 0xf7, 0xa2, 0xd3, 0x0c,
	0xf3, 0xdb, 0x21, 0x68, 0x71, 0xb3, 0xad, 0x29, 0xd9, 0xd5, 0x94, 0x7c, 0xd7, 0x94, 0x7c, 0x34,
	0xd4, 0xdb, 0x35, 0xd4, 0xfb, 0x6c, 0xa8, 0xf7, 0x34, 0x93, 0xca, 0xbd, 0x14, 0x31, 0x4b, 0xf0,
	0x95, 0xff, 0x5b, 0xbb, 0x19, 0xf6, 0xba, 0xca, 0x40, 0x1e, 0x1f, 0x75, 0x83, 0xae, 0x7f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x0f, 0x8f, 0x0c, 0x6b, 0x69, 0x01, 0x00, 0x00,
}

func (m *ProviderQos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderQos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderQos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.QosExcellence.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProviderQos(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Provider) > 0 {
		i -= len(m.Provider)
		copy(dAtA[i:], m.Provider)
		i = encodeVarintProviderQos(dAtA, i, uint64(len(m.Provider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProviderQos(dAtA []byte, offset int, v uint64) int {
	offset -= sovProviderQos(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProviderQos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provider)
	if l > 0 {
		n += 1 + l + sovProviderQos(uint64(l))
	}
	l = m.QosExcellence.Size()
	n += 1 + l + sovProviderQos(uint64(l))
	return n
}

func sovProviderQos(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProviderQos(x uint64) (n int) {
	return sovProviderQos(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProviderQos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProviderQos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderQos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderQos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProviderQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProviderQos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProviderQos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QosExcellence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProviderQos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProviderQos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProviderQos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.QosExcellence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProviderQos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProviderQos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProviderQos(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProviderQos
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProviderQos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProviderQos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProviderQos
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProviderQos
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProviderQos
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProviderQos        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProviderQos          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProviderQos = fmt.Errorf("proto: unexpected end of group")
)
