// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pairing/compute_units_range_list.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CUListMessage struct {
	CUList []*CURange `protobuf:"bytes,1,rep,name=CUList,proto3" json:"CUList,omitempty"`
}

func (m *CUListMessage) Reset()         { *m = CUListMessage{} }
func (m *CUListMessage) String() string { return proto.CompactTextString(m) }
func (*CUListMessage) ProtoMessage()    {}
func (*CUListMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_330266194c8343f0, []int{0}
}
func (m *CUListMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CUListMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CUListMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CUListMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CUListMessage.Merge(m, src)
}
func (m *CUListMessage) XXX_Size() int {
	return m.Size()
}
func (m *CUListMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CUListMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CUListMessage proto.InternalMessageInfo

func (m *CUListMessage) GetCUList() []*CURange {
	if m != nil {
		return m.CUList
	}
	return nil
}

type CURange struct {
	LowerStake   uint64 `protobuf:"varint,1,opt,name=LowerStake,proto3" json:"LowerStake,omitempty"`
	UpperStake   uint64 `protobuf:"varint,2,opt,name=UpperStake,proto3" json:"UpperStake,omitempty"`
	ComputeUnits uint64 `protobuf:"varint,3,opt,name=ComputeUnits,proto3" json:"ComputeUnits,omitempty"`
}

func (m *CURange) Reset()         { *m = CURange{} }
func (m *CURange) String() string { return proto.CompactTextString(m) }
func (*CURange) ProtoMessage()    {}
func (*CURange) Descriptor() ([]byte, []int) {
	return fileDescriptor_330266194c8343f0, []int{1}
}
func (m *CURange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CURange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CURange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CURange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CURange.Merge(m, src)
}
func (m *CURange) XXX_Size() int {
	return m.Size()
}
func (m *CURange) XXX_DiscardUnknown() {
	xxx_messageInfo_CURange.DiscardUnknown(m)
}

var xxx_messageInfo_CURange proto.InternalMessageInfo

func (m *CURange) GetLowerStake() uint64 {
	if m != nil {
		return m.LowerStake
	}
	return 0
}

func (m *CURange) GetUpperStake() uint64 {
	if m != nil {
		return m.UpperStake
	}
	return 0
}

func (m *CURange) GetComputeUnits() uint64 {
	if m != nil {
		return m.ComputeUnits
	}
	return 0
}

func init() {
	proto.RegisterType((*CUListMessage)(nil), "lavanet.lava.pairing.CUListMessage")
	proto.RegisterType((*CURange)(nil), "lavanet.lava.pairing.CURange")
}

func init() {
	proto.RegisterFile("pairing/compute_units_range_list.proto", fileDescriptor_330266194c8343f0)
}

var fileDescriptor_330266194c8343f0 = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2b, 0x48, 0xcc, 0x2c,
	0xca, 0xcc, 0x4b, 0xd7, 0x4f, 0xce, 0xcf, 0x2d, 0x28, 0x2d, 0x49, 0x8d, 0x2f, 0xcd, 0xcb, 0x2c,
	0x29, 0x8e, 0x2f, 0x4a, 0xcc, 0x4b, 0x4f, 0x8d, 0xcf, 0xc9, 0x2c, 0x2e, 0xd1, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x12, 0xc9, 0x49, 0x2c, 0x4b, 0xcc, 0x4b, 0x2d, 0xd1, 0x03, 0xd1, 0x7a, 0x50,
	0x4d, 0x4a, 0x6e, 0x5c, 0xbc, 0xce, 0xa1, 0x3e, 0x99, 0xc5, 0x25, 0xbe, 0xa9, 0xc5, 0xc5, 0x89,
	0xe9, 0xa9, 0x42, 0xa6, 0x5c, 0x6c, 0x10, 0x01, 0x09, 0x46, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x59,
	0x3d, 0x6c, 0xfa, 0xf4, 0x9c, 0x43, 0x83, 0x40, 0x16, 0x04, 0x41, 0x15, 0x2b, 0xe5, 0x72, 0xb1,
	0x43, 0x85, 0x84, 0xe4, 0xb8, 0xb8, 0x7c, 0xf2, 0xcb, 0x53, 0x8b, 0x82, 0x4b, 0x12, 0xb3, 0x53,
	0x25, 0x18, 0x15, 0x18, 0x35, 0x58, 0x82, 0x90, 0x44, 0x40, 0xf2, 0xa1, 0x05, 0x05, 0x30, 0x79,
	0x26, 0x88, 0x3c, 0x42, 0x44, 0x48, 0x89, 0x8b, 0xc7, 0x19, 0xe2, 0x95, 0x50, 0x90, 0x4f, 0x24,
	0x98, 0xc1, 0x2a, 0x50, 0xc4, 0x9c, 0x1c, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1,
	0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e,
	0x21, 0x4a, 0x3d, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x1f, 0xea, 0x72,
	0x30, 0xad, 0x5f, 0xa1, 0x0f, 0x0b, 0xa8, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0x70, 0xb0,
	0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x51, 0x6b, 0x76, 0xa2, 0x40, 0x01, 0x00, 0x00,
}

func (m *CUListMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CUListMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CUListMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CUList) > 0 {
		for iNdEx := len(m.CUList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CUList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintComputeUnitsRangeList(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CURange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CURange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CURange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ComputeUnits != 0 {
		i = encodeVarintComputeUnitsRangeList(dAtA, i, uint64(m.ComputeUnits))
		i--
		dAtA[i] = 0x18
	}
	if m.UpperStake != 0 {
		i = encodeVarintComputeUnitsRangeList(dAtA, i, uint64(m.UpperStake))
		i--
		dAtA[i] = 0x10
	}
	if m.LowerStake != 0 {
		i = encodeVarintComputeUnitsRangeList(dAtA, i, uint64(m.LowerStake))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintComputeUnitsRangeList(dAtA []byte, offset int, v uint64) int {
	offset -= sovComputeUnitsRangeList(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CUListMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CUList) > 0 {
		for _, e := range m.CUList {
			l = e.Size()
			n += 1 + l + sovComputeUnitsRangeList(uint64(l))
		}
	}
	return n
}

func (m *CURange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LowerStake != 0 {
		n += 1 + sovComputeUnitsRangeList(uint64(m.LowerStake))
	}
	if m.UpperStake != 0 {
		n += 1 + sovComputeUnitsRangeList(uint64(m.UpperStake))
	}
	if m.ComputeUnits != 0 {
		n += 1 + sovComputeUnitsRangeList(uint64(m.ComputeUnits))
	}
	return n
}

func sovComputeUnitsRangeList(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComputeUnitsRangeList(x uint64) (n int) {
	return sovComputeUnitsRangeList(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CUListMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComputeUnitsRangeList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CUListMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CUListMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CUList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeUnitsRangeList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthComputeUnitsRangeList
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthComputeUnitsRangeList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CUList = append(m.CUList, &CURange{})
			if err := m.CUList[len(m.CUList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComputeUnitsRangeList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComputeUnitsRangeList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CURange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComputeUnitsRangeList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CURange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CURange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerStake", wireType)
			}
			m.LowerStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeUnitsRangeList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerStake |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperStake", wireType)
			}
			m.UpperStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeUnitsRangeList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperStake |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputeUnits", wireType)
			}
			m.ComputeUnits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComputeUnitsRangeList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ComputeUnits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipComputeUnitsRangeList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComputeUnitsRangeList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComputeUnitsRangeList(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComputeUnitsRangeList
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComputeUnitsRangeList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComputeUnitsRangeList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComputeUnitsRangeList
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComputeUnitsRangeList
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComputeUnitsRangeList
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComputeUnitsRangeList        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComputeUnitsRangeList          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComputeUnitsRangeList = fmt.Errorf("proto: unexpected end of group")
)
