// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pairing/params.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	MinStakeProvider         uint64                                 `protobuf:"varint,1,opt,name=minStakeProvider,proto3" json:"minStakeProvider,omitempty" yaml:"min_stake_provider"`
	MinStakeClient           uint64                                 `protobuf:"varint,2,opt,name=minStakeClient,proto3" json:"minStakeClient,omitempty" yaml:"min_stake_client"`
	MintCoinsPerCU           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=mintCoinsPerCU,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"mintCoinsPerCU" yaml:"mint_coins_per_cu"`
	BurnCoinsPerCU           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=burnCoinsPerCU,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"burnCoinsPerCU" yaml:"burn_coins_per_cu"`
	FraudStakeSlashingFactor github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=fraudStakeSlashingFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fraudStakeSlashingFactor" yaml:"fraud_stake_slashing_factor"`
	FraudSlashingAmount      uint64                                 `protobuf:"varint,6,opt,name=fraudSlashingAmount,proto3" json:"fraudSlashingAmount,omitempty" yaml:"fraud_slashing_amount"`
	ServicersToPairCount     uint64                                 `protobuf:"varint,7,opt,name=servicersToPairCount,proto3" json:"servicersToPairCount,omitempty" yaml:"servicers_to_pair_count"`
	EpochBlocksOverlap       uint64                                 `protobuf:"varint,8,opt,name=epochBlocksOverlap,proto3" json:"epochBlocksOverlap,omitempty" yaml:"epoch_blocks_overlap"`
	StakeToMaxCUList         StakeToMaxCUList                       `protobuf:"bytes,9,opt,name=stakeToMaxCUList,proto3,customtype=StakeToMaxCUList" json:"stakeToMaxCUList" yaml:"stake_to_computeunits_list"`
	UnpayLimit               github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=unpayLimit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"unpayLimit" yaml:"unpay_limit"`
	SlashLimit               github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=slashLimit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slashLimit" yaml:"slash_limit"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_72cc734580d3bc3a, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMinStakeProvider() uint64 {
	if m != nil {
		return m.MinStakeProvider
	}
	return 0
}

func (m *Params) GetMinStakeClient() uint64 {
	if m != nil {
		return m.MinStakeClient
	}
	return 0
}

func (m *Params) GetFraudSlashingAmount() uint64 {
	if m != nil {
		return m.FraudSlashingAmount
	}
	return 0
}

func (m *Params) GetServicersToPairCount() uint64 {
	if m != nil {
		return m.ServicersToPairCount
	}
	return 0
}

func (m *Params) GetEpochBlocksOverlap() uint64 {
	if m != nil {
		return m.EpochBlocksOverlap
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "lavanet.lava.pairing.Params")
}

func init() { proto.RegisterFile("pairing/params.proto", fileDescriptor_72cc734580d3bc3a) }

var fileDescriptor_72cc734580d3bc3a = []byte{
	// 575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x41, 0x6f, 0xd3, 0x3c,
	0x18, 0xc7, 0x9b, 0xf7, 0x1d, 0x63, 0x33, 0x12, 0x9a, 0x4c, 0x25, 0x02, 0x83, 0x64, 0xe4, 0x00,
	0xbb, 0xd0, 0x1c, 0xb8, 0x4d, 0xe2, 0xb0, 0x66, 0x42, 0x02, 0x0d, 0xad, 0xca, 0x3a, 0x0e, 0x5c,
	0x2c, 0xd7, 0xf5, 0x5a, 0xab, 0x49, 0x1c, 0xd9, 0x4e, 0xb5, 0x7e, 0x8b, 0x1d, 0x39, 0xf2, 0x71,
	0x76, 0x41, 0xda, 0x11, 0x71, 0x88, 0x50, 0xfb, 0x0d, 0xf2, 0x09, 0x50, 0x9e, 0xa4, 0xa5, 0xeb,
	0xca, 0x61, 0xda, 0xc9, 0x91, 0xfd, 0x7f, 0x7e, 0xbf, 0xc4, 0x4f, 0xf4, 0xa0, 0x66, 0x4a, 0x85,
	0x12, 0xc9, 0xc0, 0x4f, 0xa9, 0xa2, 0xb1, 0x6e, 0xa5, 0x4a, 0x1a, 0x89, 0x9b, 0x11, 0x1d, 0xd3,
	0x84, 0x9b, 0x56, 0xb9, 0xb6, 0xea, 0xc8, 0xf3, 0xe6, 0x40, 0x0e, 0x24, 0x04, 0xfc, 0xf2, 0xa9,
	0xca, 0x7a, 0x3f, 0xb6, 0xd0, 0x66, 0x07, 0x8a, 0xf1, 0x47, 0xb4, 0x13, 0x8b, 0xe4, 0xd4, 0xd0,
	0x11, 0xef, 0x28, 0x39, 0x16, 0x7d, 0xae, 0x6c, 0x6b, 0xcf, 0xda, 0xdf, 0x68, 0xbf, 0x2c, 0x72,
	0xf7, 0xd9, 0x84, 0xc6, 0xd1, 0x81, 0x17, 0x8b, 0x84, 0xe8, 0x32, 0x42, 0xd2, 0x3a, 0xe3, 0x85,
	0xb7, 0xca, 0x70, 0x80, 0x1e, 0xcf, 0xf7, 0x82, 0x48, 0xf0, 0xc4, 0xd8, 0xff, 0x01, 0x68, 0xb7,
	0xc8, 0xdd, 0xa7, 0xab, 0x20, 0x06, 0x09, 0x2f, 0x5c, 0x29, 0xc1, 0x0a, 0x20, 0x26, 0x90, 0x22,
	0xd1, 0x1d, 0xae, 0x82, 0x33, 0xfb, 0xff, 0x3d, 0x6b, 0x7f, 0xbb, 0xfd, 0xe9, 0x2a, 0x77, 0x1b,
	0xbf, 0x72, 0xf7, 0xf5, 0x40, 0x98, 0x61, 0xd6, 0x6b, 0x31, 0x19, 0xfb, 0x4c, 0xea, 0x58, 0xea,
	0x7a, 0x79, 0xab, 0xfb, 0x23, 0xdf, 0x4c, 0x52, 0xae, 0x5b, 0x47, 0x9c, 0x15, 0xb9, 0x6b, 0x2f,
	0x94, 0x86, 0xb0, 0x12, 0x47, 0x52, 0xae, 0x08, 0xcb, 0x2a, 0xe7, 0x92, 0xa1, 0x74, 0xf6, 0x32,
	0x95, 0x2c, 0x39, 0x37, 0xee, 0xe7, 0x2c, 0x69, 0xab, 0xce, 0x9b, 0x06, 0x7c, 0x69, 0x21, 0xfb,
	0x5c, 0xd1, 0xac, 0x0f, 0x1f, 0x7f, 0x1a, 0x51, 0x3d, 0x14, 0xc9, 0xe0, 0x03, 0x65, 0x46, 0x2a,
	0xfb, 0x01, 0xe8, 0xbb, 0x77, 0xd6, 0x7b, 0x95, 0x1e, 0xb8, 0xf5, 0x3d, 0xeb, 0x9a, 0x4c, 0xce,
	0x01, 0xed, 0x85, 0xff, 0xb4, 0xe2, 0x10, 0x3d, 0xa9, 0xce, 0xea, 0xed, 0xc3, 0x58, 0x66, 0x89,
	0xb1, 0x37, 0xa1, 0x89, 0x7b, 0x45, 0xee, 0xbe, 0xb8, 0x81, 0x9f, 0x83, 0x29, 0xc4, 0xbc, 0x70,
	0x5d, 0x31, 0xfe, 0x82, 0x9a, 0x9a, 0xab, 0xb1, 0x60, 0x5c, 0xe9, 0xae, 0xec, 0x50, 0xa1, 0x02,
	0x80, 0x3e, 0x04, 0xa8, 0x57, 0xe4, 0xae, 0x53, 0x41, 0x17, 0x29, 0x62, 0x24, 0x29, 0xff, 0x5e,
	0xc2, 0x2a, 0xec, 0xda, 0x7a, 0x7c, 0x82, 0x30, 0x4f, 0x25, 0x1b, 0xb6, 0x23, 0xc9, 0x46, 0xfa,
	0x64, 0xcc, 0x55, 0x44, 0x53, 0x7b, 0x0b, 0xa8, 0x6e, 0x91, 0xbb, 0xbb, 0x15, 0x15, 0x32, 0xa4,
	0x07, 0x21, 0x22, 0xab, 0x94, 0x17, 0xae, 0x29, 0xc5, 0x02, 0xed, 0xc0, 0x85, 0x75, 0xe5, 0x67,
	0x7a, 0x11, 0x9c, 0x1d, 0x0b, 0x6d, 0xec, 0x6d, 0x68, 0xc3, 0xfb, 0xba, 0x0d, 0x3b, 0xa7, 0x2b,
	0xe7, 0x45, 0xee, 0xbe, 0xaa, 0x5f, 0x1e, 0xae, 0xda, 0x48, 0xc2, 0x64, 0x9c, 0x66, 0x86, 0x67,
	0x89, 0x30, 0x9a, 0x44, 0x42, 0x1b, 0x2f, 0xbc, 0x85, 0xc5, 0x7d, 0x84, 0xb2, 0x24, 0xa5, 0x93,
	0x63, 0x11, 0x0b, 0x63, 0x23, 0x90, 0x1c, 0xdd, 0xb9, 0xd7, 0xb8, 0x52, 0x03, 0x89, 0x44, 0x25,
	0xca, 0x0b, 0x97, 0xb8, 0xa5, 0x05, 0x5a, 0x54, 0x59, 0x1e, 0xdd, 0xcf, 0x02, 0xa4, 0x85, 0xe5,
	0x2f, 0xf7, 0x60, 0xe3, 0xdb, 0x77, 0xb7, 0xd1, 0x3e, 0xbc, 0x9a, 0x3a, 0xd6, 0xf5, 0xd4, 0xb1,
	0x7e, 0x4f, 0x1d, 0xeb, 0x72, 0xe6, 0x34, 0xae, 0x67, 0x4e, 0xe3, 0xe7, 0xcc, 0x69, 0x7c, 0x7d,
	0xb3, 0x64, 0xaa, 0x07, 0x14, 0xac, 0xfe, 0x85, 0x3f, 0x9f, 0x62, 0xa0, 0xeb, 0x6d, 0xc2, 0x64,
	0x7a, 0xf7, 0x27, 0x00, 0x00, 0xff, 0xff, 0x42, 0xe2, 0xd4, 0x30, 0xdd, 0x04, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SlashLimit.Size()
		i -= size
		if _, err := m.SlashLimit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.UnpayLimit.Size()
		i -= size
		if _, err := m.UnpayLimit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.StakeToMaxCUList.Size()
		i -= size
		if _, err := m.StakeToMaxCUList.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.EpochBlocksOverlap != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.EpochBlocksOverlap))
		i--
		dAtA[i] = 0x40
	}
	if m.ServicersToPairCount != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ServicersToPairCount))
		i--
		dAtA[i] = 0x38
	}
	if m.FraudSlashingAmount != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.FraudSlashingAmount))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.FraudStakeSlashingFactor.Size()
		i -= size
		if _, err := m.FraudStakeSlashingFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.BurnCoinsPerCU.Size()
		i -= size
		if _, err := m.BurnCoinsPerCU.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.MintCoinsPerCU.Size()
		i -= size
		if _, err := m.MintCoinsPerCU.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.MinStakeClient != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinStakeClient))
		i--
		dAtA[i] = 0x10
	}
	if m.MinStakeProvider != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinStakeProvider))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinStakeProvider != 0 {
		n += 1 + sovParams(uint64(m.MinStakeProvider))
	}
	if m.MinStakeClient != 0 {
		n += 1 + sovParams(uint64(m.MinStakeClient))
	}
	l = m.MintCoinsPerCU.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.BurnCoinsPerCU.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.FraudStakeSlashingFactor.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.FraudSlashingAmount != 0 {
		n += 1 + sovParams(uint64(m.FraudSlashingAmount))
	}
	if m.ServicersToPairCount != 0 {
		n += 1 + sovParams(uint64(m.ServicersToPairCount))
	}
	if m.EpochBlocksOverlap != 0 {
		n += 1 + sovParams(uint64(m.EpochBlocksOverlap))
	}
	l = m.StakeToMaxCUList.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.UnpayLimit.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.SlashLimit.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStakeProvider", wireType)
			}
			m.MinStakeProvider = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinStakeProvider |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStakeClient", wireType)
			}
			m.MinStakeClient = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinStakeClient |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintCoinsPerCU", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintCoinsPerCU.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnCoinsPerCU", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnCoinsPerCU.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FraudStakeSlashingFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FraudStakeSlashingFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FraudSlashingAmount", wireType)
			}
			m.FraudSlashingAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FraudSlashingAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicersToPairCount", wireType)
			}
			m.ServicersToPairCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServicersToPairCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochBlocksOverlap", wireType)
			}
			m.EpochBlocksOverlap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochBlocksOverlap |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeToMaxCUList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakeToMaxCUList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnpayLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnpayLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
