// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lavanet/lava/pairing/relayCache.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CacheRelayReply struct {
	Reply            *RelayReply `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	OptionalMetadata []Metadata  `protobuf:"bytes,2,rep,name=optional_metadata,json=optionalMetadata,proto3" json:"optional_metadata"`
	SeenBlock        int64       `protobuf:"varint,3,opt,name=seen_block,json=seenBlock,proto3" json:"seen_block,omitempty"`
}

func (m *CacheRelayReply) Reset()         { *m = CacheRelayReply{} }
func (m *CacheRelayReply) String() string { return proto.CompactTextString(m) }
func (*CacheRelayReply) ProtoMessage()    {}
func (*CacheRelayReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_36fbab536e2bbad1, []int{0}
}
func (m *CacheRelayReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CacheRelayReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CacheRelayReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CacheRelayReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheRelayReply.Merge(m, src)
}
func (m *CacheRelayReply) XXX_Size() int {
	return m.Size()
}
func (m *CacheRelayReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheRelayReply.DiscardUnknown(m)
}

var xxx_messageInfo_CacheRelayReply proto.InternalMessageInfo

func (m *CacheRelayReply) GetReply() *RelayReply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *CacheRelayReply) GetOptionalMetadata() []Metadata {
	if m != nil {
		return m.OptionalMetadata
	}
	return nil
}

func (m *CacheRelayReply) GetSeenBlock() int64 {
	if m != nil {
		return m.SeenBlock
	}
	return 0
}

type CacheUsage struct {
	CacheHits   uint64 `protobuf:"varint,1,opt,name=CacheHits,proto3" json:"CacheHits,omitempty"`
	CacheMisses uint64 `protobuf:"varint,2,opt,name=CacheMisses,proto3" json:"CacheMisses,omitempty"`
}

func (m *CacheUsage) Reset()         { *m = CacheUsage{} }
func (m *CacheUsage) String() string { return proto.CompactTextString(m) }
func (*CacheUsage) ProtoMessage()    {}
func (*CacheUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor_36fbab536e2bbad1, []int{1}
}
func (m *CacheUsage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CacheUsage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CacheUsage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CacheUsage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheUsage.Merge(m, src)
}
func (m *CacheUsage) XXX_Size() int {
	return m.Size()
}
func (m *CacheUsage) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheUsage.DiscardUnknown(m)
}

var xxx_messageInfo_CacheUsage proto.InternalMessageInfo

func (m *CacheUsage) GetCacheHits() uint64 {
	if m != nil {
		return m.CacheHits
	}
	return 0
}

func (m *CacheUsage) GetCacheMisses() uint64 {
	if m != nil {
		return m.CacheMisses
	}
	return 0
}

// data containing the cache key hash
type CacheHash struct {
	Request *RelayPrivateData `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	ChainId string            `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *CacheHash) Reset()         { *m = CacheHash{} }
func (m *CacheHash) String() string { return proto.CompactTextString(m) }
func (*CacheHash) ProtoMessage()    {}
func (*CacheHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_36fbab536e2bbad1, []int{2}
}
func (m *CacheHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CacheHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CacheHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CacheHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CacheHash.Merge(m, src)
}
func (m *CacheHash) XXX_Size() int {
	return m.Size()
}
func (m *CacheHash) XXX_DiscardUnknown() {
	xxx_messageInfo_CacheHash.DiscardUnknown(m)
}

var xxx_messageInfo_CacheHash proto.InternalMessageInfo

func (m *CacheHash) GetRequest() *RelayPrivateData {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *CacheHash) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type RelayCacheGet struct {
	RequestHash    []byte `protobuf:"bytes,1,opt,name=request_hash,json=requestHash,proto3" json:"request_hash,omitempty"`
	BlockHash      []byte `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Finalized      bool   `protobuf:"varint,3,opt,name=finalized,proto3" json:"finalized,omitempty"`
	RequestedBlock int64  `protobuf:"varint,4,opt,name=requested_block,json=requestedBlock,proto3" json:"requested_block,omitempty"`
	SharedStateId  string `protobuf:"bytes,5,opt,name=shared_state_id,json=sharedStateId,proto3" json:"shared_state_id,omitempty"`
	ChainId        string `protobuf:"bytes,6,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	SeenBlock      int64  `protobuf:"varint,7,opt,name=seen_block,json=seenBlock,proto3" json:"seen_block,omitempty"`
}

func (m *RelayCacheGet) Reset()         { *m = RelayCacheGet{} }
func (m *RelayCacheGet) String() string { return proto.CompactTextString(m) }
func (*RelayCacheGet) ProtoMessage()    {}
func (*RelayCacheGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_36fbab536e2bbad1, []int{3}
}
func (m *RelayCacheGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayCacheGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayCacheGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayCacheGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayCacheGet.Merge(m, src)
}
func (m *RelayCacheGet) XXX_Size() int {
	return m.Size()
}
func (m *RelayCacheGet) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayCacheGet.DiscardUnknown(m)
}

var xxx_messageInfo_RelayCacheGet proto.InternalMessageInfo

func (m *RelayCacheGet) GetRequestHash() []byte {
	if m != nil {
		return m.RequestHash
	}
	return nil
}

func (m *RelayCacheGet) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *RelayCacheGet) GetFinalized() bool {
	if m != nil {
		return m.Finalized
	}
	return false
}

func (m *RelayCacheGet) GetRequestedBlock() int64 {
	if m != nil {
		return m.RequestedBlock
	}
	return 0
}

func (m *RelayCacheGet) GetSharedStateId() string {
	if m != nil {
		return m.SharedStateId
	}
	return ""
}

func (m *RelayCacheGet) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *RelayCacheGet) GetSeenBlock() int64 {
	if m != nil {
		return m.SeenBlock
	}
	return 0
}

type RelayCacheSet struct {
	RequestHash      []byte      `protobuf:"bytes,1,opt,name=request_hash,json=requestHash,proto3" json:"request_hash,omitempty"`
	BlockHash        []byte      `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Response         *RelayReply `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
	Finalized        bool        `protobuf:"varint,4,opt,name=finalized,proto3" json:"finalized,omitempty"`
	OptionalMetadata []Metadata  `protobuf:"bytes,5,rep,name=optional_metadata,json=optionalMetadata,proto3" json:"optional_metadata"`
	SharedStateId    string      `protobuf:"bytes,6,opt,name=shared_state_id,json=sharedStateId,proto3" json:"shared_state_id,omitempty"`
	RequestedBlock   int64       `protobuf:"varint,7,opt,name=requested_block,json=requestedBlock,proto3" json:"requested_block,omitempty"`
	ChainId          string      `protobuf:"bytes,9,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	SeenBlock        int64       `protobuf:"varint,10,opt,name=seen_block,json=seenBlock,proto3" json:"seen_block,omitempty"`
	AverageBlockTime int64       `protobuf:"varint,11,opt,name=average_block_time,json=averageBlockTime,proto3" json:"average_block_time,omitempty"`
	IsNodeError      bool        `protobuf:"varint,12,opt,name=is_node_error,json=isNodeError,proto3" json:"is_node_error,omitempty"`
}

func (m *RelayCacheSet) Reset()         { *m = RelayCacheSet{} }
func (m *RelayCacheSet) String() string { return proto.CompactTextString(m) }
func (*RelayCacheSet) ProtoMessage()    {}
func (*RelayCacheSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_36fbab536e2bbad1, []int{4}
}
func (m *RelayCacheSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelayCacheSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelayCacheSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelayCacheSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayCacheSet.Merge(m, src)
}
func (m *RelayCacheSet) XXX_Size() int {
	return m.Size()
}
func (m *RelayCacheSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayCacheSet.DiscardUnknown(m)
}

var xxx_messageInfo_RelayCacheSet proto.InternalMessageInfo

func (m *RelayCacheSet) GetRequestHash() []byte {
	if m != nil {
		return m.RequestHash
	}
	return nil
}

func (m *RelayCacheSet) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *RelayCacheSet) GetResponse() *RelayReply {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *RelayCacheSet) GetFinalized() bool {
	if m != nil {
		return m.Finalized
	}
	return false
}

func (m *RelayCacheSet) GetOptionalMetadata() []Metadata {
	if m != nil {
		return m.OptionalMetadata
	}
	return nil
}

func (m *RelayCacheSet) GetSharedStateId() string {
	if m != nil {
		return m.SharedStateId
	}
	return ""
}

func (m *RelayCacheSet) GetRequestedBlock() int64 {
	if m != nil {
		return m.RequestedBlock
	}
	return 0
}

func (m *RelayCacheSet) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *RelayCacheSet) GetSeenBlock() int64 {
	if m != nil {
		return m.SeenBlock
	}
	return 0
}

func (m *RelayCacheSet) GetAverageBlockTime() int64 {
	if m != nil {
		return m.AverageBlockTime
	}
	return 0
}

func (m *RelayCacheSet) GetIsNodeError() bool {
	if m != nil {
		return m.IsNodeError
	}
	return false
}

func init() {
	proto.RegisterType((*CacheRelayReply)(nil), "lavanet.lava.pairing.CacheRelayReply")
	proto.RegisterType((*CacheUsage)(nil), "lavanet.lava.pairing.CacheUsage")
	proto.RegisterType((*CacheHash)(nil), "lavanet.lava.pairing.CacheHash")
	proto.RegisterType((*RelayCacheGet)(nil), "lavanet.lava.pairing.RelayCacheGet")
	proto.RegisterType((*RelayCacheSet)(nil), "lavanet.lava.pairing.RelayCacheSet")
}

func init() {
	proto.RegisterFile("lavanet/lava/pairing/relayCache.proto", fileDescriptor_36fbab536e2bbad1)
}

var fileDescriptor_36fbab536e2bbad1 = []byte{
	// 662 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xb6, 0x9b, 0x34, 0x3f, 0x9b, 0x94, 0x96, 0x55, 0x85, 0x42, 0x68, 0x8d, 0x31, 0xea, 0xcf,
	0x01, 0xd9, 0x52, 0x91, 0x38, 0x71, 0x80, 0xd2, 0xaa, 0xad, 0x44, 0x11, 0x38, 0x20, 0x21, 0x2e,
	0xd6, 0x26, 0x9e, 0xda, 0x2b, 0x1c, 0xaf, 0xf1, 0x6e, 0x2b, 0xca, 0x53, 0xf0, 0x3e, 0xbc, 0x40,
	0x8f, 0x3d, 0x72, 0x01, 0xa1, 0xf6, 0x29, 0xe0, 0x84, 0x3c, 0x71, 0xd2, 0x24, 0x72, 0xa3, 0x4a,
	0x70, 0xf2, 0xee, 0xb7, 0xdf, 0xec, 0xcc, 0x7c, 0xdf, 0x7a, 0xc8, 0x5a, 0xc4, 0x4e, 0x58, 0x0c,
	0xca, 0xc9, 0xbe, 0x4e, 0xc2, 0x78, 0xca, 0xe3, 0xc0, 0x49, 0x21, 0x62, 0xa7, 0x2f, 0x58, 0x2f,
	0x04, 0x3b, 0x49, 0x85, 0x12, 0x74, 0x39, 0xa7, 0xd9, 0xd9, 0xd7, 0xce, 0x69, 0xed, 0xe5, 0x40,
	0x04, 0x02, 0x09, 0x4e, 0xb6, 0x1a, 0x70, 0xdb, 0xe6, 0xf5, 0x57, 0xe6, 0x8c, 0x7b, 0x81, 0x10,
	0x41, 0x04, 0x0e, 0xee, 0xba, 0xc7, 0x47, 0x0e, 0xf4, 0x13, 0x95, 0x1f, 0x5a, 0xdf, 0x74, 0xb2,
	0x88, 0xa9, 0xdd, 0x2c, 0xc2, 0x85, 0x24, 0x3a, 0xa5, 0x4f, 0xc8, 0x7c, 0x9a, 0x2d, 0x5a, 0xba,
	0xa9, 0x6f, 0x36, 0xb6, 0x4c, 0xbb, 0xa8, 0x1c, 0xfb, 0x2a, 0xc0, 0x1d, 0xd0, 0xe9, 0x1b, 0x72,
	0x5b, 0x24, 0x8a, 0x8b, 0x98, 0x45, 0x5e, 0x1f, 0x14, 0xf3, 0x99, 0x62, 0xad, 0x39, 0xb3, 0xb4,
	0xd9, 0xd8, 0x32, 0x8a, 0xef, 0x38, 0xcc, 0x59, 0xdb, 0xe5, 0xb3, 0x9f, 0xf7, 0x35, 0x77, 0x69,
	0x18, 0x3e, 0xc4, 0xe9, 0x2a, 0x21, 0x12, 0x20, 0xf6, 0xba, 0x91, 0xe8, 0x7d, 0x6c, 0x95, 0x4c,
	0x7d, 0xb3, 0xe4, 0xd6, 0x33, 0x64, 0x3b, 0x03, 0xac, 0x97, 0x84, 0x60, 0xf1, 0xef, 0x24, 0x0b,
	0x80, 0xae, 0x90, 0x3a, 0xee, 0xf6, 0xb9, 0x92, 0x58, 0x7b, 0xd9, 0xbd, 0x02, 0xa8, 0x49, 0x1a,
	0xb8, 0x39, 0xe4, 0x52, 0x82, 0x6c, 0xcd, 0xe1, 0xf9, 0x38, 0x64, 0x85, 0xc3, 0x78, 0x26, 0x43,
	0xfa, 0x8c, 0x54, 0x53, 0xf8, 0x74, 0x0c, 0x52, 0xe5, 0x32, 0xac, 0xcf, 0x90, 0xe1, 0x75, 0xca,
	0x4f, 0x98, 0x82, 0x1d, 0xa6, 0x98, 0x3b, 0x0c, 0xa3, 0x77, 0x49, 0xad, 0x17, 0x32, 0x1e, 0x7b,
	0xdc, 0xc7, 0x6c, 0x75, 0xb7, 0x8a, 0xfb, 0x03, 0xdf, 0xfa, 0xa3, 0x93, 0x05, 0x77, 0xe4, 0xfa,
	0x1e, 0x28, 0xfa, 0x80, 0x34, 0xf3, 0x38, 0x2f, 0x64, 0x32, 0xc4, 0x9c, 0x4d, 0xb7, 0x91, 0x63,
	0x58, 0xd1, 0x2a, 0x21, 0x28, 0xc3, 0x80, 0x30, 0x87, 0x84, 0x3a, 0x22, 0x78, 0xbc, 0x42, 0xea,
	0x47, 0x3c, 0x66, 0x11, 0xff, 0x02, 0x3e, 0x2a, 0x55, 0x73, 0xaf, 0x00, 0xba, 0x41, 0x16, 0xf3,
	0xbb, 0xc0, 0xcf, 0xd5, 0x2c, 0xa3, 0x9a, 0xb7, 0x46, 0x30, 0x4a, 0x4a, 0xd7, 0xc9, 0xa2, 0x0c,
	0x59, 0x0a, 0xbe, 0x27, 0x15, 0x53, 0x90, 0x15, 0x3f, 0x8f, 0xc5, 0x2f, 0x0c, 0xe0, 0x4e, 0x86,
	0x1e, 0xf8, 0x13, 0xdd, 0x55, 0x26, 0xba, 0x9b, 0x32, 0xad, 0x3a, 0x6d, 0xda, 0x8f, 0xd2, 0x78,
	0xf3, 0x9d, 0xff, 0xd2, 0xfc, 0x53, 0x52, 0x4b, 0x41, 0x26, 0x22, 0x96, 0x80, 0xbd, 0xdf, 0xe4,
	0xd5, 0x8e, 0x22, 0x26, 0xa5, 0x2b, 0x4f, 0x4b, 0x57, 0xf8, 0xac, 0xe7, 0xff, 0xe9, 0x59, 0x17,
	0x88, 0x5c, 0x29, 0x12, 0xb9, 0xc0, 0xb5, 0x6a, 0xa1, 0x6b, 0xe3, 0x6e, 0xd4, 0x67, 0xb9, 0x41,
	0xa6, 0xdc, 0xa0, 0x8f, 0x08, 0x65, 0x27, 0x90, 0xb2, 0x00, 0x06, 0x0c, 0x4f, 0xf1, 0x3e, 0xb4,
	0x1a, 0x48, 0x5b, 0xca, 0x4f, 0x90, 0xf9, 0x96, 0xf7, 0x81, 0x5a, 0x64, 0x81, 0x4b, 0x2f, 0x16,
	0x3e, 0x78, 0x90, 0xa6, 0x22, 0x6d, 0x35, 0x51, 0xad, 0x06, 0x97, 0xaf, 0x84, 0x0f, 0xbb, 0x19,
	0xb4, 0xf5, 0x5b, 0x27, 0x4d, 0x94, 0x19, 0x52, 0x74, 0x98, 0xbe, 0x27, 0xb5, 0x3d, 0x50, 0x08,
	0xd1, 0x87, 0x33, 0x6c, 0x19, 0xfe, 0x0c, 0xed, 0xb5, 0x62, 0xd2, 0xd4, 0x9c, 0xb2, 0x34, 0x7a,
	0x40, 0x6a, 0x9d, 0x1b, 0xdf, 0xdc, 0x01, 0xd5, 0xbe, 0x63, 0x0f, 0x86, 0xa1, 0x3d, 0x1c, 0x86,
	0xf6, 0x6e, 0x36, 0x0c, 0x2d, 0x8d, 0xee, 0x90, 0xca, 0x3e, 0xb0, 0x48, 0x85, 0xf4, 0x1a, 0x4e,
	0xdb, 0x9c, 0x51, 0x15, 0x0e, 0x20, 0x4b, 0xdb, 0x7e, 0x7e, 0x76, 0x61, 0xe8, 0xe7, 0x17, 0x86,
	0xfe, 0xeb, 0xc2, 0xd0, 0xbf, 0x5e, 0x1a, 0xda, 0xf9, 0xa5, 0xa1, 0x7d, 0xbf, 0x34, 0xb4, 0x0f,
	0x1b, 0x01, 0x57, 0xe1, 0x71, 0xd7, 0xee, 0x89, 0xbe, 0x33, 0x31, 0xb2, 0x3f, 0x8f, 0x86, 0xb6,
	0x3a, 0x4d, 0x40, 0x76, 0x2b, 0x98, 0xf6, 0xf1, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x1c,
	0xe5, 0x7f, 0x2c, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RelayerCacheClient is the client API for RelayerCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RelayerCacheClient interface {
	GetRelay(ctx context.Context, in *RelayCacheGet, opts ...grpc.CallOption) (*CacheRelayReply, error)
	SetRelay(ctx context.Context, in *RelayCacheSet, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CacheUsage, error)
}

type relayerCacheClient struct {
	cc grpc1.ClientConn
}

func NewRelayerCacheClient(cc grpc1.ClientConn) RelayerCacheClient {
	return &relayerCacheClient{cc}
}

func (c *relayerCacheClient) GetRelay(ctx context.Context, in *RelayCacheGet, opts ...grpc.CallOption) (*CacheRelayReply, error) {
	out := new(CacheRelayReply)
	err := c.cc.Invoke(ctx, "/lavanet.lava.pairing.RelayerCache/GetRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerCacheClient) SetRelay(ctx context.Context, in *RelayCacheSet, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/lavanet.lava.pairing.RelayerCache/SetRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerCacheClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CacheUsage, error) {
	out := new(CacheUsage)
	err := c.cc.Invoke(ctx, "/lavanet.lava.pairing.RelayerCache/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayerCacheServer is the server API for RelayerCache service.
type RelayerCacheServer interface {
	GetRelay(context.Context, *RelayCacheGet) (*CacheRelayReply, error)
	SetRelay(context.Context, *RelayCacheSet) (*emptypb.Empty, error)
	Health(context.Context, *emptypb.Empty) (*CacheUsage, error)
}

// UnimplementedRelayerCacheServer can be embedded to have forward compatible implementations.
type UnimplementedRelayerCacheServer struct {
}

func (*UnimplementedRelayerCacheServer) GetRelay(ctx context.Context, req *RelayCacheGet) (*CacheRelayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelay not implemented")
}
func (*UnimplementedRelayerCacheServer) SetRelay(ctx context.Context, req *RelayCacheSet) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRelay not implemented")
}
func (*UnimplementedRelayerCacheServer) Health(ctx context.Context, req *emptypb.Empty) (*CacheUsage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}

func RegisterRelayerCacheServer(s grpc1.Server, srv RelayerCacheServer) {
	s.RegisterService(&_RelayerCache_serviceDesc, srv)
}

func _RelayerCache_GetRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayCacheGet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerCacheServer).GetRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.pairing.RelayerCache/GetRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerCacheServer).GetRelay(ctx, req.(*RelayCacheGet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerCache_SetRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayCacheSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerCacheServer).SetRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.pairing.RelayerCache/SetRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerCacheServer).SetRelay(ctx, req.(*RelayCacheSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerCache_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerCacheServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.pairing.RelayerCache/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerCacheServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _RelayerCache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lavanet.lava.pairing.RelayerCache",
	HandlerType: (*RelayerCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRelay",
			Handler:    _RelayerCache_GetRelay_Handler,
		},
		{
			MethodName: "SetRelay",
			Handler:    _RelayerCache_SetRelay_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _RelayerCache_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lavanet/lava/pairing/relayCache.proto",
}

func (m *CacheRelayReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheRelayReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheRelayReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeenBlock != 0 {
		i = encodeVarintRelayCache(dAtA, i, uint64(m.SeenBlock))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OptionalMetadata) > 0 {
		for iNdEx := len(m.OptionalMetadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OptionalMetadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRelayCache(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Reply != nil {
		{
			size, err := m.Reply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelayCache(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CacheUsage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheUsage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheUsage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CacheMisses != 0 {
		i = encodeVarintRelayCache(dAtA, i, uint64(m.CacheMisses))
		i--
		dAtA[i] = 0x10
	}
	if m.CacheHits != 0 {
		i = encodeVarintRelayCache(dAtA, i, uint64(m.CacheHits))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CacheHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CacheHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CacheHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintRelayCache(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelayCache(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelayCacheGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayCacheGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayCacheGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeenBlock != 0 {
		i = encodeVarintRelayCache(dAtA, i, uint64(m.SeenBlock))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintRelayCache(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SharedStateId) > 0 {
		i -= len(m.SharedStateId)
		copy(dAtA[i:], m.SharedStateId)
		i = encodeVarintRelayCache(dAtA, i, uint64(len(m.SharedStateId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RequestedBlock != 0 {
		i = encodeVarintRelayCache(dAtA, i, uint64(m.RequestedBlock))
		i--
		dAtA[i] = 0x20
	}
	if m.Finalized {
		i--
		if m.Finalized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintRelayCache(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RequestHash) > 0 {
		i -= len(m.RequestHash)
		copy(dAtA[i:], m.RequestHash)
		i = encodeVarintRelayCache(dAtA, i, uint64(len(m.RequestHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelayCacheSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelayCacheSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelayCacheSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsNodeError {
		i--
		if m.IsNodeError {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.AverageBlockTime != 0 {
		i = encodeVarintRelayCache(dAtA, i, uint64(m.AverageBlockTime))
		i--
		dAtA[i] = 0x58
	}
	if m.SeenBlock != 0 {
		i = encodeVarintRelayCache(dAtA, i, uint64(m.SeenBlock))
		i--
		dAtA[i] = 0x50
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintRelayCache(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x4a
	}
	if m.RequestedBlock != 0 {
		i = encodeVarintRelayCache(dAtA, i, uint64(m.RequestedBlock))
		i--
		dAtA[i] = 0x38
	}
	if len(m.SharedStateId) > 0 {
		i -= len(m.SharedStateId)
		copy(dAtA[i:], m.SharedStateId)
		i = encodeVarintRelayCache(dAtA, i, uint64(len(m.SharedStateId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OptionalMetadata) > 0 {
		for iNdEx := len(m.OptionalMetadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OptionalMetadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRelayCache(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Finalized {
		i--
		if m.Finalized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelayCache(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintRelayCache(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RequestHash) > 0 {
		i -= len(m.RequestHash)
		copy(dAtA[i:], m.RequestHash)
		i = encodeVarintRelayCache(dAtA, i, uint64(len(m.RequestHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRelayCache(dAtA []byte, offset int, v uint64) int {
	offset -= sovRelayCache(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CacheRelayReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reply != nil {
		l = m.Reply.Size()
		n += 1 + l + sovRelayCache(uint64(l))
	}
	if len(m.OptionalMetadata) > 0 {
		for _, e := range m.OptionalMetadata {
			l = e.Size()
			n += 1 + l + sovRelayCache(uint64(l))
		}
	}
	if m.SeenBlock != 0 {
		n += 1 + sovRelayCache(uint64(m.SeenBlock))
	}
	return n
}

func (m *CacheUsage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CacheHits != 0 {
		n += 1 + sovRelayCache(uint64(m.CacheHits))
	}
	if m.CacheMisses != 0 {
		n += 1 + sovRelayCache(uint64(m.CacheMisses))
	}
	return n
}

func (m *CacheHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovRelayCache(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovRelayCache(uint64(l))
	}
	return n
}

func (m *RelayCacheGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestHash)
	if l > 0 {
		n += 1 + l + sovRelayCache(uint64(l))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovRelayCache(uint64(l))
	}
	if m.Finalized {
		n += 2
	}
	if m.RequestedBlock != 0 {
		n += 1 + sovRelayCache(uint64(m.RequestedBlock))
	}
	l = len(m.SharedStateId)
	if l > 0 {
		n += 1 + l + sovRelayCache(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovRelayCache(uint64(l))
	}
	if m.SeenBlock != 0 {
		n += 1 + sovRelayCache(uint64(m.SeenBlock))
	}
	return n
}

func (m *RelayCacheSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestHash)
	if l > 0 {
		n += 1 + l + sovRelayCache(uint64(l))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovRelayCache(uint64(l))
	}
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovRelayCache(uint64(l))
	}
	if m.Finalized {
		n += 2
	}
	if len(m.OptionalMetadata) > 0 {
		for _, e := range m.OptionalMetadata {
			l = e.Size()
			n += 1 + l + sovRelayCache(uint64(l))
		}
	}
	l = len(m.SharedStateId)
	if l > 0 {
		n += 1 + l + sovRelayCache(uint64(l))
	}
	if m.RequestedBlock != 0 {
		n += 1 + sovRelayCache(uint64(m.RequestedBlock))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovRelayCache(uint64(l))
	}
	if m.SeenBlock != 0 {
		n += 1 + sovRelayCache(uint64(m.SeenBlock))
	}
	if m.AverageBlockTime != 0 {
		n += 1 + sovRelayCache(uint64(m.AverageBlockTime))
	}
	if m.IsNodeError {
		n += 2
	}
	return n
}

func sovRelayCache(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRelayCache(x uint64) (n int) {
	return sovRelayCache(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CacheRelayReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheRelayReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheRelayReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelayCache
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reply == nil {
				m.Reply = &RelayReply{}
			}
			if err := m.Reply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionalMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelayCache
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OptionalMetadata = append(m.OptionalMetadata, Metadata{})
			if err := m.OptionalMetadata[len(m.OptionalMetadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeenBlock", wireType)
			}
			m.SeenBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeenBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CacheUsage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheUsage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheUsage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheHits", wireType)
			}
			m.CacheHits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CacheHits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheMisses", wireType)
			}
			m.CacheMisses = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CacheMisses |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CacheHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CacheHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CacheHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelayCache
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &RelayPrivateData{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCache
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayCacheGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayCacheGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayCacheGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelayCache
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHash = append(m.RequestHash[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestHash == nil {
				m.RequestHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelayCache
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finalized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Finalized = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedBlock", wireType)
			}
			m.RequestedBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestedBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedStateId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCache
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharedStateId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCache
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeenBlock", wireType)
			}
			m.SeenBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeenBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelayCacheSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelayCache
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelayCacheSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelayCacheSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelayCache
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestHash = append(m.RequestHash[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestHash == nil {
				m.RequestHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelayCache
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelayCache
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &RelayReply{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finalized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Finalized = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptionalMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelayCache
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OptionalMetadata = append(m.OptionalMetadata, Metadata{})
			if err := m.OptionalMetadata[len(m.OptionalMetadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedStateId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCache
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharedStateId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedBlock", wireType)
			}
			m.RequestedBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestedBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelayCache
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRelayCache
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeenBlock", wireType)
			}
			m.SeenBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeenBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageBlockTime", wireType)
			}
			m.AverageBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AverageBlockTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNodeError", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNodeError = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRelayCache(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelayCache
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelayCache(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelayCache
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelayCache
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRelayCache
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRelayCache
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRelayCache
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRelayCache        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelayCache          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRelayCache = fmt.Errorf("proto: unexpected end of group")
)
