// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: servicer/session_storage_for_spec.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SessionStorageForSpec struct {
	Index        string        `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	StakeStorage *StakeStorage `protobuf:"bytes,2,opt,name=stakeStorage,proto3" json:"stakeStorage,omitempty"`
}

func (m *SessionStorageForSpec) Reset()         { *m = SessionStorageForSpec{} }
func (m *SessionStorageForSpec) String() string { return proto.CompactTextString(m) }
func (*SessionStorageForSpec) ProtoMessage()    {}
func (*SessionStorageForSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_02697aeb1d8deb3b, []int{0}
}
func (m *SessionStorageForSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionStorageForSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionStorageForSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionStorageForSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionStorageForSpec.Merge(m, src)
}
func (m *SessionStorageForSpec) XXX_Size() int {
	return m.Size()
}
func (m *SessionStorageForSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionStorageForSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SessionStorageForSpec proto.InternalMessageInfo

func (m *SessionStorageForSpec) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *SessionStorageForSpec) GetStakeStorage() *StakeStorage {
	if m != nil {
		return m.StakeStorage
	}
	return nil
}

func init() {
	proto.RegisterType((*SessionStorageForSpec)(nil), "lavanet.lava.servicer.SessionStorageForSpec")
}

func init() {
	proto.RegisterFile("servicer/session_storage_for_spec.proto", fileDescriptor_02697aeb1d8deb3b)
}

var fileDescriptor_02697aeb1d8deb3b = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2f, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x2d, 0xd2, 0x2f, 0x4e, 0x2d, 0x2e, 0xce, 0xcc, 0xcf, 0x8b, 0x2f, 0x2e, 0xc9,
	0x2f, 0x4a, 0x4c, 0x4f, 0x8d, 0x4f, 0xcb, 0x2f, 0x8a, 0x2f, 0x2e, 0x48, 0x4d, 0xd6, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x12, 0xcd, 0x49, 0x2c, 0x4b, 0xcc, 0x4b, 0x2d, 0xd1, 0x03, 0xd1, 0x7a,
	0x30, 0x5d, 0x52, 0x32, 0x08, 0xfd, 0x25, 0x89, 0xd9, 0xa9, 0x30, 0xdd, 0x10, 0x4d, 0x4a, 0x65,
	0x5c, 0xa2, 0xc1, 0x10, 0x63, 0x83, 0x21, 0xe2, 0x6e, 0xf9, 0x45, 0xc1, 0x05, 0xa9, 0xc9, 0x42,
	0x22, 0x5c, 0xac, 0x99, 0x79, 0x29, 0xa9, 0x15, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x10,
	0x8e, 0x90, 0x3b, 0x17, 0x0f, 0xd8, 0x14, 0xa8, 0x62, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x6e, 0x23,
	0x65, 0x3d, 0xac, 0x56, 0xeb, 0x05, 0x23, 0x29, 0x0d, 0x42, 0xd1, 0xe8, 0xe4, 0x74, 0xe2, 0x91,
	0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1,
	0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x1a, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a,
	0xc9, 0xf9, 0xb9, 0xfa, 0x50, 0x63, 0xc1, 0xb4, 0x7e, 0x85, 0x3e, 0xdc, 0x27, 0x25, 0x95, 0x05,
	0xa9, 0xc5, 0x49, 0x6c, 0x60, 0x2f, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x54, 0x36,
	0xb9, 0x22, 0x01, 0x00, 0x00,
}

func (m *SessionStorageForSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionStorageForSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionStorageForSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakeStorage != nil {
		{
			size, err := m.StakeStorage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessionStorageForSpec(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintSessionStorageForSpec(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSessionStorageForSpec(dAtA []byte, offset int, v uint64) int {
	offset -= sovSessionStorageForSpec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SessionStorageForSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovSessionStorageForSpec(uint64(l))
	}
	if m.StakeStorage != nil {
		l = m.StakeStorage.Size()
		n += 1 + l + sovSessionStorageForSpec(uint64(l))
	}
	return n
}

func sovSessionStorageForSpec(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSessionStorageForSpec(x uint64) (n int) {
	return sovSessionStorageForSpec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SessionStorageForSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionStorageForSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionStorageForSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionStorageForSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionStorageForSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionStorageForSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionStorageForSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionStorageForSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionStorageForSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionStorageForSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakeStorage == nil {
				m.StakeStorage = &StakeStorage{}
			}
			if err := m.StakeStorage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionStorageForSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionStorageForSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSessionStorageForSpec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSessionStorageForSpec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSessionStorageForSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSessionStorageForSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSessionStorageForSpec
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSessionStorageForSpec
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSessionStorageForSpec
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSessionStorageForSpec        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSessionStorageForSpec          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSessionStorageForSpec = fmt.Errorf("proto: unexpected end of group")
)
