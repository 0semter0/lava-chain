// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: servicer/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetStakeMapRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetStakeMapRequest) Reset()         { *m = QueryGetStakeMapRequest{} }
func (m *QueryGetStakeMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStakeMapRequest) ProtoMessage()    {}
func (*QueryGetStakeMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{2}
}
func (m *QueryGetStakeMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStakeMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStakeMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStakeMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStakeMapRequest.Merge(m, src)
}
func (m *QueryGetStakeMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStakeMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStakeMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStakeMapRequest proto.InternalMessageInfo

func (m *QueryGetStakeMapRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetStakeMapResponse struct {
	StakeMap StakeMap `protobuf:"bytes,1,opt,name=stakeMap,proto3" json:"stakeMap"`
}

func (m *QueryGetStakeMapResponse) Reset()         { *m = QueryGetStakeMapResponse{} }
func (m *QueryGetStakeMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStakeMapResponse) ProtoMessage()    {}
func (*QueryGetStakeMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{3}
}
func (m *QueryGetStakeMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStakeMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStakeMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStakeMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStakeMapResponse.Merge(m, src)
}
func (m *QueryGetStakeMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStakeMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStakeMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStakeMapResponse proto.InternalMessageInfo

func (m *QueryGetStakeMapResponse) GetStakeMap() StakeMap {
	if m != nil {
		return m.StakeMap
	}
	return StakeMap{}
}

type QueryAllStakeMapRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStakeMapRequest) Reset()         { *m = QueryAllStakeMapRequest{} }
func (m *QueryAllStakeMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStakeMapRequest) ProtoMessage()    {}
func (*QueryAllStakeMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{4}
}
func (m *QueryAllStakeMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStakeMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStakeMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStakeMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStakeMapRequest.Merge(m, src)
}
func (m *QueryAllStakeMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStakeMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStakeMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStakeMapRequest proto.InternalMessageInfo

func (m *QueryAllStakeMapRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStakeMapResponse struct {
	StakeMap   []StakeMap          `protobuf:"bytes,1,rep,name=stakeMap,proto3" json:"stakeMap"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStakeMapResponse) Reset()         { *m = QueryAllStakeMapResponse{} }
func (m *QueryAllStakeMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStakeMapResponse) ProtoMessage()    {}
func (*QueryAllStakeMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{5}
}
func (m *QueryAllStakeMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStakeMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStakeMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStakeMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStakeMapResponse.Merge(m, src)
}
func (m *QueryAllStakeMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStakeMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStakeMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStakeMapResponse proto.InternalMessageInfo

func (m *QueryAllStakeMapResponse) GetStakeMap() []StakeMap {
	if m != nil {
		return m.StakeMap
	}
	return nil
}

func (m *QueryAllStakeMapResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSpecStakeStorageRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetSpecStakeStorageRequest) Reset()         { *m = QueryGetSpecStakeStorageRequest{} }
func (m *QueryGetSpecStakeStorageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSpecStakeStorageRequest) ProtoMessage()    {}
func (*QueryGetSpecStakeStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{6}
}
func (m *QueryGetSpecStakeStorageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSpecStakeStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSpecStakeStorageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSpecStakeStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSpecStakeStorageRequest.Merge(m, src)
}
func (m *QueryGetSpecStakeStorageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSpecStakeStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSpecStakeStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSpecStakeStorageRequest proto.InternalMessageInfo

func (m *QueryGetSpecStakeStorageRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetSpecStakeStorageResponse struct {
	SpecStakeStorage SpecStakeStorage `protobuf:"bytes,1,opt,name=specStakeStorage,proto3" json:"specStakeStorage"`
}

func (m *QueryGetSpecStakeStorageResponse) Reset()         { *m = QueryGetSpecStakeStorageResponse{} }
func (m *QueryGetSpecStakeStorageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSpecStakeStorageResponse) ProtoMessage()    {}
func (*QueryGetSpecStakeStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{7}
}
func (m *QueryGetSpecStakeStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSpecStakeStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSpecStakeStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSpecStakeStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSpecStakeStorageResponse.Merge(m, src)
}
func (m *QueryGetSpecStakeStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSpecStakeStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSpecStakeStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSpecStakeStorageResponse proto.InternalMessageInfo

func (m *QueryGetSpecStakeStorageResponse) GetSpecStakeStorage() SpecStakeStorage {
	if m != nil {
		return m.SpecStakeStorage
	}
	return SpecStakeStorage{}
}

type QueryAllSpecStakeStorageRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSpecStakeStorageRequest) Reset()         { *m = QueryAllSpecStakeStorageRequest{} }
func (m *QueryAllSpecStakeStorageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSpecStakeStorageRequest) ProtoMessage()    {}
func (*QueryAllSpecStakeStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{8}
}
func (m *QueryAllSpecStakeStorageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSpecStakeStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSpecStakeStorageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSpecStakeStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSpecStakeStorageRequest.Merge(m, src)
}
func (m *QueryAllSpecStakeStorageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSpecStakeStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSpecStakeStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSpecStakeStorageRequest proto.InternalMessageInfo

func (m *QueryAllSpecStakeStorageRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSpecStakeStorageResponse struct {
	SpecStakeStorage []SpecStakeStorage  `protobuf:"bytes,1,rep,name=specStakeStorage,proto3" json:"specStakeStorage"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSpecStakeStorageResponse) Reset()         { *m = QueryAllSpecStakeStorageResponse{} }
func (m *QueryAllSpecStakeStorageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSpecStakeStorageResponse) ProtoMessage()    {}
func (*QueryAllSpecStakeStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{9}
}
func (m *QueryAllSpecStakeStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSpecStakeStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSpecStakeStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSpecStakeStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSpecStakeStorageResponse.Merge(m, src)
}
func (m *QueryAllSpecStakeStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSpecStakeStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSpecStakeStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSpecStakeStorageResponse proto.InternalMessageInfo

func (m *QueryAllSpecStakeStorageResponse) GetSpecStakeStorage() []SpecStakeStorage {
	if m != nil {
		return m.SpecStakeStorage
	}
	return nil
}

func (m *QueryAllSpecStakeStorageResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryStakedServicersRequest struct {
	SpecName string `protobuf:"bytes,1,opt,name=specName,proto3" json:"specName,omitempty"`
}

func (m *QueryStakedServicersRequest) Reset()         { *m = QueryStakedServicersRequest{} }
func (m *QueryStakedServicersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakedServicersRequest) ProtoMessage()    {}
func (*QueryStakedServicersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{10}
}
func (m *QueryStakedServicersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakedServicersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakedServicersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakedServicersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakedServicersRequest.Merge(m, src)
}
func (m *QueryStakedServicersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakedServicersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakedServicersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakedServicersRequest proto.InternalMessageInfo

func (m *QueryStakedServicersRequest) GetSpecName() string {
	if m != nil {
		return m.SpecName
	}
	return ""
}

type QueryStakedServicersResponse struct {
	StakeStorage *StakeStorage `protobuf:"bytes,1,opt,name=stakeStorage,proto3" json:"stakeStorage,omitempty"`
	Output       string        `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *QueryStakedServicersResponse) Reset()         { *m = QueryStakedServicersResponse{} }
func (m *QueryStakedServicersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakedServicersResponse) ProtoMessage()    {}
func (*QueryStakedServicersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{11}
}
func (m *QueryStakedServicersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakedServicersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakedServicersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakedServicersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakedServicersResponse.Merge(m, src)
}
func (m *QueryStakedServicersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakedServicersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakedServicersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakedServicersResponse proto.InternalMessageInfo

func (m *QueryStakedServicersResponse) GetStakeStorage() *StakeStorage {
	if m != nil {
		return m.StakeStorage
	}
	return nil
}

func (m *QueryStakedServicersResponse) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

type QueryGetBlockDeadlineForCallbackRequest struct {
}

func (m *QueryGetBlockDeadlineForCallbackRequest) Reset() {
	*m = QueryGetBlockDeadlineForCallbackRequest{}
}
func (m *QueryGetBlockDeadlineForCallbackRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBlockDeadlineForCallbackRequest) ProtoMessage()    {}
func (*QueryGetBlockDeadlineForCallbackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{12}
}
func (m *QueryGetBlockDeadlineForCallbackRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlockDeadlineForCallbackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlockDeadlineForCallbackRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlockDeadlineForCallbackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlockDeadlineForCallbackRequest.Merge(m, src)
}
func (m *QueryGetBlockDeadlineForCallbackRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlockDeadlineForCallbackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlockDeadlineForCallbackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlockDeadlineForCallbackRequest proto.InternalMessageInfo

type QueryGetBlockDeadlineForCallbackResponse struct {
	BlockDeadlineForCallback BlockDeadlineForCallback `protobuf:"bytes,1,opt,name=BlockDeadlineForCallback,proto3" json:"BlockDeadlineForCallback"`
}

func (m *QueryGetBlockDeadlineForCallbackResponse) Reset() {
	*m = QueryGetBlockDeadlineForCallbackResponse{}
}
func (m *QueryGetBlockDeadlineForCallbackResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBlockDeadlineForCallbackResponse) ProtoMessage()    {}
func (*QueryGetBlockDeadlineForCallbackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{13}
}
func (m *QueryGetBlockDeadlineForCallbackResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlockDeadlineForCallbackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlockDeadlineForCallbackResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlockDeadlineForCallbackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlockDeadlineForCallbackResponse.Merge(m, src)
}
func (m *QueryGetBlockDeadlineForCallbackResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlockDeadlineForCallbackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlockDeadlineForCallbackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlockDeadlineForCallbackResponse proto.InternalMessageInfo

func (m *QueryGetBlockDeadlineForCallbackResponse) GetBlockDeadlineForCallback() BlockDeadlineForCallback {
	if m != nil {
		return m.BlockDeadlineForCallback
	}
	return BlockDeadlineForCallback{}
}

type QueryGetUnstakingServicersAllSpecsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetUnstakingServicersAllSpecsRequest) Reset() {
	*m = QueryGetUnstakingServicersAllSpecsRequest{}
}
func (m *QueryGetUnstakingServicersAllSpecsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetUnstakingServicersAllSpecsRequest) ProtoMessage() {}
func (*QueryGetUnstakingServicersAllSpecsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{14}
}
func (m *QueryGetUnstakingServicersAllSpecsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUnstakingServicersAllSpecsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUnstakingServicersAllSpecsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUnstakingServicersAllSpecsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUnstakingServicersAllSpecsRequest.Merge(m, src)
}
func (m *QueryGetUnstakingServicersAllSpecsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUnstakingServicersAllSpecsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUnstakingServicersAllSpecsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUnstakingServicersAllSpecsRequest proto.InternalMessageInfo

func (m *QueryGetUnstakingServicersAllSpecsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetUnstakingServicersAllSpecsResponse struct {
	UnstakingServicersAllSpecs UnstakingServicersAllSpecs `protobuf:"bytes,1,opt,name=UnstakingServicersAllSpecs,proto3" json:"UnstakingServicersAllSpecs"`
}

func (m *QueryGetUnstakingServicersAllSpecsResponse) Reset() {
	*m = QueryGetUnstakingServicersAllSpecsResponse{}
}
func (m *QueryGetUnstakingServicersAllSpecsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetUnstakingServicersAllSpecsResponse) ProtoMessage() {}
func (*QueryGetUnstakingServicersAllSpecsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{15}
}
func (m *QueryGetUnstakingServicersAllSpecsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUnstakingServicersAllSpecsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUnstakingServicersAllSpecsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUnstakingServicersAllSpecsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUnstakingServicersAllSpecsResponse.Merge(m, src)
}
func (m *QueryGetUnstakingServicersAllSpecsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUnstakingServicersAllSpecsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUnstakingServicersAllSpecsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUnstakingServicersAllSpecsResponse proto.InternalMessageInfo

func (m *QueryGetUnstakingServicersAllSpecsResponse) GetUnstakingServicersAllSpecs() UnstakingServicersAllSpecs {
	if m != nil {
		return m.UnstakingServicersAllSpecs
	}
	return UnstakingServicersAllSpecs{}
}

type QueryAllUnstakingServicersAllSpecsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUnstakingServicersAllSpecsRequest) Reset() {
	*m = QueryAllUnstakingServicersAllSpecsRequest{}
}
func (m *QueryAllUnstakingServicersAllSpecsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllUnstakingServicersAllSpecsRequest) ProtoMessage() {}
func (*QueryAllUnstakingServicersAllSpecsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{16}
}
func (m *QueryAllUnstakingServicersAllSpecsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUnstakingServicersAllSpecsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUnstakingServicersAllSpecsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUnstakingServicersAllSpecsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUnstakingServicersAllSpecsRequest.Merge(m, src)
}
func (m *QueryAllUnstakingServicersAllSpecsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUnstakingServicersAllSpecsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUnstakingServicersAllSpecsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUnstakingServicersAllSpecsRequest proto.InternalMessageInfo

func (m *QueryAllUnstakingServicersAllSpecsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllUnstakingServicersAllSpecsResponse struct {
	UnstakingServicersAllSpecs []UnstakingServicersAllSpecs `protobuf:"bytes,1,rep,name=UnstakingServicersAllSpecs,proto3" json:"UnstakingServicersAllSpecs"`
	Pagination                 *query.PageResponse          `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUnstakingServicersAllSpecsResponse) Reset() {
	*m = QueryAllUnstakingServicersAllSpecsResponse{}
}
func (m *QueryAllUnstakingServicersAllSpecsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllUnstakingServicersAllSpecsResponse) ProtoMessage() {}
func (*QueryAllUnstakingServicersAllSpecsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{17}
}
func (m *QueryAllUnstakingServicersAllSpecsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUnstakingServicersAllSpecsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUnstakingServicersAllSpecsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUnstakingServicersAllSpecsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUnstakingServicersAllSpecsResponse.Merge(m, src)
}
func (m *QueryAllUnstakingServicersAllSpecsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUnstakingServicersAllSpecsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUnstakingServicersAllSpecsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUnstakingServicersAllSpecsResponse proto.InternalMessageInfo

func (m *QueryAllUnstakingServicersAllSpecsResponse) GetUnstakingServicersAllSpecs() []UnstakingServicersAllSpecs {
	if m != nil {
		return m.UnstakingServicersAllSpecs
	}
	return nil
}

func (m *QueryAllUnstakingServicersAllSpecsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPairingRequest struct {
	SpecName string `protobuf:"bytes,1,opt,name=specName,proto3" json:"specName,omitempty"`
	UserAddr string `protobuf:"bytes,2,opt,name=userAddr,proto3" json:"userAddr,omitempty"`
}

func (m *QueryGetPairingRequest) Reset()         { *m = QueryGetPairingRequest{} }
func (m *QueryGetPairingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPairingRequest) ProtoMessage()    {}
func (*QueryGetPairingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{18}
}
func (m *QueryGetPairingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPairingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPairingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPairingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPairingRequest.Merge(m, src)
}
func (m *QueryGetPairingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPairingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPairingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPairingRequest proto.InternalMessageInfo

func (m *QueryGetPairingRequest) GetSpecName() string {
	if m != nil {
		return m.SpecName
	}
	return ""
}

func (m *QueryGetPairingRequest) GetUserAddr() string {
	if m != nil {
		return m.UserAddr
	}
	return ""
}

type QueryGetPairingResponse struct {
	Servicers *StakeStorage `protobuf:"bytes,1,opt,name=servicers,proto3" json:"servicers,omitempty"`
}

func (m *QueryGetPairingResponse) Reset()         { *m = QueryGetPairingResponse{} }
func (m *QueryGetPairingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPairingResponse) ProtoMessage()    {}
func (*QueryGetPairingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{19}
}
func (m *QueryGetPairingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPairingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPairingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPairingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPairingResponse.Merge(m, src)
}
func (m *QueryGetPairingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPairingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPairingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPairingResponse proto.InternalMessageInfo

func (m *QueryGetPairingResponse) GetServicers() *StakeStorage {
	if m != nil {
		return m.Servicers
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "lavanet.lava.servicer.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "lavanet.lava.servicer.QueryParamsResponse")
	proto.RegisterType((*QueryGetStakeMapRequest)(nil), "lavanet.lava.servicer.QueryGetStakeMapRequest")
	proto.RegisterType((*QueryGetStakeMapResponse)(nil), "lavanet.lava.servicer.QueryGetStakeMapResponse")
	proto.RegisterType((*QueryAllStakeMapRequest)(nil), "lavanet.lava.servicer.QueryAllStakeMapRequest")
	proto.RegisterType((*QueryAllStakeMapResponse)(nil), "lavanet.lava.servicer.QueryAllStakeMapResponse")
	proto.RegisterType((*QueryGetSpecStakeStorageRequest)(nil), "lavanet.lava.servicer.QueryGetSpecStakeStorageRequest")
	proto.RegisterType((*QueryGetSpecStakeStorageResponse)(nil), "lavanet.lava.servicer.QueryGetSpecStakeStorageResponse")
	proto.RegisterType((*QueryAllSpecStakeStorageRequest)(nil), "lavanet.lava.servicer.QueryAllSpecStakeStorageRequest")
	proto.RegisterType((*QueryAllSpecStakeStorageResponse)(nil), "lavanet.lava.servicer.QueryAllSpecStakeStorageResponse")
	proto.RegisterType((*QueryStakedServicersRequest)(nil), "lavanet.lava.servicer.QueryStakedServicersRequest")
	proto.RegisterType((*QueryStakedServicersResponse)(nil), "lavanet.lava.servicer.QueryStakedServicersResponse")
	proto.RegisterType((*QueryGetBlockDeadlineForCallbackRequest)(nil), "lavanet.lava.servicer.QueryGetBlockDeadlineForCallbackRequest")
	proto.RegisterType((*QueryGetBlockDeadlineForCallbackResponse)(nil), "lavanet.lava.servicer.QueryGetBlockDeadlineForCallbackResponse")
	proto.RegisterType((*QueryGetUnstakingServicersAllSpecsRequest)(nil), "lavanet.lava.servicer.QueryGetUnstakingServicersAllSpecsRequest")
	proto.RegisterType((*QueryGetUnstakingServicersAllSpecsResponse)(nil), "lavanet.lava.servicer.QueryGetUnstakingServicersAllSpecsResponse")
	proto.RegisterType((*QueryAllUnstakingServicersAllSpecsRequest)(nil), "lavanet.lava.servicer.QueryAllUnstakingServicersAllSpecsRequest")
	proto.RegisterType((*QueryAllUnstakingServicersAllSpecsResponse)(nil), "lavanet.lava.servicer.QueryAllUnstakingServicersAllSpecsResponse")
	proto.RegisterType((*QueryGetPairingRequest)(nil), "lavanet.lava.servicer.QueryGetPairingRequest")
	proto.RegisterType((*QueryGetPairingResponse)(nil), "lavanet.lava.servicer.QueryGetPairingResponse")
}

func init() { proto.RegisterFile("servicer/query.proto", fileDescriptor_d5f8eb2622289c7a) }

var fileDescriptor_d5f8eb2622289c7a = []byte{
	// 1105 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xce, 0x24, 0x6d, 0x94, 0xbc, 0xa2, 0x52, 0x4d, 0xd3, 0xb2, 0x32, 0xc9, 0x26, 0x18, 0x41,
	0x36, 0x01, 0x6c, 0x36, 0xa9, 0x52, 0xd2, 0x20, 0xc8, 0x06, 0xd4, 0x9c, 0x40, 0x61, 0x23, 0x0e,
	0x20, 0xd0, 0x6a, 0x76, 0x3d, 0x18, 0x2b, 0x5e, 0xdb, 0xb1, 0xbd, 0xa1, 0x55, 0xb4, 0x42, 0xe2,
	0xc0, 0x19, 0x89, 0x0b, 0x97, 0x1e, 0xe1, 0xc6, 0x15, 0x89, 0x0b, 0x47, 0xd4, 0x63, 0x25, 0x0e,
	0xe5, 0x84, 0x50, 0xd2, 0x33, 0x7f, 0x03, 0xf2, 0xf8, 0x8d, 0x37, 0xfb, 0xc3, 0x3f, 0x92, 0x6c,
	0x4f, 0x59, 0x7b, 0xde, 0xf7, 0xde, 0xf7, 0x7d, 0xf3, 0xe3, 0x8d, 0x03, 0x73, 0x01, 0xf7, 0x8f,
	0xac, 0x16, 0xf7, 0xf5, 0xc3, 0x0e, 0xf7, 0x1f, 0x6a, 0x9e, 0xef, 0x86, 0x2e, 0xbd, 0x65, 0xb3,
	0x23, 0xe6, 0xf0, 0x50, 0x8b, 0xfe, 0x6a, 0x32, 0x44, 0x99, 0x37, 0x5d, 0xd7, 0xb4, 0xb9, 0xce,
	0x3c, 0x4b, 0x67, 0x8e, 0xe3, 0x86, 0x2c, 0xb4, 0x5c, 0x27, 0x88, 0x41, 0xca, 0x6a, 0xcb, 0x0d,
	0xda, 0x6e, 0xa0, 0x37, 0x59, 0xc0, 0xe3, 0x6c, 0xfa, 0x51, 0xb5, 0xc9, 0x43, 0x56, 0xd5, 0x3d,
	0x66, 0x5a, 0x8e, 0x08, 0xc6, 0xd8, 0x5b, 0x49, 0x59, 0x8f, 0xf9, 0xac, 0x2d, 0x53, 0x94, 0x92,
	0xd7, 0x41, 0xc8, 0x0e, 0x78, 0xa3, 0xcd, 0x3c, 0x1c, 0x79, 0xa5, 0x37, 0xe2, 0xf1, 0x56, 0x23,
	0x1e, 0x0e, 0x42, 0xd7, 0x67, 0x26, 0x97, 0xf5, 0x93, 0x90, 0xa6, 0xed, 0xb6, 0x0e, 0x1a, 0x06,
	0x67, 0x86, 0x6d, 0x39, 0xbc, 0xf1, 0x95, 0xeb, 0x37, 0x5a, 0xcc, 0xb6, 0x9b, 0xac, 0x75, 0x80,
	0xb1, 0x6f, 0x26, 0xb1, 0x1d, 0x27, 0xca, 0x65, 0x39, 0x66, 0x43, 0xbe, 0x0a, 0x1a, 0xcc, 0xb6,
	0x1b, 0x51, 0x19, 0x49, 0x6b, 0x7e, 0x80, 0x56, 0x7f, 0xdd, 0xd2, 0x40, 0x5d, 0xa7, 0xd3, 0xc6,
	0x91, 0xf2, 0x59, 0x47, 0xa4, 0x17, 0x2d, 0xd7, 0x92, 0x2e, 0xcc, 0x99, 0xae, 0xe9, 0x8a, 0x9f,
	0x7a, 0xf4, 0x2b, 0x7e, 0xab, 0xce, 0x01, 0xfd, 0x24, 0x72, 0x6f, 0x4f, 0x38, 0x53, 0xe7, 0x87,
	0x1d, 0x1e, 0x84, 0x6a, 0x1d, 0x6e, 0xf6, 0xbd, 0x0d, 0x3c, 0xd7, 0x09, 0x38, 0xdd, 0x82, 0xe9,
	0xd8, 0xc1, 0x12, 0x59, 0x22, 0x95, 0x6b, 0x6b, 0x0b, 0xda, 0xc8, 0xa9, 0xd3, 0x62, 0xd8, 0xce,
	0x95, 0xc7, 0xff, 0x2c, 0x4e, 0xd4, 0x11, 0xa2, 0xea, 0xf0, 0x92, 0xc8, 0xb9, 0xcb, 0xc3, 0xfd,
	0x48, 0xd8, 0x47, 0xcc, 0xc3, 0x72, 0x74, 0x0e, 0xae, 0x5a, 0x8e, 0xc1, 0x1f, 0x88, 0xb4, 0xb3,
	0xf5, 0xf8, 0x41, 0xfd, 0x12, 0x4a, 0xc3, 0x00, 0x64, 0x52, 0x83, 0x99, 0x00, 0xdf, 0x21, 0x97,
	0xc5, 0x14, 0x2e, 0x12, 0x8a, 0x6c, 0x12, 0x98, 0xca, 0x90, 0x4f, 0xcd, 0xb6, 0x07, 0xf9, 0xdc,
	0x07, 0xe8, 0x2d, 0x22, 0xcc, 0xff, 0xba, 0x16, 0xfb, 0xab, 0x45, 0xfe, 0x6a, 0xf1, 0xfa, 0x45,
	0x97, 0xb5, 0x3d, 0x66, 0x72, 0xc4, 0xd6, 0xcf, 0x20, 0xd5, 0x5f, 0x08, 0x4a, 0xe8, 0xab, 0x31,
	0x52, 0xc2, 0xd4, 0x05, 0x24, 0xd0, 0xdd, 0x3e, 0x9e, 0x93, 0x82, 0xe7, 0x72, 0x2e, 0xcf, 0xb8,
	0x7e, 0x1f, 0xd1, 0xbb, 0xb0, 0x98, 0x58, 0xed, 0xf1, 0x96, 0x28, 0xb8, 0x1f, 0xaf, 0xbb, 0xec,
	0x39, 0xea, 0xc2, 0x52, 0x3a, 0x10, 0x85, 0x7e, 0x06, 0x37, 0x82, 0x81, 0x31, 0xf4, 0x74, 0x39,
	0x4d, 0xf0, 0x40, 0x38, 0x0a, 0x1f, 0x4a, 0xa3, 0x5a, 0xc8, 0x3b, 0xf2, 0x37, 0x85, 0xf7, 0xb8,
	0xe6, 0xf2, 0x4f, 0x82, 0x52, 0x47, 0xd6, 0xca, 0x94, 0x3a, 0x35, 0x06, 0xa9, 0xe3, 0x9b, 0xeb,
	0x4d, 0x78, 0x59, 0xe8, 0x10, 0xd9, 0x8d, 0x7d, 0x79, 0x0e, 0x49, 0xbf, 0x14, 0x98, 0x89, 0x6a,
	0x7f, 0xcc, 0xda, 0x1c, 0xa7, 0x3a, 0x79, 0x56, 0xbf, 0x85, 0xf9, 0xd1, 0x50, 0x94, 0xbf, 0x0b,
	0x2f, 0x04, 0xc3, 0xb3, 0xfc, 0x6a, 0xd6, 0xb2, 0x96, 0x0e, 0xf6, 0x01, 0xe9, 0x6d, 0x98, 0x76,
	0x3b, 0xa1, 0xd7, 0x09, 0x85, 0xd0, 0xd9, 0x3a, 0x3e, 0xa9, 0x2b, 0xb0, 0x2c, 0x97, 0xdb, 0x4e,
	0x74, 0xfc, 0x7d, 0x88, 0xa7, 0xee, 0x7d, 0xd7, 0xff, 0x00, 0xcf, 0x5c, 0x79, 0x84, 0x3d, 0x22,
	0x50, 0xc9, 0x8f, 0x45, 0xe2, 0x87, 0x50, 0x4a, 0x8b, 0x41, 0x11, 0x7a, 0x8a, 0x88, 0x34, 0x18,
	0xce, 0x63, 0x6a, 0x5a, 0x75, 0x0b, 0x56, 0x24, 0xbd, 0x4f, 0x65, 0x57, 0x48, 0x1c, 0xc5, 0x35,
	0x96, 0x4c, 0xca, 0x75, 0x98, 0xb4, 0x0c, 0xc1, 0xe4, 0x4a, 0x7d, 0xd2, 0x32, 0xd4, 0x9f, 0x09,
	0xac, 0x16, 0x41, 0xa3, 0xbc, 0x6f, 0x40, 0x49, 0x8f, 0x42, 0x81, 0xd5, 0x14, 0x81, 0xe9, 0x40,
	0x94, 0x98, 0x91, 0x5a, 0x0d, 0x50, 0x64, 0xcd, 0xb6, 0xf3, 0x45, 0x8e, 0x6b, 0xa7, 0xfe, 0x27,
	0xcd, 0xc9, 0xa9, 0x5a, 0xd0, 0x9c, 0xa9, 0xe7, 0x64, 0xce, 0xf8, 0x76, 0xf4, 0x1e, 0xdc, 0x96,
	0x8b, 0x61, 0x8f, 0x59, 0xbe, 0xe5, 0x98, 0x05, 0x36, 0x73, 0x34, 0xd6, 0x09, 0xb8, 0x5f, 0x33,
	0x0c, 0x1f, 0x77, 0x59, 0xf2, 0xac, 0x7e, 0xd1, 0xeb, 0xd5, 0x49, 0xc6, 0xa4, 0x6d, 0xcd, 0x26,
	0x77, 0x97, 0xf3, 0x6c, 0xf0, 0x1e, 0x6a, 0xed, 0xe9, 0x75, 0xb8, 0x2a, 0xd2, 0xd3, 0xef, 0x09,
	0x4c, 0xc7, 0x97, 0x05, 0xba, 0x92, 0x92, 0x64, 0xf8, 0x76, 0xa2, 0xac, 0x16, 0x09, 0x8d, 0xe9,
	0xaa, 0xaf, 0x7d, 0xf7, 0xd7, 0xb3, 0x1f, 0x27, 0x17, 0xe9, 0x82, 0x8e, 0x18, 0xf1, 0x57, 0x1f,
	0xb8, 0x11, 0xd2, 0x47, 0x04, 0x66, 0x64, 0x9b, 0xa5, 0x5a, 0x56, 0xfe, 0xe1, 0xeb, 0x8b, 0xa2,
	0x17, 0x8e, 0x47, 0x52, 0x6f, 0x0b, 0x52, 0xab, 0xb4, 0x92, 0x42, 0x2a, 0xb9, 0x8f, 0xea, 0xc7,
	0xa2, 0xcd, 0x76, 0xe9, 0x4f, 0x04, 0xae, 0xc9, 0x34, 0x35, 0xdb, 0xce, 0xa6, 0x38, 0x7c, 0xa3,
	0xc9, 0xa6, 0x38, 0xe2, 0x76, 0xa2, 0x56, 0x04, 0x45, 0x95, 0x2e, 0xe5, 0x51, 0xa4, 0x7f, 0x10,
	0xb8, 0x31, 0xd8, 0xc5, 0xe8, 0x46, 0x9e, 0x25, 0xa3, 0xbb, 0xb5, 0x72, 0xf7, 0xdc, 0x38, 0xe4,
	0xbb, 0x29, 0xf8, 0xae, 0xd3, 0x6a, 0x1a, 0xdf, 0xa1, 0x8b, 0x7c, 0xe2, 0xed, 0xef, 0x04, 0x6e,
	0x0e, 0xe6, 0x8d, 0x3c, 0xde, 0xc8, 0xf3, 0xec, 0x22, 0x1a, 0x32, 0x6e, 0x0f, 0x6a, 0x55, 0x68,
	0x78, 0x83, 0xae, 0x14, 0xd6, 0x40, 0x7f, 0x23, 0xf0, 0xe2, 0x40, 0x37, 0xa6, 0x6b, 0x59, 0xf5,
	0x47, 0x77, 0x7d, 0x65, 0xfd, 0x5c, 0x18, 0xe4, 0x7b, 0x4f, 0xf0, 0xbd, 0x43, 0xd7, 0xb2, 0xd6,
	0x88, 0xd1, 0xfb, 0xd4, 0xd1, 0x8f, 0xe5, 0xe1, 0xd3, 0xa5, 0x4f, 0x49, 0x7a, 0xcb, 0xa5, 0xef,
	0xe5, 0xac, 0x82, 0x9c, 0xde, 0xaf, 0xbc, 0x7f, 0x61, 0x7c, 0x41, 0x65, 0x19, 0xdf, 0x7c, 0xf4,
	0x19, 0xc9, 0x6a, 0x28, 0x74, 0x3b, 0x87, 0x5b, 0x6e, 0x9f, 0x54, 0x6a, 0x97, 0xc8, 0x80, 0xfa,
	0x6a, 0x42, 0xdf, 0x16, 0xdd, 0x4c, 0xd1, 0x97, 0xf9, 0x9d, 0xaa, 0x1f, 0x5b, 0x46, 0x97, 0x9e,
	0x10, 0x58, 0x48, 0xaf, 0x14, 0xed, 0x9f, 0xed, 0x9c, 0x7d, 0x70, 0x49, 0xa5, 0x85, 0xba, 0xbb,
	0xfa, 0xae, 0x50, 0xba, 0x41, 0xef, 0x5c, 0x44, 0x29, 0xfd, 0x95, 0x00, 0xf4, 0x7a, 0x20, 0x7d,
	0x2b, 0xc7, 0xf9, 0xfe, 0xee, 0xab, 0x68, 0x45, 0xc3, 0x91, 0xeb, 0xb6, 0xe0, 0x7a, 0x8f, 0xbe,
	0x93, 0xc2, 0xd5, 0xe4, 0x61, 0xc3, 0x8b, 0x31, 0x67, 0xb6, 0x92, 0x7e, 0x2c, 0xdb, 0x76, 0x77,
	0x67, 0xe7, 0xf1, 0x49, 0x99, 0x3c, 0x39, 0x29, 0x93, 0x7f, 0x4f, 0xca, 0xe4, 0x87, 0xd3, 0xf2,
	0xc4, 0x93, 0xd3, 0xf2, 0xc4, 0xdf, 0xa7, 0xe5, 0x89, 0xcf, 0x2b, 0xa6, 0x15, 0x7e, 0xdd, 0x69,
	0x6a, 0x2d, 0xb7, 0xdd, 0x9f, 0xfd, 0x41, 0x2f, 0x7f, 0xf8, 0xd0, 0xe3, 0x41, 0x73, 0x5a, 0xfc,
	0x63, 0x60, 0xfd, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x06, 0x12, 0x7f, 0x2e, 0xad, 0x11, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a StakeMap by index.
	StakeMap(ctx context.Context, in *QueryGetStakeMapRequest, opts ...grpc.CallOption) (*QueryGetStakeMapResponse, error)
	// Queries a list of StakeMap items.
	StakeMapAll(ctx context.Context, in *QueryAllStakeMapRequest, opts ...grpc.CallOption) (*QueryAllStakeMapResponse, error)
	// Queries a SpecStakeStorage by index.
	SpecStakeStorage(ctx context.Context, in *QueryGetSpecStakeStorageRequest, opts ...grpc.CallOption) (*QueryGetSpecStakeStorageResponse, error)
	// Queries a list of SpecStakeStorage items.
	SpecStakeStorageAll(ctx context.Context, in *QueryAllSpecStakeStorageRequest, opts ...grpc.CallOption) (*QueryAllSpecStakeStorageResponse, error)
	// Queries a list of StakedServicers items.
	StakedServicers(ctx context.Context, in *QueryStakedServicersRequest, opts ...grpc.CallOption) (*QueryStakedServicersResponse, error)
	// Queries a BlockDeadlineForCallback by index.
	BlockDeadlineForCallback(ctx context.Context, in *QueryGetBlockDeadlineForCallbackRequest, opts ...grpc.CallOption) (*QueryGetBlockDeadlineForCallbackResponse, error)
	// Queries a UnstakingServicersAllSpecs by id.
	UnstakingServicersAllSpecs(ctx context.Context, in *QueryGetUnstakingServicersAllSpecsRequest, opts ...grpc.CallOption) (*QueryGetUnstakingServicersAllSpecsResponse, error)
	// Queries a list of UnstakingServicersAllSpecs items.
	UnstakingServicersAllSpecsAll(ctx context.Context, in *QueryAllUnstakingServicersAllSpecsRequest, opts ...grpc.CallOption) (*QueryAllUnstakingServicersAllSpecsResponse, error)
	// Queries a list of GetPairing items.
	GetPairing(ctx context.Context, in *QueryGetPairingRequest, opts ...grpc.CallOption) (*QueryGetPairingResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakeMap(ctx context.Context, in *QueryGetStakeMapRequest, opts ...grpc.CallOption) (*QueryGetStakeMapResponse, error) {
	out := new(QueryGetStakeMapResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/StakeMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakeMapAll(ctx context.Context, in *QueryAllStakeMapRequest, opts ...grpc.CallOption) (*QueryAllStakeMapResponse, error) {
	out := new(QueryAllStakeMapResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/StakeMapAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpecStakeStorage(ctx context.Context, in *QueryGetSpecStakeStorageRequest, opts ...grpc.CallOption) (*QueryGetSpecStakeStorageResponse, error) {
	out := new(QueryGetSpecStakeStorageResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/SpecStakeStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpecStakeStorageAll(ctx context.Context, in *QueryAllSpecStakeStorageRequest, opts ...grpc.CallOption) (*QueryAllSpecStakeStorageResponse, error) {
	out := new(QueryAllSpecStakeStorageResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/SpecStakeStorageAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakedServicers(ctx context.Context, in *QueryStakedServicersRequest, opts ...grpc.CallOption) (*QueryStakedServicersResponse, error) {
	out := new(QueryStakedServicersResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/StakedServicers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlockDeadlineForCallback(ctx context.Context, in *QueryGetBlockDeadlineForCallbackRequest, opts ...grpc.CallOption) (*QueryGetBlockDeadlineForCallbackResponse, error) {
	out := new(QueryGetBlockDeadlineForCallbackResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/BlockDeadlineForCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UnstakingServicersAllSpecs(ctx context.Context, in *QueryGetUnstakingServicersAllSpecsRequest, opts ...grpc.CallOption) (*QueryGetUnstakingServicersAllSpecsResponse, error) {
	out := new(QueryGetUnstakingServicersAllSpecsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/UnstakingServicersAllSpecs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UnstakingServicersAllSpecsAll(ctx context.Context, in *QueryAllUnstakingServicersAllSpecsRequest, opts ...grpc.CallOption) (*QueryAllUnstakingServicersAllSpecsResponse, error) {
	out := new(QueryAllUnstakingServicersAllSpecsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/UnstakingServicersAllSpecsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPairing(ctx context.Context, in *QueryGetPairingRequest, opts ...grpc.CallOption) (*QueryGetPairingResponse, error) {
	out := new(QueryGetPairingResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/GetPairing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a StakeMap by index.
	StakeMap(context.Context, *QueryGetStakeMapRequest) (*QueryGetStakeMapResponse, error)
	// Queries a list of StakeMap items.
	StakeMapAll(context.Context, *QueryAllStakeMapRequest) (*QueryAllStakeMapResponse, error)
	// Queries a SpecStakeStorage by index.
	SpecStakeStorage(context.Context, *QueryGetSpecStakeStorageRequest) (*QueryGetSpecStakeStorageResponse, error)
	// Queries a list of SpecStakeStorage items.
	SpecStakeStorageAll(context.Context, *QueryAllSpecStakeStorageRequest) (*QueryAllSpecStakeStorageResponse, error)
	// Queries a list of StakedServicers items.
	StakedServicers(context.Context, *QueryStakedServicersRequest) (*QueryStakedServicersResponse, error)
	// Queries a BlockDeadlineForCallback by index.
	BlockDeadlineForCallback(context.Context, *QueryGetBlockDeadlineForCallbackRequest) (*QueryGetBlockDeadlineForCallbackResponse, error)
	// Queries a UnstakingServicersAllSpecs by id.
	UnstakingServicersAllSpecs(context.Context, *QueryGetUnstakingServicersAllSpecsRequest) (*QueryGetUnstakingServicersAllSpecsResponse, error)
	// Queries a list of UnstakingServicersAllSpecs items.
	UnstakingServicersAllSpecsAll(context.Context, *QueryAllUnstakingServicersAllSpecsRequest) (*QueryAllUnstakingServicersAllSpecsResponse, error)
	// Queries a list of GetPairing items.
	GetPairing(context.Context, *QueryGetPairingRequest) (*QueryGetPairingResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) StakeMap(ctx context.Context, req *QueryGetStakeMapRequest) (*QueryGetStakeMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeMap not implemented")
}
func (*UnimplementedQueryServer) StakeMapAll(ctx context.Context, req *QueryAllStakeMapRequest) (*QueryAllStakeMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeMapAll not implemented")
}
func (*UnimplementedQueryServer) SpecStakeStorage(ctx context.Context, req *QueryGetSpecStakeStorageRequest) (*QueryGetSpecStakeStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpecStakeStorage not implemented")
}
func (*UnimplementedQueryServer) SpecStakeStorageAll(ctx context.Context, req *QueryAllSpecStakeStorageRequest) (*QueryAllSpecStakeStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpecStakeStorageAll not implemented")
}
func (*UnimplementedQueryServer) StakedServicers(ctx context.Context, req *QueryStakedServicersRequest) (*QueryStakedServicersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakedServicers not implemented")
}
func (*UnimplementedQueryServer) BlockDeadlineForCallback(ctx context.Context, req *QueryGetBlockDeadlineForCallbackRequest) (*QueryGetBlockDeadlineForCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockDeadlineForCallback not implemented")
}
func (*UnimplementedQueryServer) UnstakingServicersAllSpecs(ctx context.Context, req *QueryGetUnstakingServicersAllSpecsRequest) (*QueryGetUnstakingServicersAllSpecsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnstakingServicersAllSpecs not implemented")
}
func (*UnimplementedQueryServer) UnstakingServicersAllSpecsAll(ctx context.Context, req *QueryAllUnstakingServicersAllSpecsRequest) (*QueryAllUnstakingServicersAllSpecsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnstakingServicersAllSpecsAll not implemented")
}
func (*UnimplementedQueryServer) GetPairing(ctx context.Context, req *QueryGetPairingRequest) (*QueryGetPairingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPairing not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakeMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStakeMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakeMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/StakeMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakeMap(ctx, req.(*QueryGetStakeMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakeMapAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStakeMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakeMapAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/StakeMapAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakeMapAll(ctx, req.(*QueryAllStakeMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpecStakeStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSpecStakeStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpecStakeStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/SpecStakeStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpecStakeStorage(ctx, req.(*QueryGetSpecStakeStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpecStakeStorageAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSpecStakeStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpecStakeStorageAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/SpecStakeStorageAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpecStakeStorageAll(ctx, req.(*QueryAllSpecStakeStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakedServicers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakedServicersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakedServicers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/StakedServicers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakedServicers(ctx, req.(*QueryStakedServicersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlockDeadlineForCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBlockDeadlineForCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlockDeadlineForCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/BlockDeadlineForCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlockDeadlineForCallback(ctx, req.(*QueryGetBlockDeadlineForCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UnstakingServicersAllSpecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUnstakingServicersAllSpecsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UnstakingServicersAllSpecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/UnstakingServicersAllSpecs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UnstakingServicersAllSpecs(ctx, req.(*QueryGetUnstakingServicersAllSpecsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UnstakingServicersAllSpecsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUnstakingServicersAllSpecsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UnstakingServicersAllSpecsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/UnstakingServicersAllSpecsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UnstakingServicersAllSpecsAll(ctx, req.(*QueryAllUnstakingServicersAllSpecsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPairing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPairingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPairing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/GetPairing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPairing(ctx, req.(*QueryGetPairingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lavanet.lava.servicer.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "StakeMap",
			Handler:    _Query_StakeMap_Handler,
		},
		{
			MethodName: "StakeMapAll",
			Handler:    _Query_StakeMapAll_Handler,
		},
		{
			MethodName: "SpecStakeStorage",
			Handler:    _Query_SpecStakeStorage_Handler,
		},
		{
			MethodName: "SpecStakeStorageAll",
			Handler:    _Query_SpecStakeStorageAll_Handler,
		},
		{
			MethodName: "StakedServicers",
			Handler:    _Query_StakedServicers_Handler,
		},
		{
			MethodName: "BlockDeadlineForCallback",
			Handler:    _Query_BlockDeadlineForCallback_Handler,
		},
		{
			MethodName: "UnstakingServicersAllSpecs",
			Handler:    _Query_UnstakingServicersAllSpecs_Handler,
		},
		{
			MethodName: "UnstakingServicersAllSpecsAll",
			Handler:    _Query_UnstakingServicersAllSpecsAll_Handler,
		},
		{
			MethodName: "GetPairing",
			Handler:    _Query_GetPairing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "servicer/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetStakeMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStakeMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStakeMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStakeMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStakeMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStakeMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StakeMap.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStakeMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStakeMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStakeMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStakeMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStakeMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStakeMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakeMap) > 0 {
		for iNdEx := len(m.StakeMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakeMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSpecStakeStorageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSpecStakeStorageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSpecStakeStorageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSpecStakeStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSpecStakeStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSpecStakeStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SpecStakeStorage.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSpecStakeStorageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSpecStakeStorageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSpecStakeStorageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSpecStakeStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSpecStakeStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSpecStakeStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SpecStakeStorage) > 0 {
		for iNdEx := len(m.SpecStakeStorage) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpecStakeStorage[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakedServicersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakedServicersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakedServicersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpecName) > 0 {
		i -= len(m.SpecName)
		copy(dAtA[i:], m.SpecName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpecName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakedServicersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakedServicersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakedServicersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Output) > 0 {
		i -= len(m.Output)
		copy(dAtA[i:], m.Output)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Output)))
		i--
		dAtA[i] = 0x12
	}
	if m.StakeStorage != nil {
		{
			size, err := m.StakeStorage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBlockDeadlineForCallbackRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlockDeadlineForCallbackRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlockDeadlineForCallbackRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetBlockDeadlineForCallbackResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlockDeadlineForCallbackResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlockDeadlineForCallbackResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BlockDeadlineForCallback.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetUnstakingServicersAllSpecsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUnstakingServicersAllSpecsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUnstakingServicersAllSpecsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUnstakingServicersAllSpecsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUnstakingServicersAllSpecsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUnstakingServicersAllSpecsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UnstakingServicersAllSpecs.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllUnstakingServicersAllSpecsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUnstakingServicersAllSpecsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUnstakingServicersAllSpecsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllUnstakingServicersAllSpecsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUnstakingServicersAllSpecsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUnstakingServicersAllSpecsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UnstakingServicersAllSpecs) > 0 {
		for iNdEx := len(m.UnstakingServicersAllSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnstakingServicersAllSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPairingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPairingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPairingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAddr) > 0 {
		i -= len(m.UserAddr)
		copy(dAtA[i:], m.UserAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SpecName) > 0 {
		i -= len(m.SpecName)
		copy(dAtA[i:], m.SpecName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpecName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPairingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPairingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPairingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Servicers != nil {
		{
			size, err := m.Servicers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetStakeMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStakeMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StakeMap.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStakeMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStakeMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StakeMap) > 0 {
		for _, e := range m.StakeMap {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSpecStakeStorageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSpecStakeStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SpecStakeStorage.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSpecStakeStorageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSpecStakeStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SpecStakeStorage) > 0 {
		for _, e := range m.SpecStakeStorage {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakedServicersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakedServicersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakeStorage != nil {
		l = m.StakeStorage.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Output)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBlockDeadlineForCallbackRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetBlockDeadlineForCallbackResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BlockDeadlineForCallback.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetUnstakingServicersAllSpecsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetUnstakingServicersAllSpecsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UnstakingServicersAllSpecs.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllUnstakingServicersAllSpecsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllUnstakingServicersAllSpecsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UnstakingServicersAllSpecs) > 0 {
		for _, e := range m.UnstakingServicersAllSpecs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPairingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UserAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPairingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Servicers != nil {
		l = m.Servicers.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStakeMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStakeMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStakeMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStakeMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStakeMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStakeMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakeMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStakeMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStakeMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStakeMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStakeMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStakeMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStakeMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeMap = append(m.StakeMap, StakeMap{})
			if err := m.StakeMap[len(m.StakeMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSpecStakeStorageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSpecStakeStorageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSpecStakeStorageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSpecStakeStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSpecStakeStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSpecStakeStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecStakeStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpecStakeStorage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSpecStakeStorageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSpecStakeStorageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSpecStakeStorageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSpecStakeStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSpecStakeStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSpecStakeStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecStakeStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecStakeStorage = append(m.SpecStakeStorage, SpecStakeStorage{})
			if err := m.SpecStakeStorage[len(m.SpecStakeStorage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakedServicersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakedServicersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakedServicersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakedServicersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakedServicersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakedServicersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakeStorage == nil {
				m.StakeStorage = &StakeStorage{}
			}
			if err := m.StakeStorage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlockDeadlineForCallbackRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlockDeadlineForCallbackRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlockDeadlineForCallbackRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlockDeadlineForCallbackResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlockDeadlineForCallbackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlockDeadlineForCallbackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockDeadlineForCallback", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BlockDeadlineForCallback.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUnstakingServicersAllSpecsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUnstakingServicersAllSpecsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUnstakingServicersAllSpecsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUnstakingServicersAllSpecsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUnstakingServicersAllSpecsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUnstakingServicersAllSpecsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakingServicersAllSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnstakingServicersAllSpecs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUnstakingServicersAllSpecsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUnstakingServicersAllSpecsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUnstakingServicersAllSpecsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUnstakingServicersAllSpecsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUnstakingServicersAllSpecsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUnstakingServicersAllSpecsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakingServicersAllSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnstakingServicersAllSpecs = append(m.UnstakingServicersAllSpecs, UnstakingServicersAllSpecs{})
			if err := m.UnstakingServicersAllSpecs[len(m.UnstakingServicersAllSpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPairingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPairingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPairingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPairingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPairingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPairingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servicers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Servicers == nil {
				m.Servicers = &StakeStorage{}
			}
			if err := m.Servicers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
