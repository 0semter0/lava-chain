// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: servicer/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetStakeMapRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetStakeMapRequest) Reset()         { *m = QueryGetStakeMapRequest{} }
func (m *QueryGetStakeMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStakeMapRequest) ProtoMessage()    {}
func (*QueryGetStakeMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{2}
}
func (m *QueryGetStakeMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStakeMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStakeMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStakeMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStakeMapRequest.Merge(m, src)
}
func (m *QueryGetStakeMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStakeMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStakeMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStakeMapRequest proto.InternalMessageInfo

func (m *QueryGetStakeMapRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetStakeMapResponse struct {
	StakeMap StakeMap `protobuf:"bytes,1,opt,name=stakeMap,proto3" json:"stakeMap"`
}

func (m *QueryGetStakeMapResponse) Reset()         { *m = QueryGetStakeMapResponse{} }
func (m *QueryGetStakeMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStakeMapResponse) ProtoMessage()    {}
func (*QueryGetStakeMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{3}
}
func (m *QueryGetStakeMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStakeMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStakeMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStakeMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStakeMapResponse.Merge(m, src)
}
func (m *QueryGetStakeMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStakeMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStakeMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStakeMapResponse proto.InternalMessageInfo

func (m *QueryGetStakeMapResponse) GetStakeMap() StakeMap {
	if m != nil {
		return m.StakeMap
	}
	return StakeMap{}
}

type QueryAllStakeMapRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStakeMapRequest) Reset()         { *m = QueryAllStakeMapRequest{} }
func (m *QueryAllStakeMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStakeMapRequest) ProtoMessage()    {}
func (*QueryAllStakeMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{4}
}
func (m *QueryAllStakeMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStakeMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStakeMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStakeMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStakeMapRequest.Merge(m, src)
}
func (m *QueryAllStakeMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStakeMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStakeMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStakeMapRequest proto.InternalMessageInfo

func (m *QueryAllStakeMapRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllStakeMapResponse struct {
	StakeMap   []StakeMap          `protobuf:"bytes,1,rep,name=stakeMap,proto3" json:"stakeMap"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStakeMapResponse) Reset()         { *m = QueryAllStakeMapResponse{} }
func (m *QueryAllStakeMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStakeMapResponse) ProtoMessage()    {}
func (*QueryAllStakeMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{5}
}
func (m *QueryAllStakeMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStakeMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStakeMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStakeMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStakeMapResponse.Merge(m, src)
}
func (m *QueryAllStakeMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStakeMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStakeMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStakeMapResponse proto.InternalMessageInfo

func (m *QueryAllStakeMapResponse) GetStakeMap() []StakeMap {
	if m != nil {
		return m.StakeMap
	}
	return nil
}

func (m *QueryAllStakeMapResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSpecStakeStorageRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetSpecStakeStorageRequest) Reset()         { *m = QueryGetSpecStakeStorageRequest{} }
func (m *QueryGetSpecStakeStorageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSpecStakeStorageRequest) ProtoMessage()    {}
func (*QueryGetSpecStakeStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{6}
}
func (m *QueryGetSpecStakeStorageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSpecStakeStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSpecStakeStorageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSpecStakeStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSpecStakeStorageRequest.Merge(m, src)
}
func (m *QueryGetSpecStakeStorageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSpecStakeStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSpecStakeStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSpecStakeStorageRequest proto.InternalMessageInfo

func (m *QueryGetSpecStakeStorageRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetSpecStakeStorageResponse struct {
	SpecStakeStorage SpecStakeStorage `protobuf:"bytes,1,opt,name=specStakeStorage,proto3" json:"specStakeStorage"`
}

func (m *QueryGetSpecStakeStorageResponse) Reset()         { *m = QueryGetSpecStakeStorageResponse{} }
func (m *QueryGetSpecStakeStorageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSpecStakeStorageResponse) ProtoMessage()    {}
func (*QueryGetSpecStakeStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{7}
}
func (m *QueryGetSpecStakeStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSpecStakeStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSpecStakeStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSpecStakeStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSpecStakeStorageResponse.Merge(m, src)
}
func (m *QueryGetSpecStakeStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSpecStakeStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSpecStakeStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSpecStakeStorageResponse proto.InternalMessageInfo

func (m *QueryGetSpecStakeStorageResponse) GetSpecStakeStorage() SpecStakeStorage {
	if m != nil {
		return m.SpecStakeStorage
	}
	return SpecStakeStorage{}
}

type QueryAllSpecStakeStorageRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSpecStakeStorageRequest) Reset()         { *m = QueryAllSpecStakeStorageRequest{} }
func (m *QueryAllSpecStakeStorageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSpecStakeStorageRequest) ProtoMessage()    {}
func (*QueryAllSpecStakeStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{8}
}
func (m *QueryAllSpecStakeStorageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSpecStakeStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSpecStakeStorageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSpecStakeStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSpecStakeStorageRequest.Merge(m, src)
}
func (m *QueryAllSpecStakeStorageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSpecStakeStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSpecStakeStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSpecStakeStorageRequest proto.InternalMessageInfo

func (m *QueryAllSpecStakeStorageRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSpecStakeStorageResponse struct {
	SpecStakeStorage []SpecStakeStorage  `protobuf:"bytes,1,rep,name=specStakeStorage,proto3" json:"specStakeStorage"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSpecStakeStorageResponse) Reset()         { *m = QueryAllSpecStakeStorageResponse{} }
func (m *QueryAllSpecStakeStorageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSpecStakeStorageResponse) ProtoMessage()    {}
func (*QueryAllSpecStakeStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{9}
}
func (m *QueryAllSpecStakeStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSpecStakeStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSpecStakeStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSpecStakeStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSpecStakeStorageResponse.Merge(m, src)
}
func (m *QueryAllSpecStakeStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSpecStakeStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSpecStakeStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSpecStakeStorageResponse proto.InternalMessageInfo

func (m *QueryAllSpecStakeStorageResponse) GetSpecStakeStorage() []SpecStakeStorage {
	if m != nil {
		return m.SpecStakeStorage
	}
	return nil
}

func (m *QueryAllSpecStakeStorageResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryStakedServicersRequest struct {
	SpecName string `protobuf:"bytes,1,opt,name=specName,proto3" json:"specName,omitempty"`
}

func (m *QueryStakedServicersRequest) Reset()         { *m = QueryStakedServicersRequest{} }
func (m *QueryStakedServicersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakedServicersRequest) ProtoMessage()    {}
func (*QueryStakedServicersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{10}
}
func (m *QueryStakedServicersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakedServicersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakedServicersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakedServicersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakedServicersRequest.Merge(m, src)
}
func (m *QueryStakedServicersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakedServicersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakedServicersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakedServicersRequest proto.InternalMessageInfo

func (m *QueryStakedServicersRequest) GetSpecName() string {
	if m != nil {
		return m.SpecName
	}
	return ""
}

type QueryStakedServicersResponse struct {
	StakeStorage *StakeStorage `protobuf:"bytes,1,opt,name=stakeStorage,proto3" json:"stakeStorage,omitempty"`
	Output       string        `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *QueryStakedServicersResponse) Reset()         { *m = QueryStakedServicersResponse{} }
func (m *QueryStakedServicersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakedServicersResponse) ProtoMessage()    {}
func (*QueryStakedServicersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{11}
}
func (m *QueryStakedServicersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakedServicersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakedServicersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakedServicersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakedServicersResponse.Merge(m, src)
}
func (m *QueryStakedServicersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakedServicersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakedServicersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakedServicersResponse proto.InternalMessageInfo

func (m *QueryStakedServicersResponse) GetStakeStorage() *StakeStorage {
	if m != nil {
		return m.StakeStorage
	}
	return nil
}

func (m *QueryStakedServicersResponse) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

type QueryGetBlockDeadlineForCallbackRequest struct {
}

func (m *QueryGetBlockDeadlineForCallbackRequest) Reset() {
	*m = QueryGetBlockDeadlineForCallbackRequest{}
}
func (m *QueryGetBlockDeadlineForCallbackRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBlockDeadlineForCallbackRequest) ProtoMessage()    {}
func (*QueryGetBlockDeadlineForCallbackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{12}
}
func (m *QueryGetBlockDeadlineForCallbackRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlockDeadlineForCallbackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlockDeadlineForCallbackRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlockDeadlineForCallbackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlockDeadlineForCallbackRequest.Merge(m, src)
}
func (m *QueryGetBlockDeadlineForCallbackRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlockDeadlineForCallbackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlockDeadlineForCallbackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlockDeadlineForCallbackRequest proto.InternalMessageInfo

type QueryGetBlockDeadlineForCallbackResponse struct {
	BlockDeadlineForCallback BlockDeadlineForCallback `protobuf:"bytes,1,opt,name=BlockDeadlineForCallback,proto3" json:"BlockDeadlineForCallback"`
}

func (m *QueryGetBlockDeadlineForCallbackResponse) Reset() {
	*m = QueryGetBlockDeadlineForCallbackResponse{}
}
func (m *QueryGetBlockDeadlineForCallbackResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBlockDeadlineForCallbackResponse) ProtoMessage()    {}
func (*QueryGetBlockDeadlineForCallbackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{13}
}
func (m *QueryGetBlockDeadlineForCallbackResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlockDeadlineForCallbackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlockDeadlineForCallbackResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlockDeadlineForCallbackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlockDeadlineForCallbackResponse.Merge(m, src)
}
func (m *QueryGetBlockDeadlineForCallbackResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlockDeadlineForCallbackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlockDeadlineForCallbackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlockDeadlineForCallbackResponse proto.InternalMessageInfo

func (m *QueryGetBlockDeadlineForCallbackResponse) GetBlockDeadlineForCallback() BlockDeadlineForCallback {
	if m != nil {
		return m.BlockDeadlineForCallback
	}
	return BlockDeadlineForCallback{}
}

type QueryGetUnstakingServicersAllSpecsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetUnstakingServicersAllSpecsRequest) Reset() {
	*m = QueryGetUnstakingServicersAllSpecsRequest{}
}
func (m *QueryGetUnstakingServicersAllSpecsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetUnstakingServicersAllSpecsRequest) ProtoMessage() {}
func (*QueryGetUnstakingServicersAllSpecsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{14}
}
func (m *QueryGetUnstakingServicersAllSpecsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUnstakingServicersAllSpecsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUnstakingServicersAllSpecsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUnstakingServicersAllSpecsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUnstakingServicersAllSpecsRequest.Merge(m, src)
}
func (m *QueryGetUnstakingServicersAllSpecsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUnstakingServicersAllSpecsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUnstakingServicersAllSpecsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUnstakingServicersAllSpecsRequest proto.InternalMessageInfo

func (m *QueryGetUnstakingServicersAllSpecsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetUnstakingServicersAllSpecsResponse struct {
	UnstakingServicersAllSpecs UnstakingServicersAllSpecs `protobuf:"bytes,1,opt,name=UnstakingServicersAllSpecs,proto3" json:"UnstakingServicersAllSpecs"`
}

func (m *QueryGetUnstakingServicersAllSpecsResponse) Reset() {
	*m = QueryGetUnstakingServicersAllSpecsResponse{}
}
func (m *QueryGetUnstakingServicersAllSpecsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetUnstakingServicersAllSpecsResponse) ProtoMessage() {}
func (*QueryGetUnstakingServicersAllSpecsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{15}
}
func (m *QueryGetUnstakingServicersAllSpecsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUnstakingServicersAllSpecsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUnstakingServicersAllSpecsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUnstakingServicersAllSpecsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUnstakingServicersAllSpecsResponse.Merge(m, src)
}
func (m *QueryGetUnstakingServicersAllSpecsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUnstakingServicersAllSpecsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUnstakingServicersAllSpecsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUnstakingServicersAllSpecsResponse proto.InternalMessageInfo

func (m *QueryGetUnstakingServicersAllSpecsResponse) GetUnstakingServicersAllSpecs() UnstakingServicersAllSpecs {
	if m != nil {
		return m.UnstakingServicersAllSpecs
	}
	return UnstakingServicersAllSpecs{}
}

type QueryAllUnstakingServicersAllSpecsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUnstakingServicersAllSpecsRequest) Reset() {
	*m = QueryAllUnstakingServicersAllSpecsRequest{}
}
func (m *QueryAllUnstakingServicersAllSpecsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllUnstakingServicersAllSpecsRequest) ProtoMessage() {}
func (*QueryAllUnstakingServicersAllSpecsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{16}
}
func (m *QueryAllUnstakingServicersAllSpecsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUnstakingServicersAllSpecsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUnstakingServicersAllSpecsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUnstakingServicersAllSpecsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUnstakingServicersAllSpecsRequest.Merge(m, src)
}
func (m *QueryAllUnstakingServicersAllSpecsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUnstakingServicersAllSpecsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUnstakingServicersAllSpecsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUnstakingServicersAllSpecsRequest proto.InternalMessageInfo

func (m *QueryAllUnstakingServicersAllSpecsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllUnstakingServicersAllSpecsResponse struct {
	UnstakingServicersAllSpecs []UnstakingServicersAllSpecs `protobuf:"bytes,1,rep,name=UnstakingServicersAllSpecs,proto3" json:"UnstakingServicersAllSpecs"`
	Pagination                 *query.PageResponse          `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUnstakingServicersAllSpecsResponse) Reset() {
	*m = QueryAllUnstakingServicersAllSpecsResponse{}
}
func (m *QueryAllUnstakingServicersAllSpecsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllUnstakingServicersAllSpecsResponse) ProtoMessage() {}
func (*QueryAllUnstakingServicersAllSpecsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{17}
}
func (m *QueryAllUnstakingServicersAllSpecsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUnstakingServicersAllSpecsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUnstakingServicersAllSpecsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUnstakingServicersAllSpecsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUnstakingServicersAllSpecsResponse.Merge(m, src)
}
func (m *QueryAllUnstakingServicersAllSpecsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUnstakingServicersAllSpecsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUnstakingServicersAllSpecsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUnstakingServicersAllSpecsResponse proto.InternalMessageInfo

func (m *QueryAllUnstakingServicersAllSpecsResponse) GetUnstakingServicersAllSpecs() []UnstakingServicersAllSpecs {
	if m != nil {
		return m.UnstakingServicersAllSpecs
	}
	return nil
}

func (m *QueryAllUnstakingServicersAllSpecsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPairingRequest struct {
	SpecName string `protobuf:"bytes,1,opt,name=specName,proto3" json:"specName,omitempty"`
	UserAddr string `protobuf:"bytes,2,opt,name=userAddr,proto3" json:"userAddr,omitempty"`
}

func (m *QueryGetPairingRequest) Reset()         { *m = QueryGetPairingRequest{} }
func (m *QueryGetPairingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPairingRequest) ProtoMessage()    {}
func (*QueryGetPairingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{18}
}
func (m *QueryGetPairingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPairingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPairingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPairingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPairingRequest.Merge(m, src)
}
func (m *QueryGetPairingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPairingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPairingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPairingRequest proto.InternalMessageInfo

func (m *QueryGetPairingRequest) GetSpecName() string {
	if m != nil {
		return m.SpecName
	}
	return ""
}

func (m *QueryGetPairingRequest) GetUserAddr() string {
	if m != nil {
		return m.UserAddr
	}
	return ""
}

type QueryGetPairingResponse struct {
	Servicers *StakeStorage `protobuf:"bytes,1,opt,name=servicers,proto3" json:"servicers,omitempty"`
}

func (m *QueryGetPairingResponse) Reset()         { *m = QueryGetPairingResponse{} }
func (m *QueryGetPairingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPairingResponse) ProtoMessage()    {}
func (*QueryGetPairingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{19}
}
func (m *QueryGetPairingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPairingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPairingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPairingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPairingResponse.Merge(m, src)
}
func (m *QueryGetPairingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPairingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPairingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPairingResponse proto.InternalMessageInfo

func (m *QueryGetPairingResponse) GetServicers() *StakeStorage {
	if m != nil {
		return m.Servicers
	}
	return nil
}

type QueryGetCurrentSessionStartRequest struct {
}

func (m *QueryGetCurrentSessionStartRequest) Reset()         { *m = QueryGetCurrentSessionStartRequest{} }
func (m *QueryGetCurrentSessionStartRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentSessionStartRequest) ProtoMessage()    {}
func (*QueryGetCurrentSessionStartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{20}
}
func (m *QueryGetCurrentSessionStartRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentSessionStartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentSessionStartRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentSessionStartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentSessionStartRequest.Merge(m, src)
}
func (m *QueryGetCurrentSessionStartRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentSessionStartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentSessionStartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentSessionStartRequest proto.InternalMessageInfo

type QueryGetCurrentSessionStartResponse struct {
	CurrentSessionStart CurrentSessionStart `protobuf:"bytes,1,opt,name=CurrentSessionStart,proto3" json:"CurrentSessionStart"`
}

func (m *QueryGetCurrentSessionStartResponse) Reset()         { *m = QueryGetCurrentSessionStartResponse{} }
func (m *QueryGetCurrentSessionStartResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCurrentSessionStartResponse) ProtoMessage()    {}
func (*QueryGetCurrentSessionStartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{21}
}
func (m *QueryGetCurrentSessionStartResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCurrentSessionStartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCurrentSessionStartResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCurrentSessionStartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCurrentSessionStartResponse.Merge(m, src)
}
func (m *QueryGetCurrentSessionStartResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCurrentSessionStartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCurrentSessionStartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCurrentSessionStartResponse proto.InternalMessageInfo

func (m *QueryGetCurrentSessionStartResponse) GetCurrentSessionStart() CurrentSessionStart {
	if m != nil {
		return m.CurrentSessionStart
	}
	return CurrentSessionStart{}
}

type QueryGetPreviousSessionBlocksRequest struct {
}

func (m *QueryGetPreviousSessionBlocksRequest) Reset()         { *m = QueryGetPreviousSessionBlocksRequest{} }
func (m *QueryGetPreviousSessionBlocksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPreviousSessionBlocksRequest) ProtoMessage()    {}
func (*QueryGetPreviousSessionBlocksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{22}
}
func (m *QueryGetPreviousSessionBlocksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPreviousSessionBlocksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPreviousSessionBlocksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPreviousSessionBlocksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPreviousSessionBlocksRequest.Merge(m, src)
}
func (m *QueryGetPreviousSessionBlocksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPreviousSessionBlocksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPreviousSessionBlocksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPreviousSessionBlocksRequest proto.InternalMessageInfo

type QueryGetPreviousSessionBlocksResponse struct {
	PreviousSessionBlocks PreviousSessionBlocks `protobuf:"bytes,1,opt,name=PreviousSessionBlocks,proto3" json:"PreviousSessionBlocks"`
}

func (m *QueryGetPreviousSessionBlocksResponse) Reset()         { *m = QueryGetPreviousSessionBlocksResponse{} }
func (m *QueryGetPreviousSessionBlocksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPreviousSessionBlocksResponse) ProtoMessage()    {}
func (*QueryGetPreviousSessionBlocksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{23}
}
func (m *QueryGetPreviousSessionBlocksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPreviousSessionBlocksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPreviousSessionBlocksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPreviousSessionBlocksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPreviousSessionBlocksResponse.Merge(m, src)
}
func (m *QueryGetPreviousSessionBlocksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPreviousSessionBlocksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPreviousSessionBlocksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPreviousSessionBlocksResponse proto.InternalMessageInfo

func (m *QueryGetPreviousSessionBlocksResponse) GetPreviousSessionBlocks() PreviousSessionBlocks {
	if m != nil {
		return m.PreviousSessionBlocks
	}
	return PreviousSessionBlocks{}
}

type QueryGetSessionStorageForSpecRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetSessionStorageForSpecRequest) Reset()         { *m = QueryGetSessionStorageForSpecRequest{} }
func (m *QueryGetSessionStorageForSpecRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSessionStorageForSpecRequest) ProtoMessage()    {}
func (*QueryGetSessionStorageForSpecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{24}
}
func (m *QueryGetSessionStorageForSpecRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSessionStorageForSpecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSessionStorageForSpecRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSessionStorageForSpecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSessionStorageForSpecRequest.Merge(m, src)
}
func (m *QueryGetSessionStorageForSpecRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSessionStorageForSpecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSessionStorageForSpecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSessionStorageForSpecRequest proto.InternalMessageInfo

func (m *QueryGetSessionStorageForSpecRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetSessionStorageForSpecResponse struct {
	SessionStorageForSpec SessionStorageForSpec `protobuf:"bytes,1,opt,name=sessionStorageForSpec,proto3" json:"sessionStorageForSpec"`
}

func (m *QueryGetSessionStorageForSpecResponse) Reset()         { *m = QueryGetSessionStorageForSpecResponse{} }
func (m *QueryGetSessionStorageForSpecResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSessionStorageForSpecResponse) ProtoMessage()    {}
func (*QueryGetSessionStorageForSpecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{25}
}
func (m *QueryGetSessionStorageForSpecResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSessionStorageForSpecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSessionStorageForSpecResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSessionStorageForSpecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSessionStorageForSpecResponse.Merge(m, src)
}
func (m *QueryGetSessionStorageForSpecResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSessionStorageForSpecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSessionStorageForSpecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSessionStorageForSpecResponse proto.InternalMessageInfo

func (m *QueryGetSessionStorageForSpecResponse) GetSessionStorageForSpec() SessionStorageForSpec {
	if m != nil {
		return m.SessionStorageForSpec
	}
	return SessionStorageForSpec{}
}

type QueryAllSessionStorageForSpecRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSessionStorageForSpecRequest) Reset()         { *m = QueryAllSessionStorageForSpecRequest{} }
func (m *QueryAllSessionStorageForSpecRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSessionStorageForSpecRequest) ProtoMessage()    {}
func (*QueryAllSessionStorageForSpecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{26}
}
func (m *QueryAllSessionStorageForSpecRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSessionStorageForSpecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSessionStorageForSpecRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSessionStorageForSpecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSessionStorageForSpecRequest.Merge(m, src)
}
func (m *QueryAllSessionStorageForSpecRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSessionStorageForSpecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSessionStorageForSpecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSessionStorageForSpecRequest proto.InternalMessageInfo

func (m *QueryAllSessionStorageForSpecRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSessionStorageForSpecResponse struct {
	SessionStorageForSpec []SessionStorageForSpec `protobuf:"bytes,1,rep,name=sessionStorageForSpec,proto3" json:"sessionStorageForSpec"`
	Pagination            *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSessionStorageForSpecResponse) Reset()         { *m = QueryAllSessionStorageForSpecResponse{} }
func (m *QueryAllSessionStorageForSpecResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSessionStorageForSpecResponse) ProtoMessage()    {}
func (*QueryAllSessionStorageForSpecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{27}
}
func (m *QueryAllSessionStorageForSpecResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSessionStorageForSpecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSessionStorageForSpecResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSessionStorageForSpecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSessionStorageForSpecResponse.Merge(m, src)
}
func (m *QueryAllSessionStorageForSpecResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSessionStorageForSpecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSessionStorageForSpecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSessionStorageForSpecResponse proto.InternalMessageInfo

func (m *QueryAllSessionStorageForSpecResponse) GetSessionStorageForSpec() []SessionStorageForSpec {
	if m != nil {
		return m.SessionStorageForSpec
	}
	return nil
}

func (m *QueryAllSessionStorageForSpecResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QuerySessionStorageForAllSpecsRequest struct {
	BlockNum uint64 `protobuf:"varint,1,opt,name=blockNum,proto3" json:"blockNum,omitempty"`
}

func (m *QuerySessionStorageForAllSpecsRequest) Reset()         { *m = QuerySessionStorageForAllSpecsRequest{} }
func (m *QuerySessionStorageForAllSpecsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySessionStorageForAllSpecsRequest) ProtoMessage()    {}
func (*QuerySessionStorageForAllSpecsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{28}
}
func (m *QuerySessionStorageForAllSpecsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySessionStorageForAllSpecsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySessionStorageForAllSpecsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySessionStorageForAllSpecsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySessionStorageForAllSpecsRequest.Merge(m, src)
}
func (m *QuerySessionStorageForAllSpecsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySessionStorageForAllSpecsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySessionStorageForAllSpecsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySessionStorageForAllSpecsRequest proto.InternalMessageInfo

func (m *QuerySessionStorageForAllSpecsRequest) GetBlockNum() uint64 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

type QuerySessionStorageForAllSpecsResponse struct {
	Servicers *StakeStorage `protobuf:"bytes,1,opt,name=servicers,proto3" json:"servicers,omitempty"`
}

func (m *QuerySessionStorageForAllSpecsResponse) Reset() {
	*m = QuerySessionStorageForAllSpecsResponse{}
}
func (m *QuerySessionStorageForAllSpecsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySessionStorageForAllSpecsResponse) ProtoMessage()    {}
func (*QuerySessionStorageForAllSpecsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{29}
}
func (m *QuerySessionStorageForAllSpecsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySessionStorageForAllSpecsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySessionStorageForAllSpecsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySessionStorageForAllSpecsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySessionStorageForAllSpecsResponse.Merge(m, src)
}
func (m *QuerySessionStorageForAllSpecsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySessionStorageForAllSpecsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySessionStorageForAllSpecsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySessionStorageForAllSpecsResponse proto.InternalMessageInfo

func (m *QuerySessionStorageForAllSpecsResponse) GetServicers() *StakeStorage {
	if m != nil {
		return m.Servicers
	}
	return nil
}

type QueryAllSessionStoragesForSpecRequest struct {
	SpecName string `protobuf:"bytes,1,opt,name=specName,proto3" json:"specName,omitempty"`
}

func (m *QueryAllSessionStoragesForSpecRequest) Reset()         { *m = QueryAllSessionStoragesForSpecRequest{} }
func (m *QueryAllSessionStoragesForSpecRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSessionStoragesForSpecRequest) ProtoMessage()    {}
func (*QueryAllSessionStoragesForSpecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{30}
}
func (m *QueryAllSessionStoragesForSpecRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSessionStoragesForSpecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSessionStoragesForSpecRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSessionStoragesForSpecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSessionStoragesForSpecRequest.Merge(m, src)
}
func (m *QueryAllSessionStoragesForSpecRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSessionStoragesForSpecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSessionStoragesForSpecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSessionStoragesForSpecRequest proto.InternalMessageInfo

func (m *QueryAllSessionStoragesForSpecRequest) GetSpecName() string {
	if m != nil {
		return m.SpecName
	}
	return ""
}

type QueryAllSessionStoragesForSpecResponse struct {
	Storages []SessionStorageForSpec `protobuf:"bytes,1,rep,name=storages,proto3" json:"storages"`
}

func (m *QueryAllSessionStoragesForSpecResponse) Reset() {
	*m = QueryAllSessionStoragesForSpecResponse{}
}
func (m *QueryAllSessionStoragesForSpecResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSessionStoragesForSpecResponse) ProtoMessage()    {}
func (*QueryAllSessionStoragesForSpecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{31}
}
func (m *QueryAllSessionStoragesForSpecResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSessionStoragesForSpecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSessionStoragesForSpecResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSessionStoragesForSpecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSessionStoragesForSpecResponse.Merge(m, src)
}
func (m *QueryAllSessionStoragesForSpecResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSessionStoragesForSpecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSessionStoragesForSpecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSessionStoragesForSpecResponse proto.InternalMessageInfo

func (m *QueryAllSessionStoragesForSpecResponse) GetStorages() []SessionStorageForSpec {
	if m != nil {
		return m.Storages
	}
	return nil
}

type QueryGetEarliestSessionStartRequest struct {
}

func (m *QueryGetEarliestSessionStartRequest) Reset()         { *m = QueryGetEarliestSessionStartRequest{} }
func (m *QueryGetEarliestSessionStartRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEarliestSessionStartRequest) ProtoMessage()    {}
func (*QueryGetEarliestSessionStartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{32}
}
func (m *QueryGetEarliestSessionStartRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEarliestSessionStartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEarliestSessionStartRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEarliestSessionStartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEarliestSessionStartRequest.Merge(m, src)
}
func (m *QueryGetEarliestSessionStartRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEarliestSessionStartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEarliestSessionStartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEarliestSessionStartRequest proto.InternalMessageInfo

type QueryGetEarliestSessionStartResponse struct {
	EarliestSessionStart EarliestSessionStart `protobuf:"bytes,1,opt,name=EarliestSessionStart,proto3" json:"EarliestSessionStart"`
}

func (m *QueryGetEarliestSessionStartResponse) Reset()         { *m = QueryGetEarliestSessionStartResponse{} }
func (m *QueryGetEarliestSessionStartResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEarliestSessionStartResponse) ProtoMessage()    {}
func (*QueryGetEarliestSessionStartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{33}
}
func (m *QueryGetEarliestSessionStartResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEarliestSessionStartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEarliestSessionStartResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEarliestSessionStartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEarliestSessionStartResponse.Merge(m, src)
}
func (m *QueryGetEarliestSessionStartResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEarliestSessionStartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEarliestSessionStartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEarliestSessionStartResponse proto.InternalMessageInfo

func (m *QueryGetEarliestSessionStartResponse) GetEarliestSessionStart() EarliestSessionStart {
	if m != nil {
		return m.EarliestSessionStart
	}
	return EarliestSessionStart{}
}

type QueryVerifyPairingRequest struct {
	Spec         uint64 `protobuf:"varint,1,opt,name=spec,proto3" json:"spec,omitempty"`
	UserAddr     string `protobuf:"bytes,2,opt,name=userAddr,proto3" json:"userAddr,omitempty"`
	ServicerAddr string `protobuf:"bytes,3,opt,name=servicerAddr,proto3" json:"servicerAddr,omitempty"`
	BlockNum     uint64 `protobuf:"varint,4,opt,name=blockNum,proto3" json:"blockNum,omitempty"`
}

func (m *QueryVerifyPairingRequest) Reset()         { *m = QueryVerifyPairingRequest{} }
func (m *QueryVerifyPairingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyPairingRequest) ProtoMessage()    {}
func (*QueryVerifyPairingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{34}
}
func (m *QueryVerifyPairingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyPairingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyPairingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyPairingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyPairingRequest.Merge(m, src)
}
func (m *QueryVerifyPairingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyPairingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyPairingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyPairingRequest proto.InternalMessageInfo

func (m *QueryVerifyPairingRequest) GetSpec() uint64 {
	if m != nil {
		return m.Spec
	}
	return 0
}

func (m *QueryVerifyPairingRequest) GetUserAddr() string {
	if m != nil {
		return m.UserAddr
	}
	return ""
}

func (m *QueryVerifyPairingRequest) GetServicerAddr() string {
	if m != nil {
		return m.ServicerAddr
	}
	return ""
}

func (m *QueryVerifyPairingRequest) GetBlockNum() uint64 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

type QueryVerifyPairingResponse struct {
	Valid   bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Overlap bool `protobuf:"varint,5,opt,name=overlap,proto3" json:"overlap,omitempty"`
}

func (m *QueryVerifyPairingResponse) Reset()         { *m = QueryVerifyPairingResponse{} }
func (m *QueryVerifyPairingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyPairingResponse) ProtoMessage()    {}
func (*QueryVerifyPairingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{35}
}
func (m *QueryVerifyPairingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyPairingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyPairingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyPairingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyPairingResponse.Merge(m, src)
}
func (m *QueryVerifyPairingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyPairingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyPairingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyPairingResponse proto.InternalMessageInfo

func (m *QueryVerifyPairingResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *QueryVerifyPairingResponse) GetOverlap() bool {
	if m != nil {
		return m.Overlap
	}
	return false
}

type QueryGetUniquePaymentStorageUserServicerRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetUniquePaymentStorageUserServicerRequest) Reset() {
	*m = QueryGetUniquePaymentStorageUserServicerRequest{}
}
func (m *QueryGetUniquePaymentStorageUserServicerRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetUniquePaymentStorageUserServicerRequest) ProtoMessage() {}
func (*QueryGetUniquePaymentStorageUserServicerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{36}
}
func (m *QueryGetUniquePaymentStorageUserServicerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUniquePaymentStorageUserServicerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUniquePaymentStorageUserServicerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUniquePaymentStorageUserServicerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUniquePaymentStorageUserServicerRequest.Merge(m, src)
}
func (m *QueryGetUniquePaymentStorageUserServicerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUniquePaymentStorageUserServicerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUniquePaymentStorageUserServicerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUniquePaymentStorageUserServicerRequest proto.InternalMessageInfo

func (m *QueryGetUniquePaymentStorageUserServicerRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetUniquePaymentStorageUserServicerResponse struct {
	UniquePaymentStorageUserServicer UniquePaymentStorageUserServicer `protobuf:"bytes,1,opt,name=uniquePaymentStorageUserServicer,proto3" json:"uniquePaymentStorageUserServicer"`
}

func (m *QueryGetUniquePaymentStorageUserServicerResponse) Reset() {
	*m = QueryGetUniquePaymentStorageUserServicerResponse{}
}
func (m *QueryGetUniquePaymentStorageUserServicerResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetUniquePaymentStorageUserServicerResponse) ProtoMessage() {}
func (*QueryGetUniquePaymentStorageUserServicerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{37}
}
func (m *QueryGetUniquePaymentStorageUserServicerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUniquePaymentStorageUserServicerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUniquePaymentStorageUserServicerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUniquePaymentStorageUserServicerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUniquePaymentStorageUserServicerResponse.Merge(m, src)
}
func (m *QueryGetUniquePaymentStorageUserServicerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUniquePaymentStorageUserServicerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUniquePaymentStorageUserServicerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUniquePaymentStorageUserServicerResponse proto.InternalMessageInfo

func (m *QueryGetUniquePaymentStorageUserServicerResponse) GetUniquePaymentStorageUserServicer() UniquePaymentStorageUserServicer {
	if m != nil {
		return m.UniquePaymentStorageUserServicer
	}
	return UniquePaymentStorageUserServicer{}
}

type QueryAllUniquePaymentStorageUserServicerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUniquePaymentStorageUserServicerRequest) Reset() {
	*m = QueryAllUniquePaymentStorageUserServicerRequest{}
}
func (m *QueryAllUniquePaymentStorageUserServicerRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllUniquePaymentStorageUserServicerRequest) ProtoMessage() {}
func (*QueryAllUniquePaymentStorageUserServicerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{38}
}
func (m *QueryAllUniquePaymentStorageUserServicerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUniquePaymentStorageUserServicerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUniquePaymentStorageUserServicerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUniquePaymentStorageUserServicerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUniquePaymentStorageUserServicerRequest.Merge(m, src)
}
func (m *QueryAllUniquePaymentStorageUserServicerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUniquePaymentStorageUserServicerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUniquePaymentStorageUserServicerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUniquePaymentStorageUserServicerRequest proto.InternalMessageInfo

func (m *QueryAllUniquePaymentStorageUserServicerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllUniquePaymentStorageUserServicerResponse struct {
	UniquePaymentStorageUserServicer []UniquePaymentStorageUserServicer `protobuf:"bytes,1,rep,name=uniquePaymentStorageUserServicer,proto3" json:"uniquePaymentStorageUserServicer"`
	Pagination                       *query.PageResponse                `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUniquePaymentStorageUserServicerResponse) Reset() {
	*m = QueryAllUniquePaymentStorageUserServicerResponse{}
}
func (m *QueryAllUniquePaymentStorageUserServicerResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllUniquePaymentStorageUserServicerResponse) ProtoMessage() {}
func (*QueryAllUniquePaymentStorageUserServicerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{39}
}
func (m *QueryAllUniquePaymentStorageUserServicerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUniquePaymentStorageUserServicerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUniquePaymentStorageUserServicerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUniquePaymentStorageUserServicerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUniquePaymentStorageUserServicerResponse.Merge(m, src)
}
func (m *QueryAllUniquePaymentStorageUserServicerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUniquePaymentStorageUserServicerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUniquePaymentStorageUserServicerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUniquePaymentStorageUserServicerResponse proto.InternalMessageInfo

func (m *QueryAllUniquePaymentStorageUserServicerResponse) GetUniquePaymentStorageUserServicer() []UniquePaymentStorageUserServicer {
	if m != nil {
		return m.UniquePaymentStorageUserServicer
	}
	return nil
}

func (m *QueryAllUniquePaymentStorageUserServicerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetUserPaymentStorageRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetUserPaymentStorageRequest) Reset()         { *m = QueryGetUserPaymentStorageRequest{} }
func (m *QueryGetUserPaymentStorageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserPaymentStorageRequest) ProtoMessage()    {}
func (*QueryGetUserPaymentStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{40}
}
func (m *QueryGetUserPaymentStorageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserPaymentStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserPaymentStorageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserPaymentStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserPaymentStorageRequest.Merge(m, src)
}
func (m *QueryGetUserPaymentStorageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserPaymentStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserPaymentStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserPaymentStorageRequest proto.InternalMessageInfo

func (m *QueryGetUserPaymentStorageRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetUserPaymentStorageResponse struct {
	UserPaymentStorage UserPaymentStorage `protobuf:"bytes,1,opt,name=userPaymentStorage,proto3" json:"userPaymentStorage"`
}

func (m *QueryGetUserPaymentStorageResponse) Reset()         { *m = QueryGetUserPaymentStorageResponse{} }
func (m *QueryGetUserPaymentStorageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserPaymentStorageResponse) ProtoMessage()    {}
func (*QueryGetUserPaymentStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{41}
}
func (m *QueryGetUserPaymentStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserPaymentStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserPaymentStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserPaymentStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserPaymentStorageResponse.Merge(m, src)
}
func (m *QueryGetUserPaymentStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserPaymentStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserPaymentStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserPaymentStorageResponse proto.InternalMessageInfo

func (m *QueryGetUserPaymentStorageResponse) GetUserPaymentStorage() UserPaymentStorage {
	if m != nil {
		return m.UserPaymentStorage
	}
	return UserPaymentStorage{}
}

type QueryAllUserPaymentStorageRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUserPaymentStorageRequest) Reset()         { *m = QueryAllUserPaymentStorageRequest{} }
func (m *QueryAllUserPaymentStorageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllUserPaymentStorageRequest) ProtoMessage()    {}
func (*QueryAllUserPaymentStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{42}
}
func (m *QueryAllUserPaymentStorageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUserPaymentStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUserPaymentStorageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUserPaymentStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUserPaymentStorageRequest.Merge(m, src)
}
func (m *QueryAllUserPaymentStorageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUserPaymentStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUserPaymentStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUserPaymentStorageRequest proto.InternalMessageInfo

func (m *QueryAllUserPaymentStorageRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllUserPaymentStorageResponse struct {
	UserPaymentStorage []UserPaymentStorage `protobuf:"bytes,1,rep,name=userPaymentStorage,proto3" json:"userPaymentStorage"`
	Pagination         *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUserPaymentStorageResponse) Reset()         { *m = QueryAllUserPaymentStorageResponse{} }
func (m *QueryAllUserPaymentStorageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllUserPaymentStorageResponse) ProtoMessage()    {}
func (*QueryAllUserPaymentStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{43}
}
func (m *QueryAllUserPaymentStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUserPaymentStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUserPaymentStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUserPaymentStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUserPaymentStorageResponse.Merge(m, src)
}
func (m *QueryAllUserPaymentStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUserPaymentStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUserPaymentStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUserPaymentStorageResponse proto.InternalMessageInfo

func (m *QueryAllUserPaymentStorageResponse) GetUserPaymentStorage() []UserPaymentStorage {
	if m != nil {
		return m.UserPaymentStorage
	}
	return nil
}

func (m *QueryAllUserPaymentStorageResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSessionPaymentsRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetSessionPaymentsRequest) Reset()         { *m = QueryGetSessionPaymentsRequest{} }
func (m *QueryGetSessionPaymentsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSessionPaymentsRequest) ProtoMessage()    {}
func (*QueryGetSessionPaymentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{44}
}
func (m *QueryGetSessionPaymentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSessionPaymentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSessionPaymentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSessionPaymentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSessionPaymentsRequest.Merge(m, src)
}
func (m *QueryGetSessionPaymentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSessionPaymentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSessionPaymentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSessionPaymentsRequest proto.InternalMessageInfo

func (m *QueryGetSessionPaymentsRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetSessionPaymentsResponse struct {
	SessionPayments SessionPayments `protobuf:"bytes,1,opt,name=sessionPayments,proto3" json:"sessionPayments"`
}

func (m *QueryGetSessionPaymentsResponse) Reset()         { *m = QueryGetSessionPaymentsResponse{} }
func (m *QueryGetSessionPaymentsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSessionPaymentsResponse) ProtoMessage()    {}
func (*QueryGetSessionPaymentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{45}
}
func (m *QueryGetSessionPaymentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSessionPaymentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSessionPaymentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSessionPaymentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSessionPaymentsResponse.Merge(m, src)
}
func (m *QueryGetSessionPaymentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSessionPaymentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSessionPaymentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSessionPaymentsResponse proto.InternalMessageInfo

func (m *QueryGetSessionPaymentsResponse) GetSessionPayments() SessionPayments {
	if m != nil {
		return m.SessionPayments
	}
	return SessionPayments{}
}

type QueryAllSessionPaymentsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSessionPaymentsRequest) Reset()         { *m = QueryAllSessionPaymentsRequest{} }
func (m *QueryAllSessionPaymentsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSessionPaymentsRequest) ProtoMessage()    {}
func (*QueryAllSessionPaymentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{46}
}
func (m *QueryAllSessionPaymentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSessionPaymentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSessionPaymentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSessionPaymentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSessionPaymentsRequest.Merge(m, src)
}
func (m *QueryAllSessionPaymentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSessionPaymentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSessionPaymentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSessionPaymentsRequest proto.InternalMessageInfo

func (m *QueryAllSessionPaymentsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSessionPaymentsResponse struct {
	SessionPayments []SessionPayments   `protobuf:"bytes,1,rep,name=sessionPayments,proto3" json:"sessionPayments"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSessionPaymentsResponse) Reset()         { *m = QueryAllSessionPaymentsResponse{} }
func (m *QueryAllSessionPaymentsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSessionPaymentsResponse) ProtoMessage()    {}
func (*QueryAllSessionPaymentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5f8eb2622289c7a, []int{47}
}
func (m *QueryAllSessionPaymentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSessionPaymentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSessionPaymentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSessionPaymentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSessionPaymentsResponse.Merge(m, src)
}
func (m *QueryAllSessionPaymentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSessionPaymentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSessionPaymentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSessionPaymentsResponse proto.InternalMessageInfo

func (m *QueryAllSessionPaymentsResponse) GetSessionPayments() []SessionPayments {
	if m != nil {
		return m.SessionPayments
	}
	return nil
}

func (m *QueryAllSessionPaymentsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "lavanet.lava.servicer.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "lavanet.lava.servicer.QueryParamsResponse")
	proto.RegisterType((*QueryGetStakeMapRequest)(nil), "lavanet.lava.servicer.QueryGetStakeMapRequest")
	proto.RegisterType((*QueryGetStakeMapResponse)(nil), "lavanet.lava.servicer.QueryGetStakeMapResponse")
	proto.RegisterType((*QueryAllStakeMapRequest)(nil), "lavanet.lava.servicer.QueryAllStakeMapRequest")
	proto.RegisterType((*QueryAllStakeMapResponse)(nil), "lavanet.lava.servicer.QueryAllStakeMapResponse")
	proto.RegisterType((*QueryGetSpecStakeStorageRequest)(nil), "lavanet.lava.servicer.QueryGetSpecStakeStorageRequest")
	proto.RegisterType((*QueryGetSpecStakeStorageResponse)(nil), "lavanet.lava.servicer.QueryGetSpecStakeStorageResponse")
	proto.RegisterType((*QueryAllSpecStakeStorageRequest)(nil), "lavanet.lava.servicer.QueryAllSpecStakeStorageRequest")
	proto.RegisterType((*QueryAllSpecStakeStorageResponse)(nil), "lavanet.lava.servicer.QueryAllSpecStakeStorageResponse")
	proto.RegisterType((*QueryStakedServicersRequest)(nil), "lavanet.lava.servicer.QueryStakedServicersRequest")
	proto.RegisterType((*QueryStakedServicersResponse)(nil), "lavanet.lava.servicer.QueryStakedServicersResponse")
	proto.RegisterType((*QueryGetBlockDeadlineForCallbackRequest)(nil), "lavanet.lava.servicer.QueryGetBlockDeadlineForCallbackRequest")
	proto.RegisterType((*QueryGetBlockDeadlineForCallbackResponse)(nil), "lavanet.lava.servicer.QueryGetBlockDeadlineForCallbackResponse")
	proto.RegisterType((*QueryGetUnstakingServicersAllSpecsRequest)(nil), "lavanet.lava.servicer.QueryGetUnstakingServicersAllSpecsRequest")
	proto.RegisterType((*QueryGetUnstakingServicersAllSpecsResponse)(nil), "lavanet.lava.servicer.QueryGetUnstakingServicersAllSpecsResponse")
	proto.RegisterType((*QueryAllUnstakingServicersAllSpecsRequest)(nil), "lavanet.lava.servicer.QueryAllUnstakingServicersAllSpecsRequest")
	proto.RegisterType((*QueryAllUnstakingServicersAllSpecsResponse)(nil), "lavanet.lava.servicer.QueryAllUnstakingServicersAllSpecsResponse")
	proto.RegisterType((*QueryGetPairingRequest)(nil), "lavanet.lava.servicer.QueryGetPairingRequest")
	proto.RegisterType((*QueryGetPairingResponse)(nil), "lavanet.lava.servicer.QueryGetPairingResponse")
	proto.RegisterType((*QueryGetCurrentSessionStartRequest)(nil), "lavanet.lava.servicer.QueryGetCurrentSessionStartRequest")
	proto.RegisterType((*QueryGetCurrentSessionStartResponse)(nil), "lavanet.lava.servicer.QueryGetCurrentSessionStartResponse")
	proto.RegisterType((*QueryGetPreviousSessionBlocksRequest)(nil), "lavanet.lava.servicer.QueryGetPreviousSessionBlocksRequest")
	proto.RegisterType((*QueryGetPreviousSessionBlocksResponse)(nil), "lavanet.lava.servicer.QueryGetPreviousSessionBlocksResponse")
	proto.RegisterType((*QueryGetSessionStorageForSpecRequest)(nil), "lavanet.lava.servicer.QueryGetSessionStorageForSpecRequest")
	proto.RegisterType((*QueryGetSessionStorageForSpecResponse)(nil), "lavanet.lava.servicer.QueryGetSessionStorageForSpecResponse")
	proto.RegisterType((*QueryAllSessionStorageForSpecRequest)(nil), "lavanet.lava.servicer.QueryAllSessionStorageForSpecRequest")
	proto.RegisterType((*QueryAllSessionStorageForSpecResponse)(nil), "lavanet.lava.servicer.QueryAllSessionStorageForSpecResponse")
	proto.RegisterType((*QuerySessionStorageForAllSpecsRequest)(nil), "lavanet.lava.servicer.QuerySessionStorageForAllSpecsRequest")
	proto.RegisterType((*QuerySessionStorageForAllSpecsResponse)(nil), "lavanet.lava.servicer.QuerySessionStorageForAllSpecsResponse")
	proto.RegisterType((*QueryAllSessionStoragesForSpecRequest)(nil), "lavanet.lava.servicer.QueryAllSessionStoragesForSpecRequest")
	proto.RegisterType((*QueryAllSessionStoragesForSpecResponse)(nil), "lavanet.lava.servicer.QueryAllSessionStoragesForSpecResponse")
	proto.RegisterType((*QueryGetEarliestSessionStartRequest)(nil), "lavanet.lava.servicer.QueryGetEarliestSessionStartRequest")
	proto.RegisterType((*QueryGetEarliestSessionStartResponse)(nil), "lavanet.lava.servicer.QueryGetEarliestSessionStartResponse")
	proto.RegisterType((*QueryVerifyPairingRequest)(nil), "lavanet.lava.servicer.QueryVerifyPairingRequest")
	proto.RegisterType((*QueryVerifyPairingResponse)(nil), "lavanet.lava.servicer.QueryVerifyPairingResponse")
	proto.RegisterType((*QueryGetUniquePaymentStorageUserServicerRequest)(nil), "lavanet.lava.servicer.QueryGetUniquePaymentStorageUserServicerRequest")
	proto.RegisterType((*QueryGetUniquePaymentStorageUserServicerResponse)(nil), "lavanet.lava.servicer.QueryGetUniquePaymentStorageUserServicerResponse")
	proto.RegisterType((*QueryAllUniquePaymentStorageUserServicerRequest)(nil), "lavanet.lava.servicer.QueryAllUniquePaymentStorageUserServicerRequest")
	proto.RegisterType((*QueryAllUniquePaymentStorageUserServicerResponse)(nil), "lavanet.lava.servicer.QueryAllUniquePaymentStorageUserServicerResponse")
	proto.RegisterType((*QueryGetUserPaymentStorageRequest)(nil), "lavanet.lava.servicer.QueryGetUserPaymentStorageRequest")
	proto.RegisterType((*QueryGetUserPaymentStorageResponse)(nil), "lavanet.lava.servicer.QueryGetUserPaymentStorageResponse")
	proto.RegisterType((*QueryAllUserPaymentStorageRequest)(nil), "lavanet.lava.servicer.QueryAllUserPaymentStorageRequest")
	proto.RegisterType((*QueryAllUserPaymentStorageResponse)(nil), "lavanet.lava.servicer.QueryAllUserPaymentStorageResponse")
	proto.RegisterType((*QueryGetSessionPaymentsRequest)(nil), "lavanet.lava.servicer.QueryGetSessionPaymentsRequest")
	proto.RegisterType((*QueryGetSessionPaymentsResponse)(nil), "lavanet.lava.servicer.QueryGetSessionPaymentsResponse")
	proto.RegisterType((*QueryAllSessionPaymentsRequest)(nil), "lavanet.lava.servicer.QueryAllSessionPaymentsRequest")
	proto.RegisterType((*QueryAllSessionPaymentsResponse)(nil), "lavanet.lava.servicer.QueryAllSessionPaymentsResponse")
}

func init() { proto.RegisterFile("servicer/query.proto", fileDescriptor_d5f8eb2622289c7a) }

var fileDescriptor_d5f8eb2622289c7a = []byte{
	// 2129 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5a, 0x4f, 0x6c, 0x1c, 0x57,
	0x19, 0xcf, 0xb3, 0x9d, 0xe0, 0xbc, 0x16, 0x52, 0xbd, 0xd8, 0xc5, 0x1d, 0x12, 0xdb, 0x7d, 0x89,
	0xe3, 0x3f, 0x49, 0x76, 0xe2, 0x38, 0xb1, 0xe3, 0x38, 0x25, 0x71, 0x4c, 0xed, 0x03, 0x10, 0xb9,
	0x6b, 0xb5, 0x52, 0x11, 0x68, 0x35, 0xde, 0x7d, 0xdd, 0x8c, 0x3c, 0xde, 0xd9, 0xcc, 0xcc, 0x9a,
	0x58, 0x96, 0x05, 0x42, 0x02, 0x54, 0x21, 0x24, 0x10, 0x17, 0x2e, 0x3d, 0xc2, 0x8d, 0x1b, 0x42,
	0xe2, 0x52, 0x89, 0x1e, 0xaa, 0x8a, 0x43, 0xa9, 0xd4, 0x03, 0x88, 0x03, 0x82, 0x24, 0x67, 0x4e,
	0xdc, 0xb8, 0xa0, 0x79, 0xf3, 0xbd, 0x99, 0xdd, 0xd9, 0xf7, 0x67, 0x77, 0x3d, 0xf4, 0xb4, 0x3b,
	0xf3, 0xbe, 0x3f, 0xbf, 0xdf, 0xf7, 0x7d, 0xef, 0xcf, 0x7c, 0x33, 0x78, 0x2c, 0x64, 0xc1, 0x81,
	0x5b, 0x65, 0x81, 0xfd, 0xa4, 0xc5, 0x82, 0xc3, 0x52, 0x33, 0xf0, 0x23, 0x9f, 0x8c, 0x7b, 0xce,
	0x81, 0xd3, 0x60, 0x51, 0x29, 0xfe, 0x2d, 0x09, 0x11, 0xeb, 0x42, 0xdd, 0xf7, 0xeb, 0x1e, 0xb3,
	0x9d, 0xa6, 0x6b, 0x3b, 0x8d, 0x86, 0x1f, 0x39, 0x91, 0xeb, 0x37, 0xc2, 0x44, 0xc9, 0x5a, 0xa8,
	0xfa, 0xe1, 0xbe, 0x1f, 0xda, 0xbb, 0x4e, 0xc8, 0x12, 0x6b, 0xf6, 0xc1, 0xe2, 0x2e, 0x8b, 0x9c,
	0x45, 0xbb, 0xe9, 0xd4, 0xdd, 0x06, 0x17, 0x06, 0xd9, 0xf1, 0xd4, 0x6d, 0xd3, 0x09, 0x9c, 0x7d,
	0x61, 0x62, 0x22, 0xbd, 0x1d, 0x46, 0xce, 0x1e, 0xab, 0xec, 0x3b, 0x4d, 0x18, 0x79, 0x3d, 0x1b,
	0x69, 0xb2, 0x6a, 0x25, 0x19, 0x0e, 0x23, 0x3f, 0x70, 0xea, 0x4c, 0xf8, 0x4f, 0x45, 0x76, 0x3d,
	0xbf, 0xba, 0x57, 0xa9, 0x31, 0xa7, 0xe6, 0xb9, 0x0d, 0x56, 0x79, 0xcf, 0x0f, 0x2a, 0x55, 0xc7,
	0xf3, 0x76, 0x9d, 0xea, 0x1e, 0xc8, 0x5e, 0x4b, 0x65, 0x5b, 0x8d, 0xd8, 0x96, 0xdb, 0xa8, 0x57,
	0xc4, 0xad, 0xb0, 0xe2, 0x78, 0x5e, 0x25, 0x76, 0x23, 0x60, 0x5d, 0x4e, 0xa5, 0xab, 0xad, 0x20,
	0x60, 0x8d, 0xa8, 0x12, 0xb2, 0x30, 0x74, 0xfd, 0x46, 0x8c, 0x23, 0x88, 0x40, 0xea, 0x4a, 0xc6,
	0x29, 0x60, 0x07, 0xae, 0xdf, 0x0a, 0x53, 0x31, 0x0e, 0x48, 0x58, 0x9b, 0xcd, 0xa8, 0xa4, 0x56,
	0x38, 0x0f, 0x0e, 0x34, 0xf6, 0x0b, 0x82, 0x33, 0xa9, 0x20, 0x73, 0x02, 0xcf, 0x65, 0xa1, 0xdc,
	0xef, 0x54, 0x97, 0xbd, 0xa6, 0x73, 0xb8, 0xcf, 0x1a, 0x91, 0x70, 0x78, 0x29, 0x23, 0x1b, 0xb2,
	0x40, 0x8c, 0xe6, 0xa2, 0xb7, 0xd4, 0x16, 0x11, 0xf7, 0x49, 0x8b, 0xe5, 0xc5, 0x2a, 0x5c, 0x57,
	0x08, 0x81, 0xd2, 0x85, 0x5c, 0xbe, 0x3a, 0x4d, 0x4e, 0xe4, 0x12, 0xd2, 0x68, 0xed, 0xc3, 0xc8,
	0x64, 0x7b, 0xa9, 0x88, 0x22, 0xa9, 0xfa, 0xae, 0x28, 0x8f, 0xb1, 0xba, 0x5f, 0xf7, 0xf9, 0x5f,
	0x3b, 0xfe, 0x97, 0xdc, 0xa5, 0x63, 0x98, 0xbc, 0x15, 0x97, 0xd5, 0x36, 0x2f, 0x99, 0x32, 0x7b,
	0xd2, 0x62, 0x61, 0x44, 0xcb, 0xf8, 0x7c, 0xc7, 0xdd, 0xb0, 0xe9, 0x37, 0x42, 0x46, 0xd6, 0xf0,
	0x99, 0xa4, 0xb4, 0x26, 0xd0, 0x34, 0x9a, 0x7b, 0xe9, 0xe6, 0xc5, 0x92, 0xb4, 0xa6, 0x4b, 0x89,
	0xda, 0xc3, 0x91, 0x4f, 0xfe, 0x31, 0x75, 0xaa, 0x0c, 0x2a, 0xd4, 0xc6, 0x5f, 0xe5, 0x36, 0xb7,
	0x58, 0xb4, 0x13, 0x13, 0xfb, 0xb6, 0xd3, 0x04, 0x77, 0x64, 0x0c, 0x9f, 0x76, 0x1b, 0x35, 0xf6,
	0x94, 0x9b, 0x3d, 0x5b, 0x4e, 0x2e, 0xe8, 0xf7, 0xf0, 0x44, 0xb7, 0x02, 0x20, 0x59, 0xc7, 0xa3,
	0x21, 0xdc, 0x03, 0x2c, 0x53, 0x0a, 0x2c, 0x42, 0x15, 0xd0, 0xa4, 0x6a, 0xd4, 0x01, 0x3c, 0xeb,
	0x9e, 0x97, 0xc7, 0xb3, 0x89, 0x71, 0x36, 0xbb, 0xc0, 0xfe, 0x95, 0x52, 0x12, 0xdf, 0x52, 0x1c,
	0xdf, 0x52, 0x32, 0xb1, 0x21, 0xca, 0xa5, 0x6d, 0xa7, 0xce, 0x40, 0xb7, 0xdc, 0xa6, 0x49, 0x7f,
	0x8b, 0x80, 0x42, 0x87, 0x0f, 0x29, 0x85, 0xe1, 0x01, 0x28, 0x90, 0xad, 0x0e, 0x9c, 0x43, 0x1c,
	0xe7, 0xac, 0x11, 0x67, 0xe2, 0xbf, 0x03, 0xe8, 0x0a, 0x9e, 0x4a, 0x43, 0xdd, 0x64, 0x55, 0xee,
	0x70, 0x27, 0xa9, 0x3b, 0x7d, 0x8e, 0x8e, 0xf1, 0xb4, 0x5a, 0x11, 0x88, 0xbe, 0x8b, 0x5f, 0x09,
	0x73, 0x63, 0x10, 0xd3, 0x59, 0x15, 0xe1, 0x9c, 0x38, 0x10, 0xef, 0x32, 0x43, 0x5d, 0xc0, 0x1d,
	0xc7, 0x57, 0x81, 0xbb, 0xa8, 0x5c, 0x7e, 0x8c, 0x80, 0xaa, 0xd4, 0x97, 0x96, 0xea, 0x70, 0x01,
	0x54, 0x8b, 0xcb, 0xf5, 0x2a, 0xfe, 0x1a, 0xe7, 0xc1, 0xad, 0xd7, 0x76, 0xc4, 0x02, 0x2d, 0xe2,
	0x65, 0xe1, 0xd1, 0xd8, 0xf7, 0x23, 0x67, 0x9f, 0x41, 0xaa, 0xd3, 0x6b, 0xfa, 0x03, 0x7c, 0x41,
	0xae, 0x0a, 0xf4, 0xb7, 0xf0, 0xcb, 0x61, 0x77, 0x96, 0x2f, 0xe9, 0xca, 0x5a, 0x44, 0xb0, 0x43,
	0x91, 0xbc, 0x8a, 0xcf, 0xf8, 0xad, 0xa8, 0xd9, 0x8a, 0x38, 0xd1, 0xb3, 0x65, 0xb8, 0xa2, 0xf3,
	0x78, 0x56, 0x94, 0xdb, 0xc3, 0x78, 0xf9, 0xfb, 0x06, 0x6c, 0x47, 0x9b, 0x7e, 0xb0, 0x01, 0x9b,
	0x91, 0x58, 0xc2, 0x3e, 0x40, 0x78, 0xce, 0x2c, 0x0b, 0xc0, 0x9f, 0xe0, 0x09, 0x95, 0x0c, 0x90,
	0xb0, 0x15, 0x24, 0x54, 0x6a, 0x90, 0x47, 0xa5, 0x59, 0xba, 0x86, 0xe7, 0x05, 0xbc, 0xb7, 0xc5,
	0x76, 0x99, 0x46, 0x14, 0x6a, 0x2c, 0x4d, 0xca, 0x57, 0xf0, 0x90, 0x5b, 0xe3, 0x48, 0x46, 0xca,
	0x43, 0x6e, 0x8d, 0xfe, 0x06, 0xe1, 0x85, 0x5e, 0xb4, 0x81, 0xde, 0xf7, 0xb1, 0xa5, 0x96, 0x02,
	0x82, 0x8b, 0x0a, 0x82, 0x6a, 0x45, 0xa0, 0xa8, 0x31, 0x4d, 0x43, 0x20, 0xb9, 0xee, 0x79, 0x66,
	0x92, 0x45, 0xcd, 0xd4, 0x7f, 0x8b, 0xe0, 0x18, 0xbc, 0xf6, 0x18, 0x9c, 0xe1, 0xff, 0x53, 0x70,
	0x8a, 0x9b, 0xd1, 0xdb, 0xf8, 0x55, 0x51, 0x0c, 0xdb, 0x8e, 0x1b, 0xb8, 0x8d, 0x7a, 0x0f, 0x93,
	0x39, 0x1e, 0x8b, 0x8f, 0x1f, 0xeb, 0xb5, 0x5a, 0x00, 0xb3, 0x2c, 0xbd, 0xa6, 0xdf, 0xcd, 0xf6,
	0xea, 0xd4, 0x62, 0xba, 0x6d, 0x9d, 0x4d, 0x0f, 0x75, 0xfd, 0x4c, 0xf0, 0x4c, 0x8b, 0x5e, 0xc6,
	0x54, 0x58, 0xdf, 0x48, 0xce, 0x7e, 0x3b, 0xc9, 0x21, 0x6b, 0x27, 0x3e, 0x81, 0x89, 0x09, 0xfc,
	0x3e, 0xc2, 0x97, 0xb4, 0x62, 0x00, 0x68, 0x17, 0x9f, 0x97, 0x0c, 0x03, 0xb4, 0x05, 0x05, 0x34,
	0x89, 0x06, 0x64, 0x4c, 0x66, 0x8c, 0x5e, 0xc1, 0x97, 0xd3, 0x78, 0xc0, 0x39, 0x14, 0xc6, 0xf9,
	0xfc, 0x4e, 0xcf, 0x4d, 0xbf, 0x44, 0x78, 0xc6, 0x20, 0x08, 0xa8, 0x1f, 0xe3, 0x71, 0xa9, 0x00,
	0xe0, 0xbe, 0xa6, 0x3a, 0x59, 0xc9, 0x74, 0x00, 0xb9, 0xdc, 0x20, 0xbd, 0x97, 0x61, 0x4f, 0x39,
	0xf1, 0x94, 0x6c, 0xfa, 0x41, 0x5c, 0x88, 0xfa, 0x0d, 0xbe, 0x9d, 0x91, 0x42, 0x3d, 0x63, 0x14,
	0xca, 0x04, 0x0c, 0x8c, 0xa4, 0x46, 0x05, 0x23, 0xa9, 0x41, 0xda, 0x00, 0x46, 0xf1, 0x4c, 0xd2,
	0x31, 0x2a, 0x6a, 0x41, 0xf9, 0xbb, 0x88, 0x81, 0xda, 0xa1, 0x39, 0x06, 0xc3, 0x85, 0xc6, 0xa0,
	0xb8, 0xc5, 0x63, 0x03, 0xb8, 0x75, 0x61, 0xc8, 0x2f, 0xcf, 0x16, 0x1e, 0xe5, 0x8f, 0x1c, 0x8f,
	0x5a, 0xfb, 0xb0, 0x13, 0xa5, 0xd7, 0x74, 0x0f, 0x5f, 0x31, 0x19, 0x29, 0x6e, 0xf9, 0xd8, 0x50,
	0x65, 0x23, 0xcc, 0xe5, 0x5f, 0x77, 0x94, 0x79, 0x0a, 0x88, 0x35, 0x46, 0x00, 0xf1, 0xa3, 0xf8,
	0x9c, 0x9e, 0x0c, 0x9d, 0x20, 0x8d, 0xa9, 0x0d, 0x3a, 0x93, 0x2d, 0x6b, 0x6f, 0xc2, 0x23, 0xa8,
	0x6c, 0xf9, 0xfb, 0x39, 0xca, 0xe6, 0xad, 0x5c, 0x0e, 0xf0, 0x31, 0x3c, 0x26, 0x1b, 0x87, 0xe0,
	0x5e, 0x55, 0x60, 0x95, 0xa9, 0x00, 0x54, 0xa9, 0x39, 0xfa, 0x33, 0x84, 0x5f, 0xe3, 0x78, 0xde,
	0x61, 0x81, 0xfb, 0xde, 0x61, 0x6e, 0xa3, 0x21, 0x78, 0x24, 0x14, 0x73, 0x7d, 0xa4, 0xcc, 0xff,
	0xeb, 0x36, 0x18, 0x42, 0xf1, 0xcb, 0x02, 0x0a, 0x1f, 0x1f, 0xe6, 0xe3, 0x1d, 0xf7, 0x3a, 0x0a,
	0x6e, 0x24, 0x57, 0x70, 0xdf, 0xc2, 0x96, 0x0c, 0x0c, 0x84, 0x64, 0x0c, 0x9f, 0x3e, 0x70, 0x3c,
	0x38, 0x31, 0x8d, 0x96, 0x93, 0x0b, 0x32, 0x81, 0xbf, 0xe4, 0x1f, 0xb0, 0xc0, 0x73, 0x9a, 0x13,
	0xa7, 0xf9, 0x7d, 0x71, 0x49, 0xb7, 0xb0, 0x9d, 0x9d, 0xa6, 0xe2, 0x07, 0xf5, 0xed, 0xe4, 0x39,
	0x1d, 0x32, 0xf9, 0x76, 0xc8, 0x02, 0xb1, 0x7d, 0xeb, 0x57, 0xcb, 0x0f, 0x11, 0xbe, 0xd1, 0xbb,
	0x25, 0x40, 0xfb, 0x3e, 0xc2, 0xd3, 0x2d, 0x83, 0x30, 0x64, 0x73, 0x45, 0x79, 0x0e, 0xd1, 0xab,
	0x43, 0x66, 0x8d, 0x6e, 0xe8, 0x21, 0x44, 0x82, 0x1f, 0x9d, 0x7a, 0x8b, 0x44, 0x51, 0xab, 0xec,
	0x4f, 0x87, 0x20, 0x76, 0x3d, 0xf9, 0xee, 0x2f, 0x76, 0xc3, 0x5f, 0x40, 0xec, 0x8a, 0x7c, 0x42,
	0x7b, 0x3d, 0x2d, 0xa2, 0x90, 0x05, 0x9d, 0x2e, 0xf5, 0x05, 0xf8, 0x63, 0x94, 0x9d, 0xad, 0x64,
	0xba, 0x10, 0xb6, 0x0a, 0x26, 0xad, 0xae, 0x51, 0xc8, 0xdd, 0xbc, 0x2a, 0x4e, 0x5d, 0x0a, 0x10,
	0x19, 0x89, 0x29, 0xba, 0x07, 0x14, 0xe2, 0x5c, 0x2a, 0x29, 0x14, 0x55, 0x39, 0x9f, 0x0a, 0xd2,
	0x0a, 0x6f, 0x06, 0xd2, 0xc3, 0x05, 0x91, 0x2e, 0xae, 0x00, 0x96, 0xf1, 0x64, 0xee, 0xcc, 0x05,
	0x9e, 0x42, 0x7d, 0xf6, 0x0f, 0xdb, 0xda, 0x38, 0x79, 0x3d, 0x08, 0xc2, 0x3b, 0xf8, 0x5c, 0xd8,
	0x39, 0x94, 0x06, 0x5e, 0xbb, 0xa9, 0x09, 0x69, 0xa0, 0x9f, 0x37, 0x42, 0x1f, 0x03, 0xe4, 0x6c,
	0x3f, 0xcd, 0x43, 0x2e, 0x2a, 0xdb, 0x1f, 0xa1, 0xb6, 0xa6, 0x4f, 0x3f, 0x2c, 0x87, 0x4f, 0xcc,
	0xb2, 0xb0, 0x0c, 0xdf, 0xfc, 0xcf, 0x0c, 0x3e, 0xcd, 0x49, 0x90, 0x9f, 0x20, 0x7c, 0x26, 0xe9,
	0x97, 0x12, 0x55, 0x11, 0x76, 0x37, 0x68, 0xad, 0x85, 0x5e, 0x44, 0x13, 0xbf, 0x74, 0xe6, 0x47,
	0x9f, 0xbf, 0xf8, 0xd5, 0xd0, 0x14, 0xb9, 0x68, 0x83, 0x0e, 0xff, 0xb5, 0x73, 0x6f, 0x0b, 0xc8,
	0x07, 0x08, 0x8f, 0x8a, 0x4e, 0x23, 0x29, 0xe9, 0xec, 0x77, 0x77, 0x70, 0x2d, 0xbb, 0x67, 0x79,
	0x00, 0x75, 0x83, 0x83, 0x5a, 0x20, 0x73, 0x0a, 0x50, 0xe9, 0xbb, 0x0a, 0xfb, 0x88, 0xd7, 0xf6,
	0x31, 0xf9, 0x35, 0xc2, 0x2f, 0x09, 0x33, 0xeb, 0x9e, 0xa7, 0x87, 0xd8, 0xdd, 0xd4, 0xd5, 0x43,
	0x94, 0x34, 0x68, 0xe9, 0x1c, 0x87, 0x48, 0xc9, 0xb4, 0x09, 0x22, 0xf9, 0x10, 0xe1, 0x57, 0xf2,
	0x8d, 0x3c, 0xb2, 0x6c, 0x0a, 0x89, 0xbc, 0x61, 0x69, 0xad, 0xf4, 0xad, 0x07, 0x78, 0x57, 0x39,
	0xde, 0x25, 0xb2, 0xa8, 0xc2, 0xdb, 0xf5, 0x92, 0x27, 0x8d, 0xed, 0x1f, 0x11, 0x3e, 0x9f, 0xb7,
	0x1b, 0xc7, 0x78, 0xd9, 0x14, 0xb3, 0x41, 0x38, 0x68, 0x1a, 0xa8, 0x74, 0x91, 0x73, 0xb8, 0x4a,
	0xe6, 0x7b, 0xe6, 0x40, 0xfe, 0x80, 0xf0, 0xb9, 0x5c, 0x43, 0x92, 0xdc, 0xd4, 0xf9, 0x97, 0x37,
	0x3e, 0xad, 0xa5, 0xbe, 0x74, 0x00, 0xef, 0x5d, 0x8e, 0xf7, 0x16, 0xb9, 0xa9, 0xab, 0x91, 0x5a,
	0xf6, 0x1a, 0xcc, 0x3e, 0x12, 0x4f, 0x20, 0xc7, 0xe4, 0xaf, 0x48, 0xdd, 0x75, 0x24, 0x5f, 0x37,
	0x54, 0x81, 0xa1, 0xfd, 0x69, 0xdd, 0x1f, 0x58, 0xbf, 0x47, 0x66, 0x9a, 0xf7, 0x81, 0xe4, 0x05,
	0xd2, 0xf5, 0xd4, 0xc8, 0x03, 0x03, 0x36, 0x63, 0xab, 0xd0, 0x5a, 0x3f, 0x81, 0x05, 0xe0, 0xb7,
	0xce, 0xf9, 0xad, 0x91, 0x55, 0x05, 0x3f, 0xed, 0x3b, 0x4c, 0xfb, 0xc8, 0xad, 0x1d, 0x93, 0x67,
	0x08, 0x5f, 0x54, 0x7b, 0x8a, 0xe7, 0xcf, 0x03, 0xc3, 0x3c, 0x38, 0x21, 0xd3, 0x9e, 0x1a, 0x9c,
	0xf4, 0x1e, 0x67, 0xba, 0x4c, 0x6e, 0x0d, 0xc2, 0x94, 0xfc, 0x0e, 0x61, 0x9c, 0xb5, 0x01, 0xc9,
	0x75, 0x43, 0xe4, 0x3b, 0x9f, 0x0b, 0xad, 0x52, 0xaf, 0xe2, 0x80, 0xf5, 0x01, 0xc7, 0x7a, 0x97,
	0xdc, 0x51, 0x60, 0xad, 0xb3, 0xa8, 0xd2, 0x4c, 0x74, 0xda, 0xa6, 0x92, 0x7d, 0x24, 0x1e, 0x2c,
	0x8f, 0xc9, 0x47, 0x48, 0xda, 0x0f, 0x24, 0xab, 0x06, 0x24, 0xea, 0x4e, 0xa4, 0x75, 0x77, 0x10,
	0x55, 0x20, 0x74, 0x8b, 0x13, 0x2a, 0x91, 0x6b, 0x0a, 0x42, 0xd2, 0x97, 0xdf, 0xe4, 0xcf, 0x48,
	0xd1, 0x1e, 0x24, 0x6b, 0xa6, 0x80, 0x6a, 0xda, 0x93, 0xd6, 0xbd, 0xc1, 0x94, 0x81, 0xca, 0x32,
	0xa7, 0x72, 0x83, 0x94, 0x54, 0xe7, 0x08, 0xf9, 0x1b, 0x7a, 0xf2, 0x39, 0xc2, 0xe3, 0xd2, 0xd6,
	0x88, 0x91, 0x8c, 0xae, 0xbb, 0x67, 0x24, 0xa3, 0xed, 0xd4, 0xd1, 0xfb, 0x9c, 0xcc, 0x2a, 0x59,
	0x51, 0x2d, 0xdc, 0x8a, 0xcf, 0x08, 0xd2, 0x2d, 0xf3, 0x53, 0x84, 0x27, 0xa4, 0x2e, 0xe2, 0x79,
	0xbf, 0x66, 0xda, 0xff, 0x06, 0x26, 0x66, 0x6a, 0x41, 0xd2, 0x15, 0x4e, 0x6c, 0x91, 0xd8, 0x7d,
	0x12, 0x23, 0xff, 0x42, 0xf8, 0x35, 0x65, 0xff, 0x8e, 0x68, 0x41, 0x99, 0x7a, 0x87, 0xd6, 0x1b,
	0x03, 0x6a, 0x03, 0xa7, 0x2d, 0xce, 0x69, 0x9d, 0xdc, 0xef, 0x83, 0x53, 0xdb, 0x5a, 0x2d, 0xba,
	0x46, 0xc7, 0x9c, 0xa3, 0xb2, 0xe3, 0x47, 0xfa, 0x0b, 0x7c, 0xae, 0xdb, 0xa8, 0xe7, 0x68, 0x6c,
	0x33, 0x1a, 0x39, 0x72, 0x3e, 0x9d, 0x3c, 0xc3, 0xb6, 0xaa, 0xcc, 0x8e, 0x15, 0x1f, 0x23, 0x79,
	0x43, 0x90, 0x98, 0x96, 0x31, 0x4d, 0x37, 0xd2, 0x5a, 0x1b, 0x48, 0x17, 0xa8, 0xdd, 0xe6, 0xd4,
	0x6c, 0x72, 0x5d, 0x41, 0x4d, 0xfe, 0x25, 0x0e, 0xf9, 0x0b, 0xc2, 0x5f, 0xee, 0xe8, 0xef, 0x91,
	0x1b, 0x3a, 0x14, 0xb2, 0xbe, 0xa4, 0xb5, 0xd8, 0x87, 0x06, 0xa0, 0x7d, 0x97, 0xa3, 0xdd, 0x21,
	0x6f, 0x29, 0xd0, 0x1e, 0x70, 0xad, 0xce, 0x5d, 0xa8, 0x7d, 0x07, 0xb2, 0x8f, 0xda, 0xbb, 0x98,
	0xc7, 0xed, 0xe5, 0xf7, 0xc3, 0x21, 0x3c, 0x6d, 0x6a, 0x37, 0x91, 0x4d, 0xe3, 0xd9, 0xa6, 0xa7,
	0xbe, 0x9c, 0xb5, 0x75, 0x62, 0x3b, 0x10, 0x90, 0x6f, 0xf2, 0x80, 0xbc, 0x49, 0x36, 0x94, 0xe7,
	0x07, 0xf3, 0xb7, 0x4d, 0xe9, 0xb2, 0xf9, 0x5f, 0x84, 0x2f, 0x99, 0x3c, 0xc7, 0x2b, 0xe8, 0xa6,
	0xf1, 0xdc, 0x53, 0x40, 0x14, 0xfa, 0xe8, 0x34, 0xd2, 0x0d, 0x1e, 0x85, 0x37, 0xc8, 0xda, 0x09,
	0xa2, 0x10, 0xcf, 0x4d, 0xd2, 0xdd, 0x52, 0x22, 0x77, 0x4c, 0xa9, 0x52, 0xb5, 0xd0, 0xac, 0xd5,
	0x01, 0x34, 0x81, 0xd0, 0x1a, 0x27, 0x74, 0x9b, 0x2c, 0xa9, 0x08, 0x49, 0xbe, 0x6b, 0x4b, 0xd3,
	0xf8, 0x27, 0x84, 0xc7, 0xbb, 0x6d, 0xc7, 0x89, 0xbb, 0x63, 0x0a, 0xf8, 0x60, 0x5c, 0xb4, 0xad,
	0x3d, 0xba, 0xc4, 0xb9, 0x5c, 0x27, 0x57, 0xfb, 0xe0, 0x12, 0x3f, 0xf4, 0x9e, 0xcb, 0xf5, 0x7d,
	0xc8, 0xed, 0xde, 0x0e, 0x15, 0xb9, 0xde, 0x96, 0xb5, 0xdc, 0xaf, 0x5a, 0x9f, 0x9b, 0xb5, 0xf8,
	0xf8, 0x30, 0x8d, 0xff, 0xef, 0x11, 0x26, 0x39, 0xa3, 0x71, 0xf0, 0x6f, 0xf7, 0xb6, 0x07, 0xf5,
	0x05, 0x5f, 0xdd, 0x66, 0xa3, 0x36, 0x87, 0x3f, 0x4f, 0x66, 0x7b, 0x84, 0xff, 0xf0, 0xe1, 0x27,
	0xcf, 0x26, 0xd1, 0x67, 0xcf, 0x26, 0xd1, 0x3f, 0x9f, 0x4d, 0xa2, 0x5f, 0x3c, 0x9f, 0x3c, 0xf5,
	0xd9, 0xf3, 0xc9, 0x53, 0x7f, 0x7b, 0x3e, 0x79, 0xea, 0x3b, 0x73, 0x75, 0x37, 0x7a, 0xdc, 0xda,
	0x2d, 0x55, 0xfd, 0xfd, 0x4e, 0x63, 0x4f, 0x33, 0x73, 0xd1, 0x61, 0x93, 0x85, 0xbb, 0x67, 0xf8,
	0x87, 0x8b, 0x4b, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xd2, 0xa0, 0x28, 0x5c, 0x66, 0x2b, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a StakeMap by index.
	StakeMap(ctx context.Context, in *QueryGetStakeMapRequest, opts ...grpc.CallOption) (*QueryGetStakeMapResponse, error)
	// Queries a list of StakeMap items.
	StakeMapAll(ctx context.Context, in *QueryAllStakeMapRequest, opts ...grpc.CallOption) (*QueryAllStakeMapResponse, error)
	// Queries a SpecStakeStorage by index.
	SpecStakeStorage(ctx context.Context, in *QueryGetSpecStakeStorageRequest, opts ...grpc.CallOption) (*QueryGetSpecStakeStorageResponse, error)
	// Queries a list of SpecStakeStorage items.
	SpecStakeStorageAll(ctx context.Context, in *QueryAllSpecStakeStorageRequest, opts ...grpc.CallOption) (*QueryAllSpecStakeStorageResponse, error)
	// Queries a list of StakedServicers items.
	StakedServicers(ctx context.Context, in *QueryStakedServicersRequest, opts ...grpc.CallOption) (*QueryStakedServicersResponse, error)
	// Queries a BlockDeadlineForCallback by index.
	BlockDeadlineForCallback(ctx context.Context, in *QueryGetBlockDeadlineForCallbackRequest, opts ...grpc.CallOption) (*QueryGetBlockDeadlineForCallbackResponse, error)
	// Queries a UnstakingServicersAllSpecs by id.
	UnstakingServicersAllSpecs(ctx context.Context, in *QueryGetUnstakingServicersAllSpecsRequest, opts ...grpc.CallOption) (*QueryGetUnstakingServicersAllSpecsResponse, error)
	// Queries a list of UnstakingServicersAllSpecs items.
	UnstakingServicersAllSpecsAll(ctx context.Context, in *QueryAllUnstakingServicersAllSpecsRequest, opts ...grpc.CallOption) (*QueryAllUnstakingServicersAllSpecsResponse, error)
	// Queries a list of GetPairing items.
	GetPairing(ctx context.Context, in *QueryGetPairingRequest, opts ...grpc.CallOption) (*QueryGetPairingResponse, error)
	// Queries a CurrentSessionStart by index.
	CurrentSessionStart(ctx context.Context, in *QueryGetCurrentSessionStartRequest, opts ...grpc.CallOption) (*QueryGetCurrentSessionStartResponse, error)
	// Queries a PreviousSessionBlocks by index.
	PreviousSessionBlocks(ctx context.Context, in *QueryGetPreviousSessionBlocksRequest, opts ...grpc.CallOption) (*QueryGetPreviousSessionBlocksResponse, error)
	// Queries a SessionStorageForSpec by index.
	SessionStorageForSpec(ctx context.Context, in *QueryGetSessionStorageForSpecRequest, opts ...grpc.CallOption) (*QueryGetSessionStorageForSpecResponse, error)
	// Queries a list of SessionStorageForSpec items.
	SessionStorageForSpecAll(ctx context.Context, in *QueryAllSessionStorageForSpecRequest, opts ...grpc.CallOption) (*QueryAllSessionStorageForSpecResponse, error)
	// Queries a list of SessionStorageForAllSpecs items.
	SessionStorageForAllSpecs(ctx context.Context, in *QuerySessionStorageForAllSpecsRequest, opts ...grpc.CallOption) (*QuerySessionStorageForAllSpecsResponse, error)
	// Queries a list of AllSessionStoragesForSpec items.
	AllSessionStoragesForSpec(ctx context.Context, in *QueryAllSessionStoragesForSpecRequest, opts ...grpc.CallOption) (*QueryAllSessionStoragesForSpecResponse, error)
	// Queries a EarliestSessionStart by index.
	EarliestSessionStart(ctx context.Context, in *QueryGetEarliestSessionStartRequest, opts ...grpc.CallOption) (*QueryGetEarliestSessionStartResponse, error)
	// Queries a list of VerifyPairing items.
	VerifyPairing(ctx context.Context, in *QueryVerifyPairingRequest, opts ...grpc.CallOption) (*QueryVerifyPairingResponse, error)
	// Queries a UniquePaymentStorageUserServicer by index.
	UniquePaymentStorageUserServicer(ctx context.Context, in *QueryGetUniquePaymentStorageUserServicerRequest, opts ...grpc.CallOption) (*QueryGetUniquePaymentStorageUserServicerResponse, error)
	// Queries a list of UniquePaymentStorageUserServicer items.
	UniquePaymentStorageUserServicerAll(ctx context.Context, in *QueryAllUniquePaymentStorageUserServicerRequest, opts ...grpc.CallOption) (*QueryAllUniquePaymentStorageUserServicerResponse, error)
	// Queries a UserPaymentStorage by index.
	UserPaymentStorage(ctx context.Context, in *QueryGetUserPaymentStorageRequest, opts ...grpc.CallOption) (*QueryGetUserPaymentStorageResponse, error)
	// Queries a list of UserPaymentStorage items.
	UserPaymentStorageAll(ctx context.Context, in *QueryAllUserPaymentStorageRequest, opts ...grpc.CallOption) (*QueryAllUserPaymentStorageResponse, error)
	// Queries a SessionPayments by index.
	SessionPayments(ctx context.Context, in *QueryGetSessionPaymentsRequest, opts ...grpc.CallOption) (*QueryGetSessionPaymentsResponse, error)
	// Queries a list of SessionPayments items.
	SessionPaymentsAll(ctx context.Context, in *QueryAllSessionPaymentsRequest, opts ...grpc.CallOption) (*QueryAllSessionPaymentsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakeMap(ctx context.Context, in *QueryGetStakeMapRequest, opts ...grpc.CallOption) (*QueryGetStakeMapResponse, error) {
	out := new(QueryGetStakeMapResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/StakeMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakeMapAll(ctx context.Context, in *QueryAllStakeMapRequest, opts ...grpc.CallOption) (*QueryAllStakeMapResponse, error) {
	out := new(QueryAllStakeMapResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/StakeMapAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpecStakeStorage(ctx context.Context, in *QueryGetSpecStakeStorageRequest, opts ...grpc.CallOption) (*QueryGetSpecStakeStorageResponse, error) {
	out := new(QueryGetSpecStakeStorageResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/SpecStakeStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpecStakeStorageAll(ctx context.Context, in *QueryAllSpecStakeStorageRequest, opts ...grpc.CallOption) (*QueryAllSpecStakeStorageResponse, error) {
	out := new(QueryAllSpecStakeStorageResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/SpecStakeStorageAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakedServicers(ctx context.Context, in *QueryStakedServicersRequest, opts ...grpc.CallOption) (*QueryStakedServicersResponse, error) {
	out := new(QueryStakedServicersResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/StakedServicers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlockDeadlineForCallback(ctx context.Context, in *QueryGetBlockDeadlineForCallbackRequest, opts ...grpc.CallOption) (*QueryGetBlockDeadlineForCallbackResponse, error) {
	out := new(QueryGetBlockDeadlineForCallbackResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/BlockDeadlineForCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UnstakingServicersAllSpecs(ctx context.Context, in *QueryGetUnstakingServicersAllSpecsRequest, opts ...grpc.CallOption) (*QueryGetUnstakingServicersAllSpecsResponse, error) {
	out := new(QueryGetUnstakingServicersAllSpecsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/UnstakingServicersAllSpecs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UnstakingServicersAllSpecsAll(ctx context.Context, in *QueryAllUnstakingServicersAllSpecsRequest, opts ...grpc.CallOption) (*QueryAllUnstakingServicersAllSpecsResponse, error) {
	out := new(QueryAllUnstakingServicersAllSpecsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/UnstakingServicersAllSpecsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPairing(ctx context.Context, in *QueryGetPairingRequest, opts ...grpc.CallOption) (*QueryGetPairingResponse, error) {
	out := new(QueryGetPairingResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/GetPairing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentSessionStart(ctx context.Context, in *QueryGetCurrentSessionStartRequest, opts ...grpc.CallOption) (*QueryGetCurrentSessionStartResponse, error) {
	out := new(QueryGetCurrentSessionStartResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/CurrentSessionStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PreviousSessionBlocks(ctx context.Context, in *QueryGetPreviousSessionBlocksRequest, opts ...grpc.CallOption) (*QueryGetPreviousSessionBlocksResponse, error) {
	out := new(QueryGetPreviousSessionBlocksResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/PreviousSessionBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SessionStorageForSpec(ctx context.Context, in *QueryGetSessionStorageForSpecRequest, opts ...grpc.CallOption) (*QueryGetSessionStorageForSpecResponse, error) {
	out := new(QueryGetSessionStorageForSpecResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/SessionStorageForSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SessionStorageForSpecAll(ctx context.Context, in *QueryAllSessionStorageForSpecRequest, opts ...grpc.CallOption) (*QueryAllSessionStorageForSpecResponse, error) {
	out := new(QueryAllSessionStorageForSpecResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/SessionStorageForSpecAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SessionStorageForAllSpecs(ctx context.Context, in *QuerySessionStorageForAllSpecsRequest, opts ...grpc.CallOption) (*QuerySessionStorageForAllSpecsResponse, error) {
	out := new(QuerySessionStorageForAllSpecsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/SessionStorageForAllSpecs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllSessionStoragesForSpec(ctx context.Context, in *QueryAllSessionStoragesForSpecRequest, opts ...grpc.CallOption) (*QueryAllSessionStoragesForSpecResponse, error) {
	out := new(QueryAllSessionStoragesForSpecResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/AllSessionStoragesForSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EarliestSessionStart(ctx context.Context, in *QueryGetEarliestSessionStartRequest, opts ...grpc.CallOption) (*QueryGetEarliestSessionStartResponse, error) {
	out := new(QueryGetEarliestSessionStartResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/EarliestSessionStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerifyPairing(ctx context.Context, in *QueryVerifyPairingRequest, opts ...grpc.CallOption) (*QueryVerifyPairingResponse, error) {
	out := new(QueryVerifyPairingResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/VerifyPairing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UniquePaymentStorageUserServicer(ctx context.Context, in *QueryGetUniquePaymentStorageUserServicerRequest, opts ...grpc.CallOption) (*QueryGetUniquePaymentStorageUserServicerResponse, error) {
	out := new(QueryGetUniquePaymentStorageUserServicerResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/UniquePaymentStorageUserServicer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UniquePaymentStorageUserServicerAll(ctx context.Context, in *QueryAllUniquePaymentStorageUserServicerRequest, opts ...grpc.CallOption) (*QueryAllUniquePaymentStorageUserServicerResponse, error) {
	out := new(QueryAllUniquePaymentStorageUserServicerResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/UniquePaymentStorageUserServicerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserPaymentStorage(ctx context.Context, in *QueryGetUserPaymentStorageRequest, opts ...grpc.CallOption) (*QueryGetUserPaymentStorageResponse, error) {
	out := new(QueryGetUserPaymentStorageResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/UserPaymentStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserPaymentStorageAll(ctx context.Context, in *QueryAllUserPaymentStorageRequest, opts ...grpc.CallOption) (*QueryAllUserPaymentStorageResponse, error) {
	out := new(QueryAllUserPaymentStorageResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/UserPaymentStorageAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SessionPayments(ctx context.Context, in *QueryGetSessionPaymentsRequest, opts ...grpc.CallOption) (*QueryGetSessionPaymentsResponse, error) {
	out := new(QueryGetSessionPaymentsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/SessionPayments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SessionPaymentsAll(ctx context.Context, in *QueryAllSessionPaymentsRequest, opts ...grpc.CallOption) (*QueryAllSessionPaymentsResponse, error) {
	out := new(QueryAllSessionPaymentsResponse)
	err := c.cc.Invoke(ctx, "/lavanet.lava.servicer.Query/SessionPaymentsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a StakeMap by index.
	StakeMap(context.Context, *QueryGetStakeMapRequest) (*QueryGetStakeMapResponse, error)
	// Queries a list of StakeMap items.
	StakeMapAll(context.Context, *QueryAllStakeMapRequest) (*QueryAllStakeMapResponse, error)
	// Queries a SpecStakeStorage by index.
	SpecStakeStorage(context.Context, *QueryGetSpecStakeStorageRequest) (*QueryGetSpecStakeStorageResponse, error)
	// Queries a list of SpecStakeStorage items.
	SpecStakeStorageAll(context.Context, *QueryAllSpecStakeStorageRequest) (*QueryAllSpecStakeStorageResponse, error)
	// Queries a list of StakedServicers items.
	StakedServicers(context.Context, *QueryStakedServicersRequest) (*QueryStakedServicersResponse, error)
	// Queries a BlockDeadlineForCallback by index.
	BlockDeadlineForCallback(context.Context, *QueryGetBlockDeadlineForCallbackRequest) (*QueryGetBlockDeadlineForCallbackResponse, error)
	// Queries a UnstakingServicersAllSpecs by id.
	UnstakingServicersAllSpecs(context.Context, *QueryGetUnstakingServicersAllSpecsRequest) (*QueryGetUnstakingServicersAllSpecsResponse, error)
	// Queries a list of UnstakingServicersAllSpecs items.
	UnstakingServicersAllSpecsAll(context.Context, *QueryAllUnstakingServicersAllSpecsRequest) (*QueryAllUnstakingServicersAllSpecsResponse, error)
	// Queries a list of GetPairing items.
	GetPairing(context.Context, *QueryGetPairingRequest) (*QueryGetPairingResponse, error)
	// Queries a CurrentSessionStart by index.
	CurrentSessionStart(context.Context, *QueryGetCurrentSessionStartRequest) (*QueryGetCurrentSessionStartResponse, error)
	// Queries a PreviousSessionBlocks by index.
	PreviousSessionBlocks(context.Context, *QueryGetPreviousSessionBlocksRequest) (*QueryGetPreviousSessionBlocksResponse, error)
	// Queries a SessionStorageForSpec by index.
	SessionStorageForSpec(context.Context, *QueryGetSessionStorageForSpecRequest) (*QueryGetSessionStorageForSpecResponse, error)
	// Queries a list of SessionStorageForSpec items.
	SessionStorageForSpecAll(context.Context, *QueryAllSessionStorageForSpecRequest) (*QueryAllSessionStorageForSpecResponse, error)
	// Queries a list of SessionStorageForAllSpecs items.
	SessionStorageForAllSpecs(context.Context, *QuerySessionStorageForAllSpecsRequest) (*QuerySessionStorageForAllSpecsResponse, error)
	// Queries a list of AllSessionStoragesForSpec items.
	AllSessionStoragesForSpec(context.Context, *QueryAllSessionStoragesForSpecRequest) (*QueryAllSessionStoragesForSpecResponse, error)
	// Queries a EarliestSessionStart by index.
	EarliestSessionStart(context.Context, *QueryGetEarliestSessionStartRequest) (*QueryGetEarliestSessionStartResponse, error)
	// Queries a list of VerifyPairing items.
	VerifyPairing(context.Context, *QueryVerifyPairingRequest) (*QueryVerifyPairingResponse, error)
	// Queries a UniquePaymentStorageUserServicer by index.
	UniquePaymentStorageUserServicer(context.Context, *QueryGetUniquePaymentStorageUserServicerRequest) (*QueryGetUniquePaymentStorageUserServicerResponse, error)
	// Queries a list of UniquePaymentStorageUserServicer items.
	UniquePaymentStorageUserServicerAll(context.Context, *QueryAllUniquePaymentStorageUserServicerRequest) (*QueryAllUniquePaymentStorageUserServicerResponse, error)
	// Queries a UserPaymentStorage by index.
	UserPaymentStorage(context.Context, *QueryGetUserPaymentStorageRequest) (*QueryGetUserPaymentStorageResponse, error)
	// Queries a list of UserPaymentStorage items.
	UserPaymentStorageAll(context.Context, *QueryAllUserPaymentStorageRequest) (*QueryAllUserPaymentStorageResponse, error)
	// Queries a SessionPayments by index.
	SessionPayments(context.Context, *QueryGetSessionPaymentsRequest) (*QueryGetSessionPaymentsResponse, error)
	// Queries a list of SessionPayments items.
	SessionPaymentsAll(context.Context, *QueryAllSessionPaymentsRequest) (*QueryAllSessionPaymentsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) StakeMap(ctx context.Context, req *QueryGetStakeMapRequest) (*QueryGetStakeMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeMap not implemented")
}
func (*UnimplementedQueryServer) StakeMapAll(ctx context.Context, req *QueryAllStakeMapRequest) (*QueryAllStakeMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeMapAll not implemented")
}
func (*UnimplementedQueryServer) SpecStakeStorage(ctx context.Context, req *QueryGetSpecStakeStorageRequest) (*QueryGetSpecStakeStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpecStakeStorage not implemented")
}
func (*UnimplementedQueryServer) SpecStakeStorageAll(ctx context.Context, req *QueryAllSpecStakeStorageRequest) (*QueryAllSpecStakeStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpecStakeStorageAll not implemented")
}
func (*UnimplementedQueryServer) StakedServicers(ctx context.Context, req *QueryStakedServicersRequest) (*QueryStakedServicersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakedServicers not implemented")
}
func (*UnimplementedQueryServer) BlockDeadlineForCallback(ctx context.Context, req *QueryGetBlockDeadlineForCallbackRequest) (*QueryGetBlockDeadlineForCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockDeadlineForCallback not implemented")
}
func (*UnimplementedQueryServer) UnstakingServicersAllSpecs(ctx context.Context, req *QueryGetUnstakingServicersAllSpecsRequest) (*QueryGetUnstakingServicersAllSpecsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnstakingServicersAllSpecs not implemented")
}
func (*UnimplementedQueryServer) UnstakingServicersAllSpecsAll(ctx context.Context, req *QueryAllUnstakingServicersAllSpecsRequest) (*QueryAllUnstakingServicersAllSpecsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnstakingServicersAllSpecsAll not implemented")
}
func (*UnimplementedQueryServer) GetPairing(ctx context.Context, req *QueryGetPairingRequest) (*QueryGetPairingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPairing not implemented")
}
func (*UnimplementedQueryServer) CurrentSessionStart(ctx context.Context, req *QueryGetCurrentSessionStartRequest) (*QueryGetCurrentSessionStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentSessionStart not implemented")
}
func (*UnimplementedQueryServer) PreviousSessionBlocks(ctx context.Context, req *QueryGetPreviousSessionBlocksRequest) (*QueryGetPreviousSessionBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviousSessionBlocks not implemented")
}
func (*UnimplementedQueryServer) SessionStorageForSpec(ctx context.Context, req *QueryGetSessionStorageForSpecRequest) (*QueryGetSessionStorageForSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionStorageForSpec not implemented")
}
func (*UnimplementedQueryServer) SessionStorageForSpecAll(ctx context.Context, req *QueryAllSessionStorageForSpecRequest) (*QueryAllSessionStorageForSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionStorageForSpecAll not implemented")
}
func (*UnimplementedQueryServer) SessionStorageForAllSpecs(ctx context.Context, req *QuerySessionStorageForAllSpecsRequest) (*QuerySessionStorageForAllSpecsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionStorageForAllSpecs not implemented")
}
func (*UnimplementedQueryServer) AllSessionStoragesForSpec(ctx context.Context, req *QueryAllSessionStoragesForSpecRequest) (*QueryAllSessionStoragesForSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllSessionStoragesForSpec not implemented")
}
func (*UnimplementedQueryServer) EarliestSessionStart(ctx context.Context, req *QueryGetEarliestSessionStartRequest) (*QueryGetEarliestSessionStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EarliestSessionStart not implemented")
}
func (*UnimplementedQueryServer) VerifyPairing(ctx context.Context, req *QueryVerifyPairingRequest) (*QueryVerifyPairingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPairing not implemented")
}
func (*UnimplementedQueryServer) UniquePaymentStorageUserServicer(ctx context.Context, req *QueryGetUniquePaymentStorageUserServicerRequest) (*QueryGetUniquePaymentStorageUserServicerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UniquePaymentStorageUserServicer not implemented")
}
func (*UnimplementedQueryServer) UniquePaymentStorageUserServicerAll(ctx context.Context, req *QueryAllUniquePaymentStorageUserServicerRequest) (*QueryAllUniquePaymentStorageUserServicerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UniquePaymentStorageUserServicerAll not implemented")
}
func (*UnimplementedQueryServer) UserPaymentStorage(ctx context.Context, req *QueryGetUserPaymentStorageRequest) (*QueryGetUserPaymentStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPaymentStorage not implemented")
}
func (*UnimplementedQueryServer) UserPaymentStorageAll(ctx context.Context, req *QueryAllUserPaymentStorageRequest) (*QueryAllUserPaymentStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPaymentStorageAll not implemented")
}
func (*UnimplementedQueryServer) SessionPayments(ctx context.Context, req *QueryGetSessionPaymentsRequest) (*QueryGetSessionPaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionPayments not implemented")
}
func (*UnimplementedQueryServer) SessionPaymentsAll(ctx context.Context, req *QueryAllSessionPaymentsRequest) (*QueryAllSessionPaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionPaymentsAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakeMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStakeMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakeMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/StakeMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakeMap(ctx, req.(*QueryGetStakeMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakeMapAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStakeMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakeMapAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/StakeMapAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakeMapAll(ctx, req.(*QueryAllStakeMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpecStakeStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSpecStakeStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpecStakeStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/SpecStakeStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpecStakeStorage(ctx, req.(*QueryGetSpecStakeStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpecStakeStorageAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSpecStakeStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpecStakeStorageAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/SpecStakeStorageAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpecStakeStorageAll(ctx, req.(*QueryAllSpecStakeStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakedServicers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakedServicersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakedServicers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/StakedServicers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakedServicers(ctx, req.(*QueryStakedServicersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlockDeadlineForCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBlockDeadlineForCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlockDeadlineForCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/BlockDeadlineForCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlockDeadlineForCallback(ctx, req.(*QueryGetBlockDeadlineForCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UnstakingServicersAllSpecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUnstakingServicersAllSpecsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UnstakingServicersAllSpecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/UnstakingServicersAllSpecs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UnstakingServicersAllSpecs(ctx, req.(*QueryGetUnstakingServicersAllSpecsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UnstakingServicersAllSpecsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUnstakingServicersAllSpecsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UnstakingServicersAllSpecsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/UnstakingServicersAllSpecsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UnstakingServicersAllSpecsAll(ctx, req.(*QueryAllUnstakingServicersAllSpecsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPairing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPairingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPairing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/GetPairing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPairing(ctx, req.(*QueryGetPairingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentSessionStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCurrentSessionStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentSessionStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/CurrentSessionStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentSessionStart(ctx, req.(*QueryGetCurrentSessionStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PreviousSessionBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPreviousSessionBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PreviousSessionBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/PreviousSessionBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PreviousSessionBlocks(ctx, req.(*QueryGetPreviousSessionBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SessionStorageForSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSessionStorageForSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SessionStorageForSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/SessionStorageForSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SessionStorageForSpec(ctx, req.(*QueryGetSessionStorageForSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SessionStorageForSpecAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSessionStorageForSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SessionStorageForSpecAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/SessionStorageForSpecAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SessionStorageForSpecAll(ctx, req.(*QueryAllSessionStorageForSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SessionStorageForAllSpecs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySessionStorageForAllSpecsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SessionStorageForAllSpecs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/SessionStorageForAllSpecs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SessionStorageForAllSpecs(ctx, req.(*QuerySessionStorageForAllSpecsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllSessionStoragesForSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSessionStoragesForSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllSessionStoragesForSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/AllSessionStoragesForSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllSessionStoragesForSpec(ctx, req.(*QueryAllSessionStoragesForSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EarliestSessionStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEarliestSessionStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EarliestSessionStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/EarliestSessionStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EarliestSessionStart(ctx, req.(*QueryGetEarliestSessionStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerifyPairing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerifyPairingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerifyPairing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/VerifyPairing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerifyPairing(ctx, req.(*QueryVerifyPairingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UniquePaymentStorageUserServicer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUniquePaymentStorageUserServicerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UniquePaymentStorageUserServicer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/UniquePaymentStorageUserServicer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UniquePaymentStorageUserServicer(ctx, req.(*QueryGetUniquePaymentStorageUserServicerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UniquePaymentStorageUserServicerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUniquePaymentStorageUserServicerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UniquePaymentStorageUserServicerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/UniquePaymentStorageUserServicerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UniquePaymentStorageUserServicerAll(ctx, req.(*QueryAllUniquePaymentStorageUserServicerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserPaymentStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUserPaymentStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserPaymentStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/UserPaymentStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserPaymentStorage(ctx, req.(*QueryGetUserPaymentStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserPaymentStorageAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUserPaymentStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserPaymentStorageAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/UserPaymentStorageAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserPaymentStorageAll(ctx, req.(*QueryAllUserPaymentStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SessionPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSessionPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SessionPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/SessionPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SessionPayments(ctx, req.(*QueryGetSessionPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SessionPaymentsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSessionPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SessionPaymentsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lavanet.lava.servicer.Query/SessionPaymentsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SessionPaymentsAll(ctx, req.(*QueryAllSessionPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lavanet.lava.servicer.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "StakeMap",
			Handler:    _Query_StakeMap_Handler,
		},
		{
			MethodName: "StakeMapAll",
			Handler:    _Query_StakeMapAll_Handler,
		},
		{
			MethodName: "SpecStakeStorage",
			Handler:    _Query_SpecStakeStorage_Handler,
		},
		{
			MethodName: "SpecStakeStorageAll",
			Handler:    _Query_SpecStakeStorageAll_Handler,
		},
		{
			MethodName: "StakedServicers",
			Handler:    _Query_StakedServicers_Handler,
		},
		{
			MethodName: "BlockDeadlineForCallback",
			Handler:    _Query_BlockDeadlineForCallback_Handler,
		},
		{
			MethodName: "UnstakingServicersAllSpecs",
			Handler:    _Query_UnstakingServicersAllSpecs_Handler,
		},
		{
			MethodName: "UnstakingServicersAllSpecsAll",
			Handler:    _Query_UnstakingServicersAllSpecsAll_Handler,
		},
		{
			MethodName: "GetPairing",
			Handler:    _Query_GetPairing_Handler,
		},
		{
			MethodName: "CurrentSessionStart",
			Handler:    _Query_CurrentSessionStart_Handler,
		},
		{
			MethodName: "PreviousSessionBlocks",
			Handler:    _Query_PreviousSessionBlocks_Handler,
		},
		{
			MethodName: "SessionStorageForSpec",
			Handler:    _Query_SessionStorageForSpec_Handler,
		},
		{
			MethodName: "SessionStorageForSpecAll",
			Handler:    _Query_SessionStorageForSpecAll_Handler,
		},
		{
			MethodName: "SessionStorageForAllSpecs",
			Handler:    _Query_SessionStorageForAllSpecs_Handler,
		},
		{
			MethodName: "AllSessionStoragesForSpec",
			Handler:    _Query_AllSessionStoragesForSpec_Handler,
		},
		{
			MethodName: "EarliestSessionStart",
			Handler:    _Query_EarliestSessionStart_Handler,
		},
		{
			MethodName: "VerifyPairing",
			Handler:    _Query_VerifyPairing_Handler,
		},
		{
			MethodName: "UniquePaymentStorageUserServicer",
			Handler:    _Query_UniquePaymentStorageUserServicer_Handler,
		},
		{
			MethodName: "UniquePaymentStorageUserServicerAll",
			Handler:    _Query_UniquePaymentStorageUserServicerAll_Handler,
		},
		{
			MethodName: "UserPaymentStorage",
			Handler:    _Query_UserPaymentStorage_Handler,
		},
		{
			MethodName: "UserPaymentStorageAll",
			Handler:    _Query_UserPaymentStorageAll_Handler,
		},
		{
			MethodName: "SessionPayments",
			Handler:    _Query_SessionPayments_Handler,
		},
		{
			MethodName: "SessionPaymentsAll",
			Handler:    _Query_SessionPaymentsAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "servicer/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetStakeMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStakeMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStakeMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStakeMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStakeMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStakeMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StakeMap.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStakeMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStakeMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStakeMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStakeMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStakeMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStakeMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakeMap) > 0 {
		for iNdEx := len(m.StakeMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakeMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSpecStakeStorageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSpecStakeStorageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSpecStakeStorageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSpecStakeStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSpecStakeStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSpecStakeStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SpecStakeStorage.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSpecStakeStorageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSpecStakeStorageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSpecStakeStorageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSpecStakeStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSpecStakeStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSpecStakeStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SpecStakeStorage) > 0 {
		for iNdEx := len(m.SpecStakeStorage) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpecStakeStorage[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakedServicersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakedServicersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakedServicersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpecName) > 0 {
		i -= len(m.SpecName)
		copy(dAtA[i:], m.SpecName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpecName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakedServicersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakedServicersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakedServicersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Output) > 0 {
		i -= len(m.Output)
		copy(dAtA[i:], m.Output)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Output)))
		i--
		dAtA[i] = 0x12
	}
	if m.StakeStorage != nil {
		{
			size, err := m.StakeStorage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBlockDeadlineForCallbackRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlockDeadlineForCallbackRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlockDeadlineForCallbackRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetBlockDeadlineForCallbackResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlockDeadlineForCallbackResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlockDeadlineForCallbackResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BlockDeadlineForCallback.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetUnstakingServicersAllSpecsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUnstakingServicersAllSpecsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUnstakingServicersAllSpecsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUnstakingServicersAllSpecsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUnstakingServicersAllSpecsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUnstakingServicersAllSpecsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UnstakingServicersAllSpecs.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllUnstakingServicersAllSpecsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUnstakingServicersAllSpecsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUnstakingServicersAllSpecsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllUnstakingServicersAllSpecsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUnstakingServicersAllSpecsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUnstakingServicersAllSpecsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UnstakingServicersAllSpecs) > 0 {
		for iNdEx := len(m.UnstakingServicersAllSpecs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnstakingServicersAllSpecs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPairingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPairingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPairingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAddr) > 0 {
		i -= len(m.UserAddr)
		copy(dAtA[i:], m.UserAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SpecName) > 0 {
		i -= len(m.SpecName)
		copy(dAtA[i:], m.SpecName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpecName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPairingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPairingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPairingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Servicers != nil {
		{
			size, err := m.Servicers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentSessionStartRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentSessionStartRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentSessionStartRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetCurrentSessionStartResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCurrentSessionStartResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCurrentSessionStartResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CurrentSessionStart.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPreviousSessionBlocksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPreviousSessionBlocksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPreviousSessionBlocksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetPreviousSessionBlocksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPreviousSessionBlocksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPreviousSessionBlocksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PreviousSessionBlocks.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetSessionStorageForSpecRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSessionStorageForSpecRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSessionStorageForSpecRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSessionStorageForSpecResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSessionStorageForSpecResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSessionStorageForSpecResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SessionStorageForSpec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSessionStorageForSpecRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSessionStorageForSpecRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSessionStorageForSpecRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSessionStorageForSpecResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSessionStorageForSpecResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSessionStorageForSpecResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionStorageForSpec) > 0 {
		for iNdEx := len(m.SessionStorageForSpec) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SessionStorageForSpec[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySessionStorageForAllSpecsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySessionStorageForAllSpecsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySessionStorageForAllSpecsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockNum != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySessionStorageForAllSpecsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySessionStorageForAllSpecsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySessionStorageForAllSpecsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Servicers != nil {
		{
			size, err := m.Servicers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSessionStoragesForSpecRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSessionStoragesForSpecRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSessionStoragesForSpecRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpecName) > 0 {
		i -= len(m.SpecName)
		copy(dAtA[i:], m.SpecName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpecName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSessionStoragesForSpecResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSessionStoragesForSpecResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSessionStoragesForSpecResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Storages) > 0 {
		for iNdEx := len(m.Storages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Storages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEarliestSessionStartRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEarliestSessionStartRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEarliestSessionStartRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetEarliestSessionStartResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEarliestSessionStartResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEarliestSessionStartResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.EarliestSessionStart.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryVerifyPairingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyPairingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyPairingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockNum != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockNum))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ServicerAddr) > 0 {
		i -= len(m.ServicerAddr)
		copy(dAtA[i:], m.ServicerAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ServicerAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserAddr) > 0 {
		i -= len(m.UserAddr)
		copy(dAtA[i:], m.UserAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Spec != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Spec))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyPairingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyPairingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyPairingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Overlap {
		i--
		if m.Overlap {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUniquePaymentStorageUserServicerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUniquePaymentStorageUserServicerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUniquePaymentStorageUserServicerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUniquePaymentStorageUserServicerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUniquePaymentStorageUserServicerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUniquePaymentStorageUserServicerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UniquePaymentStorageUserServicer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllUniquePaymentStorageUserServicerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUniquePaymentStorageUserServicerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUniquePaymentStorageUserServicerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllUniquePaymentStorageUserServicerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUniquePaymentStorageUserServicerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUniquePaymentStorageUserServicerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UniquePaymentStorageUserServicer) > 0 {
		for iNdEx := len(m.UniquePaymentStorageUserServicer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UniquePaymentStorageUserServicer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUserPaymentStorageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserPaymentStorageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserPaymentStorageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUserPaymentStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserPaymentStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserPaymentStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UserPaymentStorage.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllUserPaymentStorageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUserPaymentStorageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUserPaymentStorageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllUserPaymentStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUserPaymentStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUserPaymentStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserPaymentStorage) > 0 {
		for iNdEx := len(m.UserPaymentStorage) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserPaymentStorage[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSessionPaymentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSessionPaymentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSessionPaymentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSessionPaymentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSessionPaymentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSessionPaymentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SessionPayments.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSessionPaymentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSessionPaymentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSessionPaymentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSessionPaymentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSessionPaymentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSessionPaymentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionPayments) > 0 {
		for iNdEx := len(m.SessionPayments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SessionPayments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetStakeMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStakeMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StakeMap.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStakeMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStakeMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StakeMap) > 0 {
		for _, e := range m.StakeMap {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSpecStakeStorageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSpecStakeStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SpecStakeStorage.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSpecStakeStorageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSpecStakeStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SpecStakeStorage) > 0 {
		for _, e := range m.SpecStakeStorage {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakedServicersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakedServicersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StakeStorage != nil {
		l = m.StakeStorage.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Output)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBlockDeadlineForCallbackRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetBlockDeadlineForCallbackResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BlockDeadlineForCallback.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetUnstakingServicersAllSpecsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetUnstakingServicersAllSpecsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UnstakingServicersAllSpecs.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllUnstakingServicersAllSpecsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllUnstakingServicersAllSpecsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UnstakingServicersAllSpecs) > 0 {
		for _, e := range m.UnstakingServicersAllSpecs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPairingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UserAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPairingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Servicers != nil {
		l = m.Servicers.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCurrentSessionStartRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetCurrentSessionStartResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CurrentSessionStart.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetPreviousSessionBlocksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetPreviousSessionBlocksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PreviousSessionBlocks.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetSessionStorageForSpecRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSessionStorageForSpecResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SessionStorageForSpec.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSessionStorageForSpecRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSessionStorageForSpecResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SessionStorageForSpec) > 0 {
		for _, e := range m.SessionStorageForSpec {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySessionStorageForAllSpecsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockNum != 0 {
		n += 1 + sovQuery(uint64(m.BlockNum))
	}
	return n
}

func (m *QuerySessionStorageForAllSpecsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Servicers != nil {
		l = m.Servicers.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSessionStoragesForSpecRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSessionStoragesForSpecResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Storages) > 0 {
		for _, e := range m.Storages {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetEarliestSessionStartRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetEarliestSessionStartResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EarliestSessionStart.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryVerifyPairingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Spec != 0 {
		n += 1 + sovQuery(uint64(m.Spec))
	}
	l = len(m.UserAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ServicerAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BlockNum != 0 {
		n += 1 + sovQuery(uint64(m.BlockNum))
	}
	return n
}

func (m *QueryVerifyPairingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	if m.Overlap {
		n += 2
	}
	return n
}

func (m *QueryGetUniquePaymentStorageUserServicerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUniquePaymentStorageUserServicerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UniquePaymentStorageUserServicer.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllUniquePaymentStorageUserServicerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllUniquePaymentStorageUserServicerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UniquePaymentStorageUserServicer) > 0 {
		for _, e := range m.UniquePaymentStorageUserServicer {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUserPaymentStorageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUserPaymentStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UserPaymentStorage.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllUserPaymentStorageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllUserPaymentStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserPaymentStorage) > 0 {
		for _, e := range m.UserPaymentStorage {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSessionPaymentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSessionPaymentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SessionPayments.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSessionPaymentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSessionPaymentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SessionPayments) > 0 {
		for _, e := range m.SessionPayments {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStakeMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStakeMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStakeMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStakeMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStakeMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStakeMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakeMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStakeMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStakeMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStakeMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStakeMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStakeMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStakeMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakeMap = append(m.StakeMap, StakeMap{})
			if err := m.StakeMap[len(m.StakeMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSpecStakeStorageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSpecStakeStorageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSpecStakeStorageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSpecStakeStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSpecStakeStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSpecStakeStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecStakeStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpecStakeStorage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSpecStakeStorageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSpecStakeStorageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSpecStakeStorageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSpecStakeStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSpecStakeStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSpecStakeStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecStakeStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecStakeStorage = append(m.SpecStakeStorage, SpecStakeStorage{})
			if err := m.SpecStakeStorage[len(m.SpecStakeStorage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakedServicersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakedServicersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakedServicersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakedServicersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakedServicersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakedServicersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StakeStorage == nil {
				m.StakeStorage = &StakeStorage{}
			}
			if err := m.StakeStorage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlockDeadlineForCallbackRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlockDeadlineForCallbackRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlockDeadlineForCallbackRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlockDeadlineForCallbackResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlockDeadlineForCallbackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlockDeadlineForCallbackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockDeadlineForCallback", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BlockDeadlineForCallback.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUnstakingServicersAllSpecsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUnstakingServicersAllSpecsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUnstakingServicersAllSpecsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUnstakingServicersAllSpecsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUnstakingServicersAllSpecsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUnstakingServicersAllSpecsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakingServicersAllSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnstakingServicersAllSpecs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUnstakingServicersAllSpecsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUnstakingServicersAllSpecsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUnstakingServicersAllSpecsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUnstakingServicersAllSpecsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUnstakingServicersAllSpecsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUnstakingServicersAllSpecsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakingServicersAllSpecs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnstakingServicersAllSpecs = append(m.UnstakingServicersAllSpecs, UnstakingServicersAllSpecs{})
			if err := m.UnstakingServicersAllSpecs[len(m.UnstakingServicersAllSpecs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPairingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPairingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPairingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPairingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPairingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPairingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servicers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Servicers == nil {
				m.Servicers = &StakeStorage{}
			}
			if err := m.Servicers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentSessionStartRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentSessionStartRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentSessionStartRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCurrentSessionStartResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCurrentSessionStartResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCurrentSessionStartResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSessionStart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentSessionStart.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPreviousSessionBlocksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPreviousSessionBlocksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPreviousSessionBlocksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPreviousSessionBlocksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPreviousSessionBlocksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPreviousSessionBlocksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousSessionBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PreviousSessionBlocks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSessionStorageForSpecRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSessionStorageForSpecRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSessionStorageForSpecRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSessionStorageForSpecResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSessionStorageForSpecResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSessionStorageForSpecResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionStorageForSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionStorageForSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSessionStorageForSpecRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSessionStorageForSpecRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSessionStorageForSpecRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSessionStorageForSpecResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSessionStorageForSpecResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSessionStorageForSpecResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionStorageForSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionStorageForSpec = append(m.SessionStorageForSpec, SessionStorageForSpec{})
			if err := m.SessionStorageForSpec[len(m.SessionStorageForSpec)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySessionStorageForAllSpecsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySessionStorageForAllSpecsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySessionStorageForAllSpecsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNum", wireType)
			}
			m.BlockNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySessionStorageForAllSpecsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySessionStorageForAllSpecsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySessionStorageForAllSpecsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servicers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Servicers == nil {
				m.Servicers = &StakeStorage{}
			}
			if err := m.Servicers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSessionStoragesForSpecRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSessionStoragesForSpecRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSessionStoragesForSpecRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSessionStoragesForSpecResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSessionStoragesForSpecResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSessionStoragesForSpecResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Storages = append(m.Storages, SessionStorageForSpec{})
			if err := m.Storages[len(m.Storages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEarliestSessionStartRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEarliestSessionStartRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEarliestSessionStartRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEarliestSessionStartResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEarliestSessionStartResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEarliestSessionStartResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarliestSessionStart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EarliestSessionStart.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyPairingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyPairingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyPairingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			m.Spec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Spec |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNum", wireType)
			}
			m.BlockNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyPairingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyPairingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyPairingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overlap", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Overlap = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUniquePaymentStorageUserServicerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUniquePaymentStorageUserServicerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUniquePaymentStorageUserServicerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUniquePaymentStorageUserServicerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUniquePaymentStorageUserServicerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUniquePaymentStorageUserServicerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniquePaymentStorageUserServicer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UniquePaymentStorageUserServicer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUniquePaymentStorageUserServicerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUniquePaymentStorageUserServicerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUniquePaymentStorageUserServicerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUniquePaymentStorageUserServicerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUniquePaymentStorageUserServicerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUniquePaymentStorageUserServicerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniquePaymentStorageUserServicer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniquePaymentStorageUserServicer = append(m.UniquePaymentStorageUserServicer, UniquePaymentStorageUserServicer{})
			if err := m.UniquePaymentStorageUserServicer[len(m.UniquePaymentStorageUserServicer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserPaymentStorageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserPaymentStorageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserPaymentStorageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserPaymentStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserPaymentStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserPaymentStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPaymentStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserPaymentStorage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUserPaymentStorageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUserPaymentStorageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUserPaymentStorageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUserPaymentStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUserPaymentStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUserPaymentStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPaymentStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPaymentStorage = append(m.UserPaymentStorage, UserPaymentStorage{})
			if err := m.UserPaymentStorage[len(m.UserPaymentStorage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSessionPaymentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSessionPaymentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSessionPaymentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSessionPaymentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSessionPaymentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSessionPaymentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionPayments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionPayments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSessionPaymentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSessionPaymentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSessionPaymentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSessionPaymentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSessionPaymentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSessionPaymentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionPayments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionPayments = append(m.SessionPayments, SessionPayments{})
			if err := m.SessionPayments[len(m.SessionPayments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
