// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: servicer/stake_map.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StakeMap struct {
	Index             string     `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Stake             types.Coin `protobuf:"bytes,2,opt,name=stake,proto3" json:"stake"`
	Deadline          *BlockNum  `protobuf:"bytes,3,opt,name=deadline,proto3" json:"deadline,omitempty"`
	OperatorAddresses []string   `protobuf:"bytes,4,rep,name=operatorAddresses,proto3" json:"operatorAddresses,omitempty"`
}

func (m *StakeMap) Reset()         { *m = StakeMap{} }
func (m *StakeMap) String() string { return proto.CompactTextString(m) }
func (*StakeMap) ProtoMessage()    {}
func (*StakeMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_ebae8495d0d1c579, []int{0}
}
func (m *StakeMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakeMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakeMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakeMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakeMap.Merge(m, src)
}
func (m *StakeMap) XXX_Size() int {
	return m.Size()
}
func (m *StakeMap) XXX_DiscardUnknown() {
	xxx_messageInfo_StakeMap.DiscardUnknown(m)
}

var xxx_messageInfo_StakeMap proto.InternalMessageInfo

func (m *StakeMap) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *StakeMap) GetStake() types.Coin {
	if m != nil {
		return m.Stake
	}
	return types.Coin{}
}

func (m *StakeMap) GetDeadline() *BlockNum {
	if m != nil {
		return m.Deadline
	}
	return nil
}

func (m *StakeMap) GetOperatorAddresses() []string {
	if m != nil {
		return m.OperatorAddresses
	}
	return nil
}

func init() {
	proto.RegisterType((*StakeMap)(nil), "lavanet.lava.servicer.StakeMap")
}

func init() { proto.RegisterFile("servicer/stake_map.proto", fileDescriptor_ebae8495d0d1c579) }

var fileDescriptor_ebae8495d0d1c579 = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x3f, 0x4f, 0xf3, 0x30,
	0x10, 0xc6, 0xe3, 0xb7, 0xed, 0xab, 0xd6, 0x4c, 0x44, 0x45, 0x0a, 0x1d, 0xdc, 0x8a, 0x29, 0x93,
	0xad, 0x16, 0x31, 0x31, 0x11, 0x66, 0x18, 0xca, 0xc6, 0x52, 0x39, 0xc9, 0xa9, 0x58, 0x6d, 0x7c,
	0x91, 0xed, 0x56, 0xe5, 0x5b, 0xf0, 0xb1, 0x32, 0x76, 0x64, 0x42, 0x28, 0xf9, 0x22, 0x28, 0x7f,
	0x28, 0x03, 0x4c, 0x77, 0xf6, 0xdd, 0xef, 0xb9, 0xbb, 0x87, 0x06, 0x16, 0xcc, 0x5e, 0x25, 0x60,
	0x84, 0x75, 0x72, 0x03, 0xab, 0x4c, 0xe6, 0x3c, 0x37, 0xe8, 0xd0, 0xbf, 0xd8, 0xca, 0xbd, 0xd4,
	0xe0, 0x78, 0x1d, 0xf9, 0x77, 0xdb, 0xe4, 0x07, 0x88, 0xb7, 0x98, 0x6c, 0x56, 0x7a, 0x97, 0xb5,
	0xc0, 0x64, 0xbc, 0xc6, 0x35, 0x36, 0xa9, 0xa8, 0xb3, 0xee, 0x97, 0x25, 0x68, 0x33, 0xb4, 0x22,
	0x96, 0x16, 0xc4, 0x7e, 0x1e, 0x83, 0x93, 0x73, 0x91, 0xa0, 0xd2, 0x6d, 0xfd, 0xaa, 0x20, 0x74,
	0xf8, 0x54, 0x8f, 0x7e, 0x90, 0xb9, 0x3f, 0xa6, 0x03, 0xa5, 0x53, 0x38, 0x04, 0x64, 0x46, 0xc2,
	0xd1, 0xb2, 0x7d, 0xf8, 0x37, 0x74, 0xd0, 0x2c, 0x17, 0xfc, 0x9b, 0x91, 0xf0, 0x6c, 0x71, 0xc9,
	0x5b, 0x49, 0x5e, 0x4b, 0xf2, 0x4e, 0x92, 0xdf, 0xa3, 0xd2, 0x51, 0xbf, 0xf8, 0x98, 0x7a, 0xcb,
	0xb6, 0xdb, 0xbf, 0xa5, 0xc3, 0x14, 0x64, 0xba, 0x55, 0x1a, 0x82, 0x5e, 0x43, 0x4e, 0xf9, 0x9f,
	0x37, 0xf1, 0xa8, 0xbe, 0xe4, 0x71, 0x97, 0x2d, 0x4f, 0x80, 0xbf, 0xa0, 0xe7, 0x98, 0x83, 0x91,
	0x0e, 0xcd, 0x5d, 0x9a, 0x1a, 0xb0, 0x16, 0x6c, 0xd0, 0x9f, 0xf5, 0xc2, 0x51, 0x37, 0xe4, 0x77,
	0x39, 0x8a, 0x8a, 0x92, 0x91, 0x63, 0xc9, 0xc8, 0x67, 0xc9, 0xc8, 0x5b, 0xc5, 0xbc, 0x63, 0xc5,
	0xbc, 0xf7, 0x8a, 0x79, 0xcf, 0xe1, 0x5a, 0xb9, 0x97, 0x5d, 0xcc, 0x13, 0xcc, 0x44, 0xb7, 0x42,
	0x13, 0xc5, 0x41, 0x9c, 0xec, 0x74, 0xaf, 0x39, 0xd8, 0xf8, 0x7f, 0xe3, 0xca, 0xf5, 0x57, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x46, 0xe7, 0x57, 0xd1, 0x98, 0x01, 0x00, 0x00,
}

func (m *StakeMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakeMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakeMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddresses) > 0 {
		for iNdEx := len(m.OperatorAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OperatorAddresses[iNdEx])
			copy(dAtA[i:], m.OperatorAddresses[iNdEx])
			i = encodeVarintStakeMap(dAtA, i, uint64(len(m.OperatorAddresses[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Deadline != nil {
		{
			size, err := m.Deadline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStakeMap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Stake.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStakeMap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintStakeMap(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStakeMap(dAtA []byte, offset int, v uint64) int {
	offset -= sovStakeMap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StakeMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovStakeMap(uint64(l))
	}
	l = m.Stake.Size()
	n += 1 + l + sovStakeMap(uint64(l))
	if m.Deadline != nil {
		l = m.Deadline.Size()
		n += 1 + l + sovStakeMap(uint64(l))
	}
	if len(m.OperatorAddresses) > 0 {
		for _, s := range m.OperatorAddresses {
			l = len(s)
			n += 1 + l + sovStakeMap(uint64(l))
		}
	}
	return n
}

func sovStakeMap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStakeMap(x uint64) (n int) {
	return sovStakeMap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StakeMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakeMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakeMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakeMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakeMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakeMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakeMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakeMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStakeMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStakeMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakeMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStakeMap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStakeMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deadline == nil {
				m.Deadline = &BlockNum{}
			}
			if err := m.Deadline.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakeMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakeMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakeMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddresses = append(m.OperatorAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStakeMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakeMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStakeMap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStakeMap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakeMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakeMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStakeMap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStakeMap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStakeMap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStakeMap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStakeMap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStakeMap = fmt.Errorf("proto: unexpected end of group")
)
