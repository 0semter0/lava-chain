// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: servicer/session_payments.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SessionPayments struct {
	Index         string                `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	UsersPayments []*UserPaymentStorage `protobuf:"bytes,2,rep,name=usersPayments,proto3" json:"usersPayments,omitempty"`
}

func (m *SessionPayments) Reset()         { *m = SessionPayments{} }
func (m *SessionPayments) String() string { return proto.CompactTextString(m) }
func (*SessionPayments) ProtoMessage()    {}
func (*SessionPayments) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ac631a96a6f54ea, []int{0}
}
func (m *SessionPayments) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionPayments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionPayments.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionPayments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionPayments.Merge(m, src)
}
func (m *SessionPayments) XXX_Size() int {
	return m.Size()
}
func (m *SessionPayments) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionPayments.DiscardUnknown(m)
}

var xxx_messageInfo_SessionPayments proto.InternalMessageInfo

func (m *SessionPayments) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *SessionPayments) GetUsersPayments() []*UserPaymentStorage {
	if m != nil {
		return m.UsersPayments
	}
	return nil
}

func init() {
	proto.RegisterType((*SessionPayments)(nil), "lavanet.lava.servicer.SessionPayments")
}

func init() { proto.RegisterFile("servicer/session_payments.proto", fileDescriptor_2ac631a96a6f54ea) }

var fileDescriptor_2ac631a96a6f54ea = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2f, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x2d, 0xd2, 0x2f, 0x4e, 0x2d, 0x2e, 0xce, 0xcc, 0xcf, 0x8b, 0x2f, 0x48, 0xac,
	0xcc, 0x4d, 0xcd, 0x2b, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xcd, 0x49, 0x2c,
	0x4b, 0xcc, 0x4b, 0x2d, 0xd1, 0x03, 0xd1, 0x7a, 0x30, 0xd5, 0x52, 0xca, 0x70, 0x7d, 0xa5, 0xc5,
	0xa9, 0x45, 0x30, 0x4d, 0xf1, 0xc5, 0x25, 0xf9, 0x45, 0x89, 0xe9, 0xa9, 0x10, 0xbd, 0x4a, 0x15,
	0x5c, 0xfc, 0xc1, 0x10, 0x53, 0x03, 0xa0, 0x86, 0x0a, 0x89, 0x70, 0xb1, 0x66, 0xe6, 0xa5, 0xa4,
	0x56, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x41, 0x38, 0x42, 0xfe, 0x5c, 0xbc, 0x20, 0x63,
	0x8a, 0x61, 0xca, 0x24, 0x98, 0x14, 0x98, 0x35, 0xb8, 0x8d, 0x34, 0xf5, 0xb0, 0x5a, 0xae, 0x17,
	0x5a, 0x9c, 0x5a, 0x04, 0x55, 0x1a, 0x0c, 0xb1, 0x30, 0x08, 0x55, 0xbf, 0x93, 0xd3, 0x89, 0x47,
	0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85,
	0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x69, 0xa4, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9,
	0x25, 0xe7, 0xe7, 0xea, 0x43, 0x4d, 0x07, 0xd3, 0xfa, 0x15, 0xfa, 0x70, 0x2f, 0x95, 0x54, 0x16,
	0xa4, 0x16, 0x27, 0xb1, 0x81, 0x3d, 0x61, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x48, 0x1c, 0x7b,
	0x35, 0x23, 0x01, 0x00, 0x00,
}

func (m *SessionPayments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionPayments) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionPayments) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UsersPayments) > 0 {
		for iNdEx := len(m.UsersPayments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UsersPayments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSessionPayments(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintSessionPayments(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSessionPayments(dAtA []byte, offset int, v uint64) int {
	offset -= sovSessionPayments(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SessionPayments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovSessionPayments(uint64(l))
	}
	if len(m.UsersPayments) > 0 {
		for _, e := range m.UsersPayments {
			l = e.Size()
			n += 1 + l + sovSessionPayments(uint64(l))
		}
	}
	return n
}

func sovSessionPayments(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSessionPayments(x uint64) (n int) {
	return sovSessionPayments(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SessionPayments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionPayments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionPayments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionPayments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionPayments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsersPayments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionPayments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionPayments
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionPayments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsersPayments = append(m.UsersPayments, &UserPaymentStorage{})
			if err := m.UsersPayments[len(m.UsersPayments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionPayments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionPayments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSessionPayments(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSessionPayments
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSessionPayments
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSessionPayments
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSessionPayments
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSessionPayments
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSessionPayments
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSessionPayments        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSessionPayments          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSessionPayments = fmt.Errorf("proto: unexpected end of group")
)
