{{- $keySecretName := required ".Values.key.secretName is required." .Values.key.secretName -}}
{{- $keySecretKey := required ".Values.key.secretKey is required." .Values.key.secretKey -}}
{{- $keyPasswordSecretName := required ".Values.key.passwordSecretName is required." .Values.key.passwordSecretName -}}
{{- $keyPasswordSecretKey := required ".Values.key.passwordSecretKey is required." .Values.key.passwordSecretKey -}}
{{- $endpoint := required ".Values.endpoint is required." .Values.endpoint -}}
{{- $supportedChainIds := required ".Values.supportedChainIds is required." .Values.supportedChainIds -}}
{{- $configFilePath := default "/etc/default/config/provider_config.yaml" .Values.configFilePath  -}}
{{- if (eq $configFilePath "/etc/default/config/provider_config.yaml") }}
  {{- $_ := required "You must either set .Values.configFilePath OR .Values.configYaml" .Values.configYaml -}}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "provider.fullname"  . }}
  labels:
    lavanet.xyz/node_moniker:  {{ include "provider.moniker"  . }}
    lavanet.xyz/node_type: "provider"
    {{- include "provider.labels" . | nindent 4 }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      lavanet.xyz/node_moniker:  {{ include "provider.moniker"  . }}
      lavanet.xyz/node_type: "provider"
      {{- include "provider.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        lavanet.xyz/node_moniker:  {{ include "provider.moniker"  . }}
        lavanet.xyz/node_type: "provider"
        {{- include "provider.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      ## init container to import key into keyring
      initContainers:
        - name: init-import-key
          image: busybox:1.28
          command: 
           - sh
           - -c
           - | 
            # exit when any command fails
            set -e 
            if [ -f /data/imported ]; then
              echo "Key has already been exported, exiting..."
              exit 0
            fi
            # import key into keyring
            echo $KEY_PASSWORD | lavad keys import {{ include "provider.keyname" . }} $KEY_FILE

            # mark as imported
            touch /data/imported
          env:
            - name: KEY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $keyPasswordSecretName }}
                  key: {{ $keyPasswordSecretKey }}
            - name: KEY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $keySecretName }}
                  key: {{ $keySecretKey }}
      containers:
        - name: {{ include "provider.fullname"  . }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
          {{- if .Values.configYaml }}
            - name: config-volume-from-values
              mountPath: /etc/default/config
              readOnly: true
          {{- end }}
          {{- range .Values.extraSecretMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              subPath: {{ .subPath }}
              readOnly: {{ .readOnly }}
          {{- end }}
          {{- range .Values.extraConfigMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              subPath: {{ .subPath }}
              readOnly: {{ .readOnly }}
          {{- end }}
            - name: data-volume
              mountPath: {{ .Values.persistentVolume.mountPath }}
              subPath: "{{ .Values.persistentVolume.subPath }}"
          {{- with .Values.envFrom }}
          envFrom: 
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env: 
            - name: LOG_LEVEL
              value: {{ .Values.logLevel }}
          {{- with .Values.env }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          ports:
            - name: {{ .Values.port.name }}
              containerPort: {{ .Values.port.number }}
              protocol: {{ .Values.port.protocol }}
          {{- if .Values.command }}
          {{- with .Values.commmand.name }}
          command: 
            - {{ . | quote }}
          {{- end }}
          {{- with .Values.commmand.args }}
          args:
            {{- toYaml . | nindent 12 -}}
          {{- end }}
          # default command
          {{- else }}
          command: ["lavad"]
          args: ["rpcprovider", "{{ $configFilePath }}"]
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{ if .Values.defaultLivenessProbe.enabled }}
          livenessProbe:
            exec:
              command: ["lavad", "test", "rpcprovider", 
               "--from",  {{ include "provider.keyname" . | quote }}, 
               "--endpoint", "{{ $endpoint }}:443,{{ index $supportedChainIds 0 }}"]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          {{ else if .Values.customLivenessProbe.enabled}}
          livenessProbe:
            {{- toYaml .Values.customLivenessProbe | nindent 12 }}
          {{- end }}
          {{ if .Values.defaultLivenessProbe.enabled }}
          readinessProbe:
            exec:
              command: ["lavad", "test", "rpcprovider", 
               "--from",  {{- include "provider.keyname" . | quote }}, 
               "--endpoint", "{{ $endpoint }}:443,{{ index $supportedChainIds 0 }}"]
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          {{ else if .Values.customReadinessProbe.enabled}}
          readinessProbe:
            {{- toYaml .Values.customReadinessProbe | nindent 12 }}
          {{ end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        {{- if .Values.configYaml }}
        - name: config-volume-from-values
          configMap:
            name: {{ include "provider.fullname" . }}-config-from-values
        {{- end }}
        {{- range .Values.extraSecretMounts }}
        - name: {{ .name }}
          secret:
            secretName: {{ .secretName }}
            {{- with .optional }}
            optional: {{ . }}
            {{- end }}
        {{- end }}
        {{- range .Values.extraConfigMounts }}
        - name: {{ .name }}
          secret:
            secretName: {{ .secretName }}
            {{- with .optional }}
            optional: {{ . }}
            {{- end }}
        {{- end }}
        - name: data-volume
        {{- if .Values.persistentVolume.enabled }}
          persistentVolumeClaim:
            claimName: {{ if .Values.persistentVolume.existingClaim }}{{ .Values.persistentVolume.existingClaim }}{{- else }} {{- include "provider.fullname"  . }}-data-volume-pvc {{- end }}
        {{- else }}
          emptyDir:
          {{- if .Values.emptyDir.sizeLimit }}
            sizeLimit: {{ .Values.emptyDir.sizeLimit }}
          {{- else }}
            {}
          {{- end -}}
        {{- end -}}